THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "create:named:" is nil
22 October 2012 3:17:25.784 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #create:named:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	create: #package named: 'Polymorphism-EmpiricalStudy'
		exception: 	MessageNotUnderstood: receiver of "create:named:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ CodeComponent create: #package named: 'Polymorphism-Empiric...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(296747008)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	#(nil)
		chunk: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalStudy'''
	Receiver's instance variables: 



BlockClosure>>on:do:
	Receiver: [| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: sel...etc...
	Arguments and temporary variables: 
		exception: 	InMidstOfFileinNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
		startpc: 	146
		numArgs: 	0


[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
		bar: 	#(nil)
	Receiver's instance variables: 



[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Loading vw.st'
		argPoint: 	(488@331)
		argMinVal: 	0
		argMaxVal: 	33591
		argWorkBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Loading vw.st'
		aPoint: 	(488@331)
		minVal: 	0
		maxVal: 	33591
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Loading vw.st'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	33591
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
'Loading vw.st'

MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		announcement: 	'Loading vw.st'
		val: 	#(nil)
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



FileStream class>>fileIn:
	Receiver: FileStream
	Arguments and temporary variables: 
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
		ff: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/f...etc...
		fn: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (FileStream --- fileIn:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	FileStream
		label: 	'FileIn entire file'
		selector: 	#fileIn:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'File in the entire contents of the file, which is expected to con...etc...
		argumentGetter: 	nil
		buttonLabel: 	'Filein'


[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		stream: 	SimpleServiceEntry: (FileStream --- fileIn:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		anArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphis...etc...
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
		thirdArg: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymo...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: [handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]]
	Arguments and temporary variables: 
		aBlock: 	[stream close]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	90
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [(204@340) dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	(204@340)
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[(204@340) dropFilesEvent nil]
		index: 	3
		child: 	an ImageMorph(589561856)
		morphs: 	an Array(a TaskbarMorph(984088576) an ImageMorph(589561856))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #create:named:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
MultiByteFileStream(FileStream)>>fileIn
MultiByteFileStream>>fileIn
FileStream class>>fileIn:
SimpleServiceEntry>>performServiceFor:
[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "create:named:" is nil
22 October 2012 3:18:19.205 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #create:named:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	create: #package named: 'Polymorphism-EmpiricalStudy'
		exception: 	MessageNotUnderstood: receiver of "create:named:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ CodeComponent create: #package named: 'Polymorphism-Empiric...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(245891072)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	#(nil)
		chunk: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalStudy'''
	Receiver's instance variables: 



BlockClosure>>on:do:
	Receiver: [| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: sel...etc...
	Arguments and temporary variables: 
		exception: 	InMidstOfFileinNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
		startpc: 	146
		numArgs: 	0


[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
		bar: 	#(nil)
	Receiver's instance variables: 



[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Loading vw.st'
		argPoint: 	(488@331)
		argMinVal: 	0
		argMaxVal: 	33626
		argWorkBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Loading vw.st'
		aPoint: 	(488@331)
		minVal: 	0
		maxVal: 	33626
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Loading vw.st'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	33626
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
'Loading vw.st'

MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		announcement: 	'Loading vw.st'
		val: 	#(nil)
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



FileStream class>>fileIn:
	Receiver: FileStream
	Arguments and temporary variables: 
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
		ff: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/f...etc...
		fn: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (FileStream --- fileIn:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	FileStream
		label: 	'FileIn entire file'
		selector: 	#fileIn:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'File in the entire contents of the file, which is expected to con...etc...
		argumentGetter: 	nil
		buttonLabel: 	'Filein'


[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		stream: 	SimpleServiceEntry: (FileStream --- fileIn:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		anArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphis...etc...
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
		thirdArg: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymo...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: [handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]]
	Arguments and temporary variables: 
		aBlock: 	[stream close]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	90
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [(205@292) dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	(205@292)
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[(205@292) dropFilesEvent nil]
		index: 	3
		child: 	an ImageMorph(589561856)
		morphs: 	an Array(a TaskbarMorph(984088576) an ImageMorph(589561856))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #create:named:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
MultiByteFileStream(FileStream)>>fileIn
MultiByteFileStream>>fileIn
FileStream class>>fileIn:
SimpleServiceEntry>>performServiceFor:
[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:30:30.875 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults hd_startSnautAndHighlightStuff hd...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults hd_startSnautAndHighlightStuff hd...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults hd_startSnautAndHighlightStuff hd...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBMethodNode>>testSuite
	Receiver: OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Method

		theClass: 	PolymorphismAnalyzerTest
		selector: 	#testAbstractPolymorphicMethods


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1880@811) mouseUp 265226 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(359399424)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	265226
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1880@811)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a ToggleMenuItemMorph(359399424)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a ToggleMenuItemMorph(359399424)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a MenuMorph(188743680)
		localEvt: 	[(1880@811) mouseUp 265226 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(359399424)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a MenuMorph(188743680)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(188743680)
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (192675840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(359399424)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(447479808)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(188743680)
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (192675840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(359399424)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(447479808)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(188743680)
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (192675840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(359399424)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(447479808)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		focusHolder: 	a MenuMorph(188743680)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1880@811) corner: (1896@827)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1880@811) corner: (1896@827)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1880@811) mouseOver nil nil]
		targetOffset: 	(79.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 265226 1880 811 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1880@811) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
OBMethodNode>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:10.185 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1377@407) mouseUp 544536 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	544536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1377@407)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a MenuMorph(485752832)
		localEvt: 	[(1377@407) mouseUp 544536 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(142082048)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(720371712)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:12.859 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1377@407) mouseUp 544536 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	544536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1377@407)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:13.747 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1377@407) mouseUp 544536 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	544536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1377@407)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:14.334 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:14.902 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:15.47 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:15.995 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:16.419 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:16.871 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:17.444 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn()


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:37:00.718 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1214@331) mouseUp 655069 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	655069
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1214@331)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a MenuMorph(584581120)
		localEvt: 	[(1214@331) mouseUp 655069 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(234356736)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(819200000)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:37:04.683 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1214@331) mouseUp 655069 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	655069
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1214@331)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:38:03.804 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>DoItIn:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		ThisContext: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	PolymorphismAnalyzer class>>forFile:
		receiver: 	PolymorphismAnalyzer
		aRequestor: 	a TextMorphForEditView(784072704)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ (ThisContext namedTempAt: 1) asFilename
		method: 	(PolymorphismAnalyzer class>>#DoItIn: "a CompiledMethod(1047789568)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(784072704)
		class: 	PolymorphismAnalyzer class
		category: 	nil
		context: 	PolymorphismAnalyzer class>>forFile:
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(784072704)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(784072704)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(230424576)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(230424576)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(230424576)
		secondArg: 	a PluggableTextMorph(230424576)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(230424576)
		secondArg: 	a PluggableTextMorph(230424576)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(230424576)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(230424576)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(230424576)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(230424576)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	11
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget nil ni...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(749207552)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(749207552)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(749207552)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	a PluggableTextMorph(230424576)
		submorphs: 	an Array(a TextMorphForEditView(784072704))
		fullBounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		color: 	Color transparent
		extension: 	a MorphExtension (751042560) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-427.0@ -513....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (1654@338)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(784072704)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(784072704)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(784072704)
	Receiver's instance variables: 
		timeStamp: 	718161
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(319.0@194.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	34


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:39:08.949 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1175@328) mouseUp 783297 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1175@328) mouseUp 783297 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1175@328) mouseUp 783297 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1175@328) mouseUp 783297 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(382730240)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	783297
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1175@328)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		aMorph: 	a ToggleMenuItemMorph(382730240)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		aMorph: 	a ToggleMenuItemMorph(382730240)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		aMorph: 	a MenuMorph(406323200)
		localEvt: 	[(1175@328) mouseUp 783297 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(382730240)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(587726848)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:46:21.41 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1236@331) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:46:29.399 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1199@335) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:46:37.9 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1139@324) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:47:14.496 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1177@329) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:47:49.598 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1193@372)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1193@372)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1193@372)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	5
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:48:22.478 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1277@374)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1277@374)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1277@374)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	6
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:49:46.344 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1250@330)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1250@330)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1250@330)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	7
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:52:42.75 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1163@320)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1163@320)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1163@320)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	8
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:52:57.861 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1208@323)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1208@323)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1208@323)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	9
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:54:20.646 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(Object)>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
		index: 	1
		repOff: 	-1
	Receiver's instance variables: 
' '

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		start: 	0
		stop: 	0
		newSize: 	1
	Receiver's instance variables: 
'model.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(217562)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@326) mouseUp 240848 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@326) mouseUp 240848 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@326) mouseUp 240848 nil]
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@326) mouseUp 240848 nil]
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteString(String)>>replaceFrom:to:with:startingAt:
ByteString>>replaceFrom:to:with:startingAt:
ByteString(SequenceableCollection)>>copyFrom:to:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:55:32.178 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(Object)>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
		index: 	1
		repOff: 	-1
	Receiver's instance variables: 
' '

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		start: 	0
		stop: 	0
		newSize: 	1
	Receiver's instance variables: 
'model.mse'

PolymorphismAnalyzer class>>DoItIn:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		ThisContext: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	PolymorphismAnalyzer class>>forFile:
		receiver: 	PolymorphismAnalyzer
		aRequestor: 	a TextMorphForEditView(510656512)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ (ThisContext namedTempAt: 1)
		copyFrom: ((...etc...
		method: 	(PolymorphismAnalyzer class>>#DoItIn: "a CompiledMethod(207093760)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(510656512)
		class: 	PolymorphismAnalyzer class
		category: 	nil
		context: 	PolymorphismAnalyzer class>>forFile:
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510656512)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510656512)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(510656512)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@546)
		owner: 	a TransformMorph(765460480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@546)
		color: 	Color black
		extension: 	a MorphExtension (531365888) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName stream|
	
m...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(246677504)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(246677504)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(246677504)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(246677504)
		secondArg: 	a PluggableTextMorph(246677504)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(246677504)
		secondArg: 	a PluggableTextMorph(246677504)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(246677504)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(246677504)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(246677504)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(246677504)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	10
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil nil a KMCategoryTarget nil nil a KMCategoryTarget a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(765460480)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(765460480)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(765460480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424@513) corner: (2084@1139)
		owner: 	a PluggableTextMorph(246677504)
		submorphs: 	an Array(a TextMorphForEditView(510656512))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color transparent
		extension: 	a MorphExtension (767295488) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-427@ -513))
		smoothing: 	1
		localBounds: 	(0@0) corner: (1654@546)



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteString(String)>>replaceFrom:to:with:startingAt:
ByteString>>replaceFrom:to:with:startingAt:
ByteString(SequenceableCollection)>>copyFrom:to:
PolymorphismAnalyzer class>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:57:49.951 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jfreechart-mod.mse'
		argPoint: 	(1149@327)
		argMinVal: 	1
		argMaxVal: 	13690500
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jfreechart-mod.mse'
		aPoint: 	(1149@327)
		minVal: 	1
		maxVal: 	13690500
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jfreechart-mod.mse'
		aPoint: 	(1149@327)
		minVal: 	1
		maxVal: 	13690500
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(2)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(2)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #'jfreechart-mod'(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	435233
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jfreechart-mod'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jfreechart-mod.mse'
		moosemodel: 	a MooseModel #'jfreechart-mod'(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
22 October 2012 4:02:22.802 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

Array(SequenceableCollection)>>at:ifAbsent:
	Receiver: {Unicode. JISX0208. GB2312. KSX1001. JISX0208. JapaneseEnvironment. SimplifiedChineseEnvir...etc...
	Arguments and temporary variables: 
		index: 	1
		exceptionBlock: 	[EncodedCharSets at: 1]
	Receiver's instance variables: 
{Unicode. JISX0208. GB2312. KSX1001. JISX0208. JapaneseEnvironment. SimplifiedChineseEnvir...etc...

EncodedCharSet class>>charsetAt:
	Receiver: EncodedCharSet
	Arguments and temporary variables: 
		encoding: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{GB2312. JISX0208. KSX1001. Latin1. Unicode}
		name: 	#EncodedCharSet
		classPool: 	a Dictionary(#EncodedCharSets->{Unicode. JISX0208. GB2312. KSX1001. ...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-Encodings'
		traitComposition: 	{}
		localSelectors: 	nil
		compoundTextSequence: 	nil


Character>>isLetter
	Receiver: $r
	Arguments and temporary variables: 

	Receiver's instance variables: 
		value: 	114


Character>>isAlphaNumeric
	Receiver: $r
	Arguments and temporary variables: 

	Receiver's instance variables: 
		value: 	114


FMMSEParser>>tNAME
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5155402
		n: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5155374
		n: 	'FAMIX.Access'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing model.mse'
		argPoint: 	(1135@324)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing model.mse'
		aPoint: 	(1135@324)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing model.mse'
		aPoint: 	(1135@324)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	65970
		reminderDict: 	an IdentityDictionary(size 32857)
		serialDict: 	an IdentityDictionary(size 31722)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(4)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(4)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #model(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	870456
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'model'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testHd_NOPMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testHd_NOPMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testHd_NOPMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	2
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...



--- The full stack ---
Array(SequenceableCollection)>>at:ifAbsent:
EncodedCharSet class>>charsetAt:
Character>>isLetter
Character>>isAlphaNumeric
FMMSEParser>>tNAME
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
22 October 2012 4:04:14.545 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMMSEParser>>Reference2
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	nil
		n: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Value
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5402431
		n: 	'signature'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5402319
		n: 	'FAMIX.Invocation'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	TestResult>>runCase:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase run...etc...


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing model.mse'
		argPoint: 	(1227@329)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing model.mse'
		aPoint: 	(1227@329)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing model.mse'
		aPoint: 	(1227@329)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	67992
		reminderDict: 	an IdentityDictionary(size 33752)
		serialDict: 	an IdentityDictionary(size 33269)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(5)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(5)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #model(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	1119790
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'model'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>setUp
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
	Receiver: 1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Receiver's instance variables: 
		timeStamp: 	2012-10-22T16:03:19.818+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphic...etc...
		passed: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:ex | ex sunitAnnounce: aTestCase toResult: self]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	66
		numArgs: 	0


TestResult>>runCase:
	Receiver: 1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Receiver's instance variables: 
		timeStamp: 	2012-10-22T16:03:19.818+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphic...etc...
		passed: 	an OrderedCollection()


PolymorphismAnalyzerTest(TestCase)>>run:
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 
		aResult: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[:each | 
self changed: each.
	each run: aResult] in TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	PolymorphismAnalyzerTest>>#testHd_NOPMethods
		each: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected ...etc...
	Receiver's instance variables: 
		tests: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicM...etc...
		resources: 	nil
		name: 	'PolymorphismAnalyzerTest'


OrderedCollection>>do:
	Receiver: an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods Polymorphis...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
self changed: each.
	each run: aResult]
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods Polym...etc...
		firstIndex: 	1
		lastIndex: 	24


TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		tests: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicM...etc...
		resources: 	nil
		name: 	'PolymorphismAnalyzerTest'


[self run: result] in TestSuite>>run
	Receiver: a TestSuite
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
	Receiver's instance variables: 
		tests: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicM...etc...
		resources: 	nil
		name: 	'PolymorphismAnalyzerTest'



--- The full stack ---
FMMSEParser>>Reference2
FMMSEParser>>Value
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>setUp
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
PolymorphismAnalyzerTest(TestCase)>>run:
[:each | 
self changed: each.
	each run: aResult] in TestSuite>>run:
OrderedCollection>>do:
TestSuite>>run:
[self run: result] in TestSuite>>run
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
TestSuite>>run
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unmatched string quote
22 October 2012 4:08:53.7 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

Scanner(Object)>>error:
	Receiver: a Scanner
	Arguments and temporary variables: 
		aString: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>notify:
	Receiver: a Scanner
	Arguments and temporary variables: 
		string: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>offEnd:
	Receiver: a Scanner
	Arguments and temporary variables: 
		aString: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>xSingleQuote
	Receiver: a Scanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanToken
	Receiver: a Scanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanLitVec
	Receiver: a Scanner
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanTokens:
	Receiver: a Scanner
	Arguments and temporary variables: 
		textOrString: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
...etc...
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


ORClassDefinition(OBClassDefinition)>>nameOfClassDefinedBy:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	i...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition(OBClassDefinition)>>isRedefinition:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aDefinition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition(OBClassDefinition)>>confirmDefinition:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	i...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition>>defineClass:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	i...etc...
		aController: 	an OBPluggableTextMorph(439877632)
		change: 	nil
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition(OBClassDefinition)>>accept:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instan...etc...
		aController: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	...etc...
		def: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: [def accept: aText notifying: aController]
	Arguments and temporary variables: 
		exception: 	OBAnnouncerRequest
		handlerAction: 	[:notification | notification resume: self announcer]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnoun...etc...
		startpc: 	51
		numArgs: 	0


[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	...etc...
		def: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		workBlock: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnouncer...etc...
		nilBlock: 	[true]
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instan...etc...
		aController: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		acceptedText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
...etc...
	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
		startpc: 	65
		numArgs: 	0


OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		acceptedText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
...etc...
	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(80 to: 79)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>accept
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorphSelection>>accept
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(80 to: 79)
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		morph: 	an OBPluggableTextMorph(439877632)


OBAcceptTextCommand>>execute
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		each: 	an OBAcceptTextCommand
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBAcceptTextCommand)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an OBAcceptTextCommand nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		aKeystroke: 	cmd+s
		aNode: 	an OBTextMorphSelection
		aRequestor: 	an OBDefinitionPanel
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aKeystroke: 	cmd+s
		aTextSelection: 	an OBTextMorphSelection
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBTextMorph>>keyStroke:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-s>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorph(985661440)
	Receiver's instance variables: 
		timeStamp: 	1152147
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(1057.0@475.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	115
		charCode: 	115
		scanCode: 	1


OBTextMorph(Morph)>>handleEvent:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		focusHolder: 	an OBTextMorph(985661440)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1586@1077) corner: (1602@1093)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1586@1077) corner: (1602@1093)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1586@1077) mouseOver CMD nil nil]
		targetOffset: 	(176.0@42.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1151982 1586 1077 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		focusHolder: 	an OBTextMorph(985661440)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1586@1077) corner: (1602@1093)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1586@1077) corner: (1602@1093)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1586@1077) mouseOver CMD nil nil]
		targetOffset: 	(176.0@42.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1151982 1586 1077 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		focusHolder: 	an OBTextMorph(985661440)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1586@1077) corner: (1602@1093)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1586@1077) corner: (1602@1093)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1586@1077) mouseOver CMD nil nil]
		targetOffset: 	(176.0@42.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1151982 1586 1077 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Scanner(Object)>>error:
Scanner>>notify:
Scanner>>offEnd:
Scanner>>xSingleQuote
Scanner>>scanToken
Scanner>>scanLitVec
Scanner>>scanTokens:
ORClassDefinition(OBClassDefinition)>>nameOfClassDefinedBy:
ORClassDefinition(OBClassDefinition)>>isRedefinition:
ORClassDefinition(OBClassDefinition)>>confirmDefinition:
ORClassDefinition>>defineClass:notifying:
ORClassDefinition(OBClassDefinition)>>accept:notifying:
[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
OBPluggableTextMorph(PluggableTextMorph)>>accept
OBTextMorphSelection>>accept
OBAcceptTextCommand>>execute
[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
OBTextMorph>>keyStroke:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
22 October 2012 4:17:12.599 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMMSEParser>>backtrack:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		integer: 	4842623
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Number
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4842623
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Primitive
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		p: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Value
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4842601
		n: 	'previous'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4842540
		n: 	'FAMIX.Invocation'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing model.mse'
		argPoint: 	(1211@456)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing model.mse'
		aPoint: 	(1211@456)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing model.mse'
		aPoint: 	(1211@456)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	63404
		reminderDict: 	an IdentityDictionary(size 31640)
		serialDict: 	an IdentityDictionary(size 29787)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(6)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(6)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #model(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	1383288
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'model'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTestJHD>>setUp
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	nil


[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


BlockClosure>>ensure:
	Receiver: [candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]]
	Arguments and temporary variables: 
		aBlock: 	[current == candidate
		ifFalse: [candidate tearDown]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvaila...etc...
		startpc: 	69
		numArgs: 	0


PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aTestAsserter: 	PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Arguments and temporary variables: 
		each: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeRootPolyMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {PolymorphismAnalyzerTestJHD}
	Arguments and temporary variables: 
		aBlock: 	[:each | each availableFor: self]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
{PolymorphismAnalyzerTestJHD}

PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeRootPolyMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeRootPolyMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0



--- The full stack ---
FMMSEParser>>backtrack:
FMMSEParser>>Number
FMMSEParser>>Primitive
FMMSEParser>>Value
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTestJHD>>setUp
[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
BlockClosure>>ensure:
PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
Array(SequenceableCollection)>>do:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:22:19.742 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	24 run, 3 passes, 0 expected failures, 0 failures, 21 errors, 0 unexpec...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1227@340) mouseUp 1804763 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	1804763
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1227@340)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a MenuMorph(187695104)
		localEvt: 	[(1227@340) mouseUp 1804763 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a MenuMorph(187695104)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(187695104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (191627264) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(422576128)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(187695104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (191627264) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(422576128)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(187695104)
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (191627264) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(422576128)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		focusHolder: 	a MenuMorph(187695104)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1227@340) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		focusHolder: 	a MenuMorph(187695104)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		focusHolder: 	a MenuMorph(187695104)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		evt: 	[(1227@340) mouseUp 1804763 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
		evtBuf: 	#(1 1804763 1227 340 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(591396864))(an OBSys...etc...
		lastStepTime: 	1958287
		lastStepMessage: 	nil
		lastCycleTime: 	1958287
		alarms: 	a Heap()
		lastAlarmTime: 	1958287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(591396864))(an OBSys...etc...
		lastStepTime: 	1958287
		lastStepMessage: 	nil
		lastCycleTime: 	1958287
		alarms: 	a Heap()
		lastAlarmTime: 	1958287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:23:48.321 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>DoItIn:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		ThisContext: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
		receiver: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
		aRequestor: 	a TextMorphForEditView(1008205824)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ hotDrawAnalyzer allHierarchies
		method: 	(PolymorphismAnalyzerTest>>#DoItIn: "a CompiledMethod(653000704)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(1008205824)
		class: 	PolymorphismAnalyzerTest
		category: 	nil
		context: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
		ctxt: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1008205824)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
		ctxt: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1008205824)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(456654848)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(456654848)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(456654848)
		secondArg: 	a PluggableTextMorph(456654848)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(456654848)
		secondArg: 	a PluggableTextMorph(456654848)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(456654848)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(456654848)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(456654848)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(456654848)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCa...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(975437824)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(975437824)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(975437824)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	a PluggableTextMorph(456654848)
		submorphs: 	an Array(a TextMorphForEditView(1008205824))
		fullBounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (977272832) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-559.0@ -570....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (1654@66)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(1008205824)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(1008205824)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1008205824)
	Receiver's instance variables: 
		timeStamp: 	2046752
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(290.0@61.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	34


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:26:51.876 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2044@445) mouseUp 30360 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(823656448)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	30360
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2044@445)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a ToggleMenuItemMorph(823656448)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a ToggleMenuItemMorph(823656448)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a MenuMorph(386924544)
		localEvt: 	[(2044@445) mouseUp 30360 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(823656448)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a MenuMorph(386924544)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(386924544)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (390594560) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(823656448)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(729808896)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(386924544)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (390594560) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(823656448)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(729808896)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(386924544)
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (390594560) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(823656448)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(729808896)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		focusHolder: 	a MenuMorph(386924544)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2044@445) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		focusHolder: 	a MenuMorph(386924544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		focusHolder: 	a MenuMorph(386924544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		evt: 	[(2044@445) mouseUp 30360 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
		evtBuf: 	#(1 30360 2044 445 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	97800
		lastStepMessage: 	nil
		lastCycleTime: 	97800
		alarms: 	a Heap()
		lastAlarmTime: 	97800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	97800
		lastStepMessage: 	nil
		lastCycleTime: 	97800
		alarms: 	a Heap()
		lastAlarmTime: 	97800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "create:named:" is nil
22 October 2012 4:48:05.739 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #create:named:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	create: #package named: 'HotDraw'
		exception: 	MessageNotUnderstood: receiver of "create:named:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'CodeComponent create: #package named: ''HotDraw'''
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ CodeComponent create: #package named: 'HotDraw'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(881852416)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''HotDraw'''
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''HotDraw'''
		anObject: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''HotDraw'''
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 
		val: 	#('From VisualWorks¬Æ NonCommercial, 7.7.1 of July 26, 2010 on October 22,...etc...
		chunk: 	'CodeComponent create: #package named: ''HotDraw'''
	Receiver's instance variables: 



BlockClosure>>on:do:
	Receiver: [| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: sel...etc...
	Arguments and temporary variables: 
		exception: 	InMidstOfFileinNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
		startpc: 	146
		numArgs: 	0


[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 
		val: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
		bar: 	#('From VisualWorks¬Æ NonCommercial, 7.7.1 of July 26, 2010 on October 22,...etc...
	Receiver's instance variables: 



[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Loading HotDraw.st'
		argPoint: 	(1254@767)
		argMinVal: 	0
		argMaxVal: 	165
		argWorkBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Loading HotDraw.st'
		aPoint: 	(1254@767)
		minVal: 	0
		maxVal: 	165
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Loading HotDraw.st'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	165
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
'Loading HotDraw.st'

MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 
		announcement: 	'Loading HotDraw.st'
		val: 	#('From VisualWorks¬Æ NonCommercial, 7.7.1 of July 26, 2010 on October 22,...etc...
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



FileStream class>>fileIn:
	Receiver: FileStream
	Arguments and temporary variables: 
		fullName: 	'/Users/caracciolo/Desktop/HotDraw.st'
		ff: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		fn: 	'/Users/caracciolo/Desktop/HotDraw.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (FileStream --- fileIn:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	FileStream
		label: 	'FileIn entire file'
		selector: 	#fileIn:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'File in the entire contents of the file, which is expected to con...etc...
		argumentGetter: 	nil
		buttonLabel: 	'Filein'


[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		stream: 	SimpleServiceEntry: (FileStream --- fileIn:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		anArg: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		secondArg: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		secondArg: 	a PasteUpMorph(425197568) [world]
		thirdArg: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: [handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]]
	Arguments and temporary variables: 
		aBlock: 	[stream close]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	90
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [(265@913) dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	(265@913)
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[(265@913) dropFilesEvent nil]
		index: 	4
		child: 	an ImageMorph(589561856)
		morphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an Imag...etc...
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #create:named:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
MultiByteFileStream(FileStream)>>fileIn
MultiByteFileStream>>fileIn
FileStream class>>fileIn:
SimpleServiceEntry>>performServiceFor:
[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:58:51.742 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2115@441) mouseUp 1972546 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(593231872)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1972546
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2115@441)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a ToggleMenuItemMorph(593231872)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a ToggleMenuItemMorph(593231872)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a MenuMorph(159645696)
		localEvt: 	[(2115@441) mouseUp 1972546 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(593231872)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a MenuMorph(159645696)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(159645696)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (163315712) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(593231872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(502530048)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(159645696)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (163315712) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(593231872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(502530048)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(159645696)
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (163315712) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(593231872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(502530048)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		focusHolder: 	a MenuMorph(159645696)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	an OBPluggableTextMorph(439877632)
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver red nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1996827 2209 822 4 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2115@441) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		focusHolder: 	a MenuMorph(159645696)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		focusHolder: 	a MenuMorph(159645696)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		evt: 	[(2115@441) mouseUp 1972546 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
		evtBuf: 	#(1 1972546 2115 441 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(234@907) corner: (250@923)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(234@907) corner: (250@923)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(234@907) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1998688 2206 824 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2017700
		lastStepMessage: 	nil
		lastCycleTime: 	2017700
		alarms: 	a Heap()
		lastAlarmTime: 	2017700
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2017700
		lastStepMessage: 	nil
		lastCycleTime: 	2017700
		alarms: 	a Heap()
		lastAlarmTime: 	2017700
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
22 October 2012 5:02:32.026 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aMessage: 	, PolymorphismAnalyzerTestJFC
		exception: 	MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTest>>resources
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self run: result]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	true
		returnValue: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>run
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2076@448) mouseUp 2237841 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(816054272)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2237841
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2076@448)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a ToggleMenuItemMorph(816054272)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a ToggleMenuItemMorph(816054272)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a MenuMorph(36962304)
		localEvt: 	[(2076@448) mouseUp 2237841 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(816054272)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a MenuMorph(36962304)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(36962304)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (40894464) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(816054272)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(380108800)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(36962304)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (40894464) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(816054272)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(380108800)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(36962304)
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (40894464) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(816054272)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(380108800)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		focusHolder: 	a MenuMorph(36962304)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2076@448) corner: (2092@464)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2076@448) corner: (2092@464)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2076@448) mouseOver nil nil]
		targetOffset: 	(42.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2237841 2076 448 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2076@448) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		focusHolder: 	a MenuMorph(36962304)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2076@448) corner: (2092@464)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2076@448) corner: (2092@464)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2076@448) mouseOver nil nil]
		targetOffset: 	(42.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2237841 2076 448 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		focusHolder: 	a MenuMorph(36962304)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2076@448) corner: (2092@464)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2076@448) corner: (2092@464)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2076@448) mouseOver nil nil]
		targetOffset: 	(42.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2237841 2076 448 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
PolymorphismAnalyzerTest>>resources
[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>run
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
22 October 2012 5:02:43.206 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aMessage: 	, PolymorphismAnalyzerTestJFC
		exception: 	MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTest>>resources
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self run: result]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	true
		returnValue: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>run
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2081@436) mouseUp 2249035 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(271581184)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2249035
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2081@436)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a ToggleMenuItemMorph(271581184)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a ToggleMenuItemMorph(271581184)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a MenuMorph(911736832)
		localEvt: 	[(2081@436) mouseUp 2249035 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(271581184)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a MenuMorph(911736832)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(911736832)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (915406848) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(271581184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(180879360)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(911736832)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (915406848) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(271581184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(180879360)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(911736832)
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (915406848) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(271581184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(180879360)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		focusHolder: 	a MenuMorph(911736832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2081@436) corner: (2097@452)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2081@436) corner: (2097@452)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2081@436) mouseOver nil nil]
		targetOffset: 	(37.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2249035 2081 436 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2081@436) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		focusHolder: 	a MenuMorph(911736832)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2081@436) corner: (2097@452)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2081@436) corner: (2097@452)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2081@436) mouseOver nil nil]
		targetOffset: 	(37.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2249035 2081 436 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		focusHolder: 	a MenuMorph(911736832)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2081@436) corner: (2097@452)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2081@436) corner: (2097@452)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2081@436) mouseOver nil nil]
		targetOffset: 	(37.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2249035 2081 436 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
PolymorphismAnalyzerTest>>resources
[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>run
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 5:04:25.017 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2085@439) mouseUp 2264950 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(371720192)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2264950
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2085@439)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a ToggleMenuItemMorph(371720192)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a ToggleMenuItemMorph(371720192)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a MenuMorph(600047616)
		localEvt: 	[(2085@439) mouseUp 2264950 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(371720192)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a MenuMorph(600047616)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(600047616)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (603979776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(371720192)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(943194112)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(600047616)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (603979776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(371720192)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(943194112)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(600047616)
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (603979776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(371720192)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(943194112)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		focusHolder: 	a MenuMorph(600047616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2085@439) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		focusHolder: 	a MenuMorph(600047616)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		focusHolder: 	a MenuMorph(600047616)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		evt: 	[(2085@439) mouseUp 2264950 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
		evtBuf: 	#(1 2264950 2085 439 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2351049
		lastStepMessage: 	nil
		lastCycleTime: 	2351049
		alarms: 	a Heap()
		lastAlarmTime: 	2351049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2351049
		lastStepMessage: 	nil
		lastCycleTime: 	2351049
		alarms: 	a Heap()
		lastAlarmTime: 	2351049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 5:09:42.998 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2151@439) mouseUp 2537529 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(980156416)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2537529
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2151@439)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a ToggleMenuItemMorph(980156416)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a ToggleMenuItemMorph(980156416)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a MenuMorph(543424512)
		localEvt: 	[(2151@439) mouseUp 2537529 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(980156416)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a MenuMorph(543424512)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(543424512)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (547094528) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(980156416)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(886308864)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(543424512)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (547094528) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(980156416)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(886308864)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(543424512)
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (547094528) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(980156416)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(886308864)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		focusHolder: 	a MenuMorph(543424512)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2151@439) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		focusHolder: 	a MenuMorph(543424512)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		focusHolder: 	a MenuMorph(543424512)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		evt: 	[(2151@439) mouseUp 2537529 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
		evtBuf: 	#(1 2537529 2151 439 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2669012
		lastStepMessage: 	nil
		lastCycleTime: 	2669033
		alarms: 	a Heap()
		lastAlarmTime: 	2669033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2669033
		lastStepMessage: 	nil
		lastCycleTime: 	2669033
		alarms: 	a Heap()
		lastAlarmTime: 	2669033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
23 October 2012 9:38:16.36 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

WriteStream>>nextPut:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		anObject: 	$L
	Receiver's instance variables: 
		collection: 	'end07ntileAnchorlEntityests/org/jfree/data/time/junit/MillisecondT...etc...
		position: 	3
		readLimit: 	1871
		writeLimit: 	2560


FMMSEParser>>tNAME
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	6337063
		n: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	6337006
		n: 	'FAMIX.FileAnchor'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1274@469)
		progressTitle: 	'Parsing jfreechart.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1274@469)
		progressTitle: 	'Parsing jfreechart.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1274@469)
		progressTitle: 	'Parsing jfreechart.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1274@469)
		progressTitle: 	'Parsing jfreechart.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1274@469)
		progressTitle: 	'Parsing jfreechart.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jfreechart.mse'
		argPoint: 	(1274@469)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1274@469)
		progressTitle: 	'Parsing jfreechart.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jfreechart.mse'
		aPoint: 	(1274@469)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jfreechart.mse'
		aPoint: 	(1274@469)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$L
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	77458
		reminderDict: 	an IdentityDictionary(size 36966)
		serialDict: 	an IdentityDictionary(size 39041)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(1)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(1)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jfreechart(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	4644621
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jfreechart'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jfreechart.mse'
		moosemodel: 	a MooseModel #jfreechart(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTestJFC>>setUp
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	nil


[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJFC class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJFC
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJFC>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp tearDown)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJFC
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


BlockClosure>>ensure:
	Receiver: [candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]]
	Arguments and temporary variables: 
		aBlock: 	[current == candidate
		ifFalse: [candidate tearDown]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTestJFC class(TestResource class)>>makeAvaila...etc...
		startpc: 	69
		numArgs: 	0


PolymorphismAnalyzerTestJFC class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJFC
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJFC>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp tearDown)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJFC
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJFC class(TestResource class)>>isAvailable
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJFC>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp tearDown)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJFC
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJFC class(TestResource class)>>availableFor:
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 
		aTestAsserter: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJFC>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp tearDown)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJFC
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		each: 	PolymorphismAnalyzerTestJFC
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {PolymorphismAnalyzerTestJHD. PolymorphismAnalyzerTestJFC}
	Arguments and temporary variables: 
		aBlock: 	[:each | each availableFor: self]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
{PolymorphismAnalyzerTestJHD. PolymorphismAnalyzerTestJFC}

PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)



--- The full stack ---
WriteStream>>nextPut:
FMMSEParser>>tNAME
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTestJFC>>setUp
[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJFC class(TestResource class)>>makeAvailable
BlockClosure>>ensure:
PolymorphismAnalyzerTestJFC class(TestResource class)>>makeAvailable
PolymorphismAnalyzerTestJFC class(TestResource class)>>isAvailable
PolymorphismAnalyzerTestJFC class(TestResource class)>>availableFor:
[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
Array(SequenceableCollection)>>do:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXMethod>>withOverriderMethods
23 October 2012 9:42:56.56 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXMethod(Object)>>doesNotUnderstand: #withOverriderMethods
	Receiver: ComparableObjectSeries>>remove(Comparable) (Method)
	Arguments and temporary variables: 
		aMessage: 	withOverriderMethods
		exception: 	MessageNotUnderstood: FAMIXMethod>>withOverriderMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5173933
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/C...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * Removes the item... The item removed.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'remove'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	an Array(remove -> self#indexOf(Comparable) (Invocation) r...etc...
		incomingInvocations: 	an Array(testEquals -> s1#remove(Comparable) (Invocation) ...etc...
		localVariables: 	#()
		parameters: 	an Array(x (parameter in ComparableObjectSeries>>remove(Comparable)...etc...
		signature: 	'remove(Comparable)'
		accesses: 	#()
		declaredType: 	ComparableObjectItem in org::jfree::data (Class)
		kind: 	nil
		parentType: 	ComparableObjectSeries in org::jfree::data (Class)


[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		met: 	ComparableObjectSeries>>remove(Comparable) (Method)
	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(ComparableObjectSeries>>remove(Com...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(ComparableObjectSeries>>remove(Comparable) (Method) ChartEntity>>read...etc...
	Arguments and temporary variables: 
		aBlock: 	ComparableObjectSeries>>remove(Comparable) (Method)
		stream: 	[:met | met withOverriderMethods]
		each: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(ComparableObjectSeries>>remove(Comparable) (Method) ChartEntity...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection>>do:
	Receiver: an OrderedCollection(ComparableObjectSeries>>remove(Comparable) (Method) ChartEntity>>read...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | stream
		nextPutAll: (aBlock value: each)]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(ComparableObjectSeries>>remove(Comparable) (Method) ChartEntity...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(ComparableObjectSeries>>remove(Comparable) (Method) ChartEntity>>read...etc...
	Arguments and temporary variables: 
		aBlock: 	[:met | met withOverriderMethods]
		stream: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(ComparableObjectSeries>>remove(Comparable) (Method) ChartEntity...etc...
		firstIndex: 	1
		lastIndex: 	502


PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(ComparableObjectSeries>>remove(Com...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolyMethods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(ComparableObjectSeries>>remove(Com...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	an OrderedCollection(Pannable>>panDomainAxes(double,PlotRendering...etc...
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(40632320)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1273@467) mouseUp 268409 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		owner: 	a MenuMorph(677642240)
		submorphs: 	#()
		fullBounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(40632320)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1273@467) mouseUp 268409 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		owner: 	a MenuMorph(677642240)
		submorphs: 	#()
		fullBounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(40632320)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1273@467) mouseUp 268409 nil]
	Receiver's instance variables: 
		bounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		owner: 	a MenuMorph(677642240)
		submorphs: 	#()
		fullBounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(40632320)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
	Receiver's instance variables: 
		bounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		owner: 	a MenuMorph(677642240)
		submorphs: 	#()
		fullBounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1273@467) mouseUp 268409 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(40632320)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	268409
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1273@467)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(40632320)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
	Receiver's instance variables: 
		bounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		owner: 	a MenuMorph(677642240)
		submorphs: 	#()
		fullBounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		aMorph: 	a ToggleMenuItemMorph(40632320)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		aMorph: 	a ToggleMenuItemMorph(40632320)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(40632320)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		owner: 	a MenuMorph(677642240)
		submorphs: 	#()
		fullBounds: 	(1195.0@461.0) corner: (1432.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		aMorph: 	a MenuMorph(677642240)
		localEvt: 	[(1273@467) mouseUp 268409 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(40632320)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(1020788736)'File out' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		aMorph: 	a MenuMorph(677642240)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(677642240)
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1190.0@221.0) corner: (1437.0@618.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1020788736)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1190.0@221.0) corner: (1437.0@618.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (681574400) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(40632320)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1020788736)'File out' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(677642240)
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
	Receiver's instance variables: 
		bounds: 	(1190.0@221.0) corner: (1437.0@618.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1020788736)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1190.0@221.0) corner: (1437.0@618.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (681574400) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(40632320)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1020788736)'File out' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(677642240)
	Arguments and temporary variables: 
		evt: 	[(1273@467) mouseUp 268409 nil]
	Receiver's instance variables: 
		bounds: 	(1190.0@221.0) corner: (1437.0@618.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1020788736)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1190.0@221.0) corner: (1437.0@618.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (681574400) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(40632320)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1020788736)'File out' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		focusHolder: 	a MenuMorph(677642240)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2412@714) corner: (2428@730)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2412@714) mouseOver nil nil]
		targetOffset: 	(78.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 326504 1291 472 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) an ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1273@467) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) an ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		focusHolder: 	a MenuMorph(677642240)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2412@714) corner: (2428@730)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2412@714) mouseOver nil nil]
		targetOffset: 	(78.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 326504 1291 472 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1273@467) mouseUp 268409 nil]
		focusHolder: 	a MenuMorph(677642240)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2412@714) corner: (2428@730)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2412@714) mouseOver nil nil]
		targetOffset: 	(78.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 326504 1291 472 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
FAMIXMethod(Object)>>doesNotUnderstand: #withOverriderMethods
[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
OrderedCollection>>do:
OrderedCollection(Collection)>>flatCollect:
PolymorphismAnalyzer>>polymorphicMethods_computer
PolymorphismAnalyzer>>allPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MooseModel>>rootPolyMethods
23 October 2012 9:45:09.726 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

MooseModel(Object)>>doesNotUnderstand: #rootPolyMethods
	Receiver: a MooseModel #jfreechart(217562)
	Arguments and temporary variables: 
		aMessage: 	rootPolyMethods
		exception: 	MessageNotUnderstood: MooseModel>>rootPolyMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5167175
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(/** 
 * Two objects that...the same hashCod...etc...
		sourceLanguage: 	nil
		name: 	'jfreechart'


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(989331456)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1285@467) mouseUp 528395 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		owner: 	a MenuMorph(557318144)
		submorphs: 	#()
		fullBounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (991952896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(989331456)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1285@467) mouseUp 528395 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		owner: 	a MenuMorph(557318144)
		submorphs: 	#()
		fullBounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (991952896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(989331456)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1285@467) mouseUp 528395 nil]
	Receiver's instance variables: 
		bounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		owner: 	a MenuMorph(557318144)
		submorphs: 	#()
		fullBounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (991952896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(989331456)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
	Receiver's instance variables: 
		bounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		owner: 	a MenuMorph(557318144)
		submorphs: 	#()
		fullBounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (991952896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1285@467) mouseUp 528395 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(989331456)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	528395
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1285@467)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(989331456)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
	Receiver's instance variables: 
		bounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		owner: 	a MenuMorph(557318144)
		submorphs: 	#()
		fullBounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (991952896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		aMorph: 	a ToggleMenuItemMorph(989331456)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		aMorph: 	a ToggleMenuItemMorph(989331456)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(989331456)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		owner: 	a MenuMorph(557318144)
		submorphs: 	#()
		fullBounds: 	(1234.0@458.0) corner: (1471.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (991952896)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		aMorph: 	a MenuMorph(557318144)
		localEvt: 	[(1285@467) mouseUp 528395 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(989331456)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(900202496)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		aMorph: 	a MenuMorph(557318144)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(557318144)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1229.0@218.0) corner: (1476.0@615.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(900202496)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1229.0@218.0) corner: (1476.0@615.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (560988160) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(989331456)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(900202496)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(557318144)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
	Receiver's instance variables: 
		bounds: 	(1229.0@218.0) corner: (1476.0@615.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(900202496)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1229.0@218.0) corner: (1476.0@615.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (560988160) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(989331456)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(900202496)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(557318144)
	Arguments and temporary variables: 
		evt: 	[(1285@467) mouseUp 528395 nil]
	Receiver's instance variables: 
		bounds: 	(1229.0@218.0) corner: (1476.0@615.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(900202496)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1229.0@218.0) corner: (1476.0@615.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (560988160) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(989331456)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(900202496)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		focusHolder: 	a MenuMorph(557318144)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1285@467) corner: (1301@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1285@467) mouseOver nil nil]
		targetOffset: 	(51.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 528395 1285 467 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1285@467) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		focusHolder: 	a MenuMorph(557318144)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1285@467) corner: (1301@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1285@467) mouseOver nil nil]
		targetOffset: 	(51.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 528395 1285 467 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		focusHolder: 	a MenuMorph(557318144)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1285@467) corner: (1301@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1285@467) mouseOver nil nil]
		targetOffset: 	(51.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 528395 1285 467 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
	Receiver's instance variables: 
		bounds: 	(1285@467) corner: (1301@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1285@467) mouseOver nil nil]
		targetOffset: 	(51.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 528395 1285 467 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1285@467) mouseUp 528395 nil]
		evt: 	[(1285@467) mouseUp 528395 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1285@467) corner: (1301@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1285@467) mouseOver nil nil]
		targetOffset: 	(51.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 528395 1285 467 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1285@467) mouseUp 528395 nil]
		evtBuf: 	#(1 528395 1285 467 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1285@467) corner: (1301@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1285@467) mouseOver nil nil]
		targetOffset: 	(51.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 528395 1285 467 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	528502
		lastStepMessage: 	nil
		lastCycleTime: 	528502
		alarms: 	a Heap()
		lastAlarmTime: 	528502
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	528502
		lastStepMessage: 	nil
		lastCycleTime: 	528502
		alarms: 	a Heap()
		lastAlarmTime: 	528502
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
MooseModel(Object)>>doesNotUnderstand: #rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MooseModel>>rootPolyMethods
23 October 2012 9:45:22.94 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

MooseModel(Object)>>doesNotUnderstand: #rootPolyMethods
	Receiver: a MooseModel #jfreechart(217562)
	Arguments and temporary variables: 
		aMessage: 	rootPolyMethods
		exception: 	MessageNotUnderstood: MooseModel>>rootPolyMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5167175
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(/** 
 * Two objects that...the same hashCod...etc...
		sourceLanguage: 	nil
		name: 	'jfreechart'


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(280756224)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1286@463) mouseUp 541602 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		owner: 	a MenuMorph(924057600)
		submorphs: 	#()
		fullBounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (283377664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(280756224)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1286@463) mouseUp 541602 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		owner: 	a MenuMorph(924057600)
		submorphs: 	#()
		fullBounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (283377664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(280756224)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1286@463) mouseUp 541602 nil]
	Receiver's instance variables: 
		bounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		owner: 	a MenuMorph(924057600)
		submorphs: 	#()
		fullBounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (283377664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(280756224)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
	Receiver's instance variables: 
		bounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		owner: 	a MenuMorph(924057600)
		submorphs: 	#()
		fullBounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (283377664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1286@463) mouseUp 541602 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(280756224)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	541602
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1286@463)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(280756224)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
	Receiver's instance variables: 
		bounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		owner: 	a MenuMorph(924057600)
		submorphs: 	#()
		fullBounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (283377664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		aMorph: 	a ToggleMenuItemMorph(280756224)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		aMorph: 	a ToggleMenuItemMorph(280756224)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(280756224)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		owner: 	a MenuMorph(924057600)
		submorphs: 	#()
		fullBounds: 	(1234.0@462.0) corner: (1471.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (283377664)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		aMorph: 	a MenuMorph(924057600)
		localEvt: 	[(1286@463) mouseUp 541602 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(280756224)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(193200128)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		aMorph: 	a MenuMorph(924057600)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(924057600)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1229.0@222.0) corner: (1476.0@619.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(193200128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1229.0@222.0) corner: (1476.0@619.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (927727616) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(280756224)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(193200128)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(924057600)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
	Receiver's instance variables: 
		bounds: 	(1229.0@222.0) corner: (1476.0@619.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(193200128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1229.0@222.0) corner: (1476.0@619.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (927727616) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(280756224)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(193200128)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(924057600)
	Arguments and temporary variables: 
		evt: 	[(1286@463) mouseUp 541602 nil]
	Receiver's instance variables: 
		bounds: 	(1229.0@222.0) corner: (1476.0@619.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(193200128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1229.0@222.0) corner: (1476.0@619.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (927727616) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(280756224)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(193200128)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		focusHolder: 	a MenuMorph(924057600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1286@463) corner: (1302@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1286@463) mouseOver nil nil]
		targetOffset: 	(52.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 541602 1286 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1286@463) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		focusHolder: 	a MenuMorph(924057600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1286@463) corner: (1302@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1286@463) mouseOver nil nil]
		targetOffset: 	(52.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 541602 1286 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		focusHolder: 	a MenuMorph(924057600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1286@463) corner: (1302@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1286@463) mouseOver nil nil]
		targetOffset: 	(52.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 541602 1286 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
	Receiver's instance variables: 
		bounds: 	(1286@463) corner: (1302@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1286@463) mouseOver nil nil]
		targetOffset: 	(52.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 541602 1286 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1286@463) mouseUp 541602 nil]
		evt: 	[(1286@463) mouseUp 541602 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1286@463) corner: (1302@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1286@463) mouseOver nil nil]
		targetOffset: 	(52.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 541602 1286 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1286@463) mouseUp 541602 nil]
		evtBuf: 	#(1 541602 1286 463 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1286@463) corner: (1302@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1286@463) mouseOver nil nil]
		targetOffset: 	(52.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 541602 1286 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...
		lastStepTime: 	541723
		lastStepMessage: 	nil
		lastCycleTime: 	541723
		alarms: 	a Heap()
		lastAlarmTime: 	541723
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...
		lastStepTime: 	541723
		lastStepMessage: 	nil
		lastCycleTime: 	541723
		alarms: 	a Heap()
		lastAlarmTime: 	541723
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
MooseModel(Object)>>doesNotUnderstand: #rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MooseModel>>rootPolyMethods
23 October 2012 9:46:07.216 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

MooseModel(Object)>>doesNotUnderstand: #rootPolyMethods
	Receiver: a MooseModel #jfreechart(217562)
	Arguments and temporary variables: 
		aMessage: 	rootPolyMethods
		exception: 	MessageNotUnderstood: MooseModel>>rootPolyMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5167175
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(/** 
 * Two objects that...the same hashCod...etc...
		sourceLanguage: 	nil
		name: 	'jfreechart'


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jHotDrawAnalyzer: 	a MooseModel #jhotdraw(126994)
		jFreeChart: 	a MooseModel #jfreechart(217562)


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(668729344)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1229@466) mouseUp 585886 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		owner: 	a MenuMorph(233570304)
		submorphs: 	#()
		fullBounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		color: 	Color black
		extension: 	a MorphExtension (671350784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(668729344)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1229@466) mouseUp 585886 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		owner: 	a MenuMorph(233570304)
		submorphs: 	#()
		fullBounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		color: 	Color black
		extension: 	a MorphExtension (671350784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(668729344)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1229@466) mouseUp 585886 nil]
	Receiver's instance variables: 
		bounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		owner: 	a MenuMorph(233570304)
		submorphs: 	#()
		fullBounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		color: 	Color black
		extension: 	a MorphExtension (671350784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(668729344)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
	Receiver's instance variables: 
		bounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		owner: 	a MenuMorph(233570304)
		submorphs: 	#()
		fullBounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		color: 	Color black
		extension: 	a MorphExtension (671350784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1229@466) mouseUp 585886 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(668729344)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	585886
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1229@466)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(668729344)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
	Receiver's instance variables: 
		bounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		owner: 	a MenuMorph(233570304)
		submorphs: 	#()
		fullBounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		color: 	Color black
		extension: 	a MorphExtension (671350784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		aMorph: 	a ToggleMenuItemMorph(668729344)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		aMorph: 	a ToggleMenuItemMorph(668729344)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(668729344)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		owner: 	a MenuMorph(233570304)
		submorphs: 	#()
		fullBounds: 	(1183.0@460.0) corner: (1420.0@474.0)
		color: 	Color black
		extension: 	a MorphExtension (671350784)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		aMorph: 	a MenuMorph(233570304)
		localEvt: 	[(1229@466) mouseUp 585886 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(668729344)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(576454656)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		aMorph: 	a MenuMorph(233570304)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(233570304)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1178.0@220.0) corner: (1425.0@617.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(576454656)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1178.0@220.0) corner: (1425.0@617.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (237240320) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(668729344)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(576454656)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(233570304)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
	Receiver's instance variables: 
		bounds: 	(1178.0@220.0) corner: (1425.0@617.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(576454656)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1178.0@220.0) corner: (1425.0@617.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (237240320) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(668729344)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(576454656)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(233570304)
	Arguments and temporary variables: 
		evt: 	[(1229@466) mouseUp 585886 nil]
	Receiver's instance variables: 
		bounds: 	(1178.0@220.0) corner: (1425.0@617.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(576454656)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1178.0@220.0) corner: (1425.0@617.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (237240320) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(668729344)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(576454656)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		focusHolder: 	a MenuMorph(233570304)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1229@466) corner: (1245@482)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1229@466) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 585886 1229 466 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1229@466) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		focusHolder: 	a MenuMorph(233570304)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1229@466) corner: (1245@482)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1229@466) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 585886 1229 466 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		focusHolder: 	a MenuMorph(233570304)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1229@466) corner: (1245@482)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1229@466) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 585886 1229 466 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
	Receiver's instance variables: 
		bounds: 	(1229@466) corner: (1245@482)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1229@466) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 585886 1229 466 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1229@466) mouseUp 585886 nil]
		evt: 	[(1229@466) mouseUp 585886 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1229@466) corner: (1245@482)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1229@466) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 585886 1229 466 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1229@466) mouseUp 585886 nil]
		evtBuf: 	#(1 585886 1229 466 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1229@466) corner: (1245@482)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1229@466) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 585886 1229 466 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	585970
		lastStepMessage: 	nil
		lastCycleTime: 	585970
		alarms: 	a Heap()
		lastAlarmTime: 	585970
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	585970
		lastStepMessage: 	nil
		lastCycleTime: 	585970
		alarms: 	a Heap()
		lastAlarmTime: 	585970
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
MooseModel(Object)>>doesNotUnderstand: #rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzerTestJFC>>rootPolyMethods
23 October 2012 9:50:03.506 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTestJFC(Object)>>doesNotUnderstand: #rootPolyMethods
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 
		aMessage: 	rootPolyMethods
		exception: 	MessageNotUnderstood: PolymorphismAnalyzerTestJFC>>rootPolyMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	a MooseModel #jfreechart(217562)


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(5767168)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1310@473) mouseUp 822165 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		owner: 	a MenuMorph(642777088)
		submorphs: 	#()
		fullBounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (8388608)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(5767168)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1310@473) mouseUp 822165 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		owner: 	a MenuMorph(642777088)
		submorphs: 	#()
		fullBounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (8388608)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(5767168)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1310@473) mouseUp 822165 nil]
	Receiver's instance variables: 
		bounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		owner: 	a MenuMorph(642777088)
		submorphs: 	#()
		fullBounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (8388608)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(5767168)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
	Receiver's instance variables: 
		bounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		owner: 	a MenuMorph(642777088)
		submorphs: 	#()
		fullBounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (8388608)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1310@473) mouseUp 822165 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(5767168)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	822165
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1310@473)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(5767168)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
	Receiver's instance variables: 
		bounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		owner: 	a MenuMorph(642777088)
		submorphs: 	#()
		fullBounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (8388608)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		aMorph: 	a ToggleMenuItemMorph(5767168)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		aMorph: 	a ToggleMenuItemMorph(5767168)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(5767168)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		owner: 	a MenuMorph(642777088)
		submorphs: 	#()
		fullBounds: 	(1252.0@462.0) corner: (1489.0@476.0)
		color: 	Color black
		extension: 	a MorphExtension (8388608)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		aMorph: 	a MenuMorph(642777088)
		localEvt: 	[(1310@473) mouseUp 822165 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(5767168)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(985923584)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		aMorph: 	a MenuMorph(642777088)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(642777088)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1247.0@222.0) corner: (1494.0@619.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(985923584)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1247.0@222.0) corner: (1494.0@619.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (646709248) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(5767168)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(985923584)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(642777088)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
	Receiver's instance variables: 
		bounds: 	(1247.0@222.0) corner: (1494.0@619.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(985923584)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1247.0@222.0) corner: (1494.0@619.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (646709248) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(5767168)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(985923584)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(642777088)
	Arguments and temporary variables: 
		evt: 	[(1310@473) mouseUp 822165 nil]
	Receiver's instance variables: 
		bounds: 	(1247.0@222.0) corner: (1494.0@619.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(985923584)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1247.0@222.0) corner: (1494.0@619.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (646709248) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(5767168)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(985923584)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		focusHolder: 	a MenuMorph(642777088)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1310@473) corner: (1326@489)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1310@473) mouseOver nil nil]
		targetOffset: 	(58.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 822165 1310 473 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) an ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1310@473) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) an ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		focusHolder: 	a MenuMorph(642777088)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1310@473) corner: (1326@489)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1310@473) mouseOver nil nil]
		targetOffset: 	(58.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 822165 1310 473 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		focusHolder: 	a MenuMorph(642777088)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1310@473) corner: (1326@489)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1310@473) mouseOver nil nil]
		targetOffset: 	(58.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 822165 1310 473 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
	Receiver's instance variables: 
		bounds: 	(1310@473) corner: (1326@489)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1310@473) mouseOver nil nil]
		targetOffset: 	(58.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 822165 1310 473 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1310@473) mouseUp 822165 nil]
		evt: 	[(1310@473) mouseUp 822165 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1310@473) corner: (1326@489)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1310@473) mouseOver nil nil]
		targetOffset: 	(58.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 822165 1310 473 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1310@473) mouseUp 822165 nil]
		evtBuf: 	#(1 822165 1310 473 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1310@473) corner: (1326@489)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1310@473) mouseOver nil nil]
		targetOffset: 	(58.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 822165 1310 473 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	822283
		lastStepMessage: 	nil
		lastCycleTime: 	822283
		alarms: 	a Heap()
		lastAlarmTime: 	822283
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	822283
		lastStepMessage: 	nil
		lastCycleTime: 	822283
		alarms: 	a Heap()
		lastAlarmTime: 	822283
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzerTestJFC(Object)>>doesNotUnderstand: #rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzerTestJFC>>rootPolyMethods
23 October 2012 9:51:20.98 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTestJFC(Object)>>doesNotUnderstand: #rootPolyMethods
	Receiver: PolymorphismAnalyzerTestJFC
	Arguments and temporary variables: 
		aMessage: 	rootPolyMethods
		exception: 	MessageNotUnderstood: PolymorphismAnalyzerTestJFC>>rootPolyMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	nil


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jHotDrawAnalyzer: 	PolymorphismAnalyzerTestJHD
		jFreeChart: 	PolymorphismAnalyzerTestJFC


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(861667328)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1300@464) mouseUp 877249 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		owner: 	a MenuMorph(61079552)
		submorphs: 	#()
		fullBounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (864288768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(861667328)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1300@464) mouseUp 877249 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		owner: 	a MenuMorph(61079552)
		submorphs: 	#()
		fullBounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (864288768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(861667328)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1300@464) mouseUp 877249 nil]
	Receiver's instance variables: 
		bounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		owner: 	a MenuMorph(61079552)
		submorphs: 	#()
		fullBounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (864288768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(861667328)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
	Receiver's instance variables: 
		bounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		owner: 	a MenuMorph(61079552)
		submorphs: 	#()
		fullBounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (864288768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1300@464) mouseUp 877249 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(861667328)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	877249
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1300@464)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(861667328)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
	Receiver's instance variables: 
		bounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		owner: 	a MenuMorph(61079552)
		submorphs: 	#()
		fullBounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (864288768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		aMorph: 	a ToggleMenuItemMorph(861667328)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		aMorph: 	a ToggleMenuItemMorph(861667328)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(861667328)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		owner: 	a MenuMorph(61079552)
		submorphs: 	#()
		fullBounds: 	(1245.0@464.0) corner: (1482.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (864288768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		aMorph: 	a MenuMorph(61079552)
		localEvt: 	[(1300@464) mouseUp 877249 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(861667328)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(404226048)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		aMorph: 	a MenuMorph(61079552)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(61079552)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1240.0@224.0) corner: (1487.0@621.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(404226048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1240.0@224.0) corner: (1487.0@621.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (65011712) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(861667328)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(404226048)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(61079552)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
	Receiver's instance variables: 
		bounds: 	(1240.0@224.0) corner: (1487.0@621.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(404226048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1240.0@224.0) corner: (1487.0@621.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (65011712) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(861667328)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(404226048)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(61079552)
	Arguments and temporary variables: 
		evt: 	[(1300@464) mouseUp 877249 nil]
	Receiver's instance variables: 
		bounds: 	(1240.0@224.0) corner: (1487.0@621.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(404226048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1240.0@224.0) corner: (1487.0@621.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (65011712) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(861667328)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(404226048)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		focusHolder: 	a MenuMorph(61079552)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1283@467) corner: (1299@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1283@467) corner: (1299@483)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1291@476) mouseOver nil nil]
		targetOffset: 	(55.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 888562 1302 476 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1300@464) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		focusHolder: 	a MenuMorph(61079552)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1283@467) corner: (1299@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1283@467) corner: (1299@483)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1291@476) mouseOver nil nil]
		targetOffset: 	(55.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 888562 1302 476 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		focusHolder: 	a MenuMorph(61079552)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1283@467) corner: (1299@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1283@467) corner: (1299@483)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1291@476) mouseOver nil nil]
		targetOffset: 	(55.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 888562 1302 476 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
	Receiver's instance variables: 
		bounds: 	(1283@467) corner: (1299@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1283@467) corner: (1299@483)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1291@476) mouseOver nil nil]
		targetOffset: 	(55.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 888562 1302 476 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1300@464) mouseUp 877249 nil]
		evt: 	[(1300@464) mouseUp 877249 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1283@467) corner: (1299@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1283@467) corner: (1299@483)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1291@476) mouseOver nil nil]
		targetOffset: 	(55.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 888562 1302 476 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1300@464) mouseUp 877249 nil]
		evtBuf: 	#(1 877249 1300 464 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1283@467) corner: (1299@483)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1283@467) corner: (1299@483)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1291@476) mouseOver nil nil]
		targetOffset: 	(55.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 888562 1302 476 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	899753
		lastStepMessage: 	nil
		lastCycleTime: 	899753
		alarms: 	a Heap()
		lastAlarmTime: 	899753
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	899753
		lastStepMessage: 	nil
		lastCycleTime: 	899753
		alarms: 	a Heap()
		lastAlarmTime: 	899753
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzerTestJFC(Object)>>doesNotUnderstand: #rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "allMethods" is nil
23 October 2012 9:53:19.479 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #allMethods
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	allMethods
		exception: 	MessageNotUnderstood: receiver of "allMethods" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PolymorphismAnalyzer>>modelMethods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	nil
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>rootPolyMethods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	nil
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(544210944)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1261@463) mouseUp 1018132 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		owner: 	a MenuMorph(109051904)
		submorphs: 	#()
		fullBounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		color: 	Color black
		extension: 	a MorphExtension (546832384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(544210944)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1261@463) mouseUp 1018132 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		owner: 	a MenuMorph(109051904)
		submorphs: 	#()
		fullBounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		color: 	Color black
		extension: 	a MorphExtension (546832384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(544210944)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1261@463) mouseUp 1018132 nil]
	Receiver's instance variables: 
		bounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		owner: 	a MenuMorph(109051904)
		submorphs: 	#()
		fullBounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		color: 	Color black
		extension: 	a MorphExtension (546832384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(544210944)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
	Receiver's instance variables: 
		bounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		owner: 	a MenuMorph(109051904)
		submorphs: 	#()
		fullBounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		color: 	Color black
		extension: 	a MorphExtension (546832384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1261@463) mouseUp 1018132 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(544210944)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1018132
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1261@463)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(544210944)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
	Receiver's instance variables: 
		bounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		owner: 	a MenuMorph(109051904)
		submorphs: 	#()
		fullBounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		color: 	Color black
		extension: 	a MorphExtension (546832384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		aMorph: 	a ToggleMenuItemMorph(544210944)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		aMorph: 	a ToggleMenuItemMorph(544210944)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(544210944)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		owner: 	a MenuMorph(109051904)
		submorphs: 	#()
		fullBounds: 	(1224.0@456.0) corner: (1461.0@470.0)
		color: 	Color black
		extension: 	a MorphExtension (546832384)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		aMorph: 	a MenuMorph(109051904)
		localEvt: 	[(1261@463) mouseUp 1018132 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(544210944)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(452198400)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		aMorph: 	a MenuMorph(109051904)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(109051904)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1219.0@216.0) corner: (1466.0@613.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(452198400)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1219.0@216.0) corner: (1466.0@613.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (112984064) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(544210944)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(452198400)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(109051904)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
	Receiver's instance variables: 
		bounds: 	(1219.0@216.0) corner: (1466.0@613.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(452198400)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1219.0@216.0) corner: (1466.0@613.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (112984064) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(544210944)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(452198400)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(109051904)
	Arguments and temporary variables: 
		evt: 	[(1261@463) mouseUp 1018132 nil]
	Receiver's instance variables: 
		bounds: 	(1219.0@216.0) corner: (1466.0@613.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(452198400)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1219.0@216.0) corner: (1466.0@613.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (112984064) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(544210944)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(452198400)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		focusHolder: 	a MenuMorph(109051904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1261@463) corner: (1277@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1261@463) mouseOver nil nil]
		targetOffset: 	(37.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1018132 1261 463 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1261@463) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		focusHolder: 	a MenuMorph(109051904)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1261@463) corner: (1277@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1261@463) mouseOver nil nil]
		targetOffset: 	(37.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1018132 1261 463 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		focusHolder: 	a MenuMorph(109051904)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1261@463) corner: (1277@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1261@463) mouseOver nil nil]
		targetOffset: 	(37.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1018132 1261 463 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
	Receiver's instance variables: 
		bounds: 	(1261@463) corner: (1277@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1261@463) mouseOver nil nil]
		targetOffset: 	(37.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1018132 1261 463 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1261@463) mouseUp 1018132 nil]
		evt: 	[(1261@463) mouseUp 1018132 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1261@463) corner: (1277@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1261@463) mouseOver nil nil]
		targetOffset: 	(37.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1018132 1261 463 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1261@463) mouseUp 1018132 nil]
		evtBuf: 	#(1 1018132 1261 463 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1261@463) corner: (1277@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1261@463) mouseOver nil nil]
		targetOffset: 	(37.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1018132 1261 463 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	1018241
		lastStepMessage: 	nil
		lastCycleTime: 	1018241
		alarms: 	a Heap()
		lastAlarmTime: 	1018241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #allMethods
PolymorphismAnalyzer>>modelMethods
PolymorphismAnalyzer>>rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
DuplicatedVariableError: model is already defined in PolymorphismAnalyzerTestResource
23 October 2012 9:54:41.194 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

[:iv | 
(usedNames includes: iv)
		ifTrue: [newSuper
				withAllSuperclassesDo: [:cl | (cl instVarNames includes: iv)
						ifTrue: [temp := cl]].
			DuplicatedVariableError new superclass: temp;
				 variable: iv;
				 signal: iv , ' is already defined in ' , temp name.
			^ false].
	nil] in ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


Array(SequenceableCollection)>>do:
	Receiver: #('model')
	Arguments and temporary variables: 
		aBlock: 	[:iv | 
(usedNames includes: iv)
		ifTrue: [newSuper
				withAllSupercl...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
#('model')

ClassBuilder>>validateInstvars:from:forSuper:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemChangeNotifier uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemChangeNotifier uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemChangeNotifier uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#PolymorphismAnalyzerTestJFC
		newSuper: 	PolymorphismAnalyzerTestResource
		type: 	#normal
		classVarString: 	''
		poolString: 	''
		category: 	'PolyExp'
		unsafe: 	false
		oldClass: 	PolymorphismAnalyzerTestJFC
		instVars: 	#('model')
		classVars: 	#()
		copyOfOldClass: 	PolymorphismAnalyzerTestJFC
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	#(nil)
		newCategory: 	nil
		oldCategory: 	nil
		needNew: 	nil
		force: 	nil
		organization: 	nil
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


BlockClosure>>ensure:
	Receiver: [| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateS...etc...
	Arguments and temporary variables: 
		aBlock: 	[copyOfOldClass
		ifNotNil: [copyOfOldClass superclass removeSubclass: ...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariable...etc...
		startpc: 	376
		numArgs: 	0


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#PolymorphismAnalyzerTestJFC
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	PolymorphismAnalyzerTestResource
		type: 	#normal
		instVarString: 	'model'
		classVarString: 	''
		poolString: 	''
		category: 	'PolyExp'
		unsafe: 	false
		oldClass: 	PolymorphismAnalyzerTestJFC
		instVars: 	#('model')
		classVars: 	#()
		copyOfOldClass: 	PolymorphismAnalyzerTestJFC
		copyOfOldTraitComposition: 	nil
		copyOfOldClassTraitComposition: 	nil
		newClass: 	#(nil)
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		className: 	#PolymorphismAnalyzerTestJFC
		env: 	a SystemDictionary(lots of globals)
		newSuper: 	PolymorphismAnalyzerTestResource
		type: 	#normal
		instVarString: 	'model'
		classVarString: 	''
		poolString: 	''
		category: 	'PolyExp'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: a ClassBuilder
	Arguments and temporary variables: 
		newSuper: 	PolymorphismAnalyzerTestResource
		t: 	#PolymorphismAnalyzerTestJFC
		f: 	'model'
		d: 	''
		s: 	''
		cat: 	'PolyExp'
	Receiver's instance variables: 
		environ: 	a SystemDictionary(lots of globals)
		classMap: 	nil
		instVarMap: 	an IdentityDictionary()
		progress: 	nil
		maxClassIndex: 	nil
		currentClassIndex: 	nil


PolymorphismAnalyzerTestResource class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: PolymorphismAnalyzerTestResource
	Arguments and temporary variables: 
		t: 	#PolymorphismAnalyzerTestJFC
		f: 	'model'
		d: 	''
		s: 	''
		cat: 	'PolyExp'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary()
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestResource
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorph...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	an OBPluggableTextMorph(928776192)
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzerTestResource
		subclass: #PolymorphismA...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(161218560)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	an OBPluggableTextMorph(928776192)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorph...etc...
		anObject: 	nil
		aController: 	an OBPluggableTextMorph(928776192)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorph...etc...
		aController: 	an OBPluggableTextMorph(928776192)
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


RBAddClassChange(RBRefactoryDefinitionChange)>>primitiveExecute
	Receiver: PolymorphismAnalyzerTestResource subclass: #PolymorphismAnalyzerTestJFC
	instanceVariableN...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PolymorphismAnalyzerTestJFC
		isMeta: 	false
		controller: 	an OBPluggableTextMorph(928776192)
		definition: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorphis...etc...
		definedClass: 	nil
		superclassName: 	#PolymorphismAnalyzerTestResource
		instanceVariableNames: 	#('model')
		classVariableNames: 	#()
		poolDictionaryNames: 	#()
		category: 	#PolyExp


RBAddClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PolymorphismAnalyzerTestResource subclass: #PolymorphismAnalyzerTestJFC
	instanceVariableN...etc...
	Arguments and temporary variables: 
		aBlock: 	[]
		undo: 	TestResource subclass: #PolymorphismAnalyzerTestJFC
	instanceVariableName...etc...
	Receiver's instance variables: 
		name: 	nil
		className: 	#PolymorphismAnalyzerTestJFC
		isMeta: 	false
		controller: 	an OBPluggableTextMorph(928776192)
		definition: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorphis...etc...
		definedClass: 	nil
		superclassName: 	#PolymorphismAnalyzerTestResource
		instanceVariableNames: 	#('model')
		classVariableNames: 	#()
		poolDictionaryNames: 	#()
		category: 	#PolyExp


RBAddClassChange(RBRefactoryChange)>>execute
	Receiver: PolymorphismAnalyzerTestResource subclass: #PolymorphismAnalyzerTestJFC
	instanceVariableN...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PolymorphismAnalyzerTestJFC
		isMeta: 	false
		controller: 	an OBPluggableTextMorph(928776192)
		definition: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorphis...etc...
		definedClass: 	nil
		superclassName: 	#PolymorphismAnalyzerTestResource
		instanceVariableNames: 	#('model')
		classVariableNames: 	#()
		poolDictionaryNames: 	#()
		category: 	#PolyExp


[self addUndo: aRefactoringChange execute] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PolymorphismAnalyzerTestResource subclass: #PolymorphismAna...etc...
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!PolymorphismAnalyzerTest methodsFor: 'evaluating' s...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [self addUndo: aRefactoringChange execute]
	Arguments and temporary variables: 
		aBlock: 	[isPerformingRefactoring := false]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[self addUndo: aRefactoringChange execute]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!PolymorphismAnalyzerTest methodsFor: 'evaluating' s...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PolymorphismAnalyzerTestResource subclass: #PolymorphismAna...etc...
	Receiver's instance variables: 
		undo: 	an OrderedCollection(!PolymorphismAnalyzerTest methodsFor: 'evaluating' s...etc...
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


ORClassDefinition>>defineClass:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorphis...etc...
		aController: 	an OBPluggableTextMorph(928776192)
		change: 	PolymorphismAnalyzerTestResource subclass: #PolymorphismAnalyzerTestJFC...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestResource subclass: #PolymorphismAnalyzerTestJFC
	instanceVariabl...etc...


ORClassDefinition(OBClassDefinition)>>accept:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aText: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #PolymorphismAnal...etc...
		aController: 	an OBPluggableTextMorph(928776192)
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestResource subclass: #PolymorphismAnalyzerTestJFC
	instanceVariabl...etc...


[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorphi...etc...
		def: 	an OBPluggableTextMorph(928776192)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: [def accept: aText notifying: aController]
	Arguments and temporary variables: 
		exception: 	OBAnnouncerRequest
		handlerAction: 	[:notification | notification resume: self announcer]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnoun...etc...
		startpc: 	51
		numArgs: 	0


[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorphi...etc...
		def: 	an OBPluggableTextMorph(928776192)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		workBlock: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnouncer...etc...
		nilBlock: 	[true]
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #PolymorphismAnal...etc...
		aController: 	an OBPluggableTextMorph(928776192)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(928776192)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorph...etc...
	Receiver's instance variables: 
		bounds: 	(233.0@435.0) corner: (1470.0@837.0)
		owner: 	an OBGroupingMorph(275513344)
		submorphs: 	an Array(a TransformMorph(374341632))
		fullBounds: 	(233@435) corner: (1470@837)
		color: 	Color white
		extension: 	a MorphExtension (467402752) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(935854080)
		scroller: 	a TransformMorph(374341632)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(656670720)
		textMorph: 	an OBTextMorph(472645632)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
		startpc: 	65
		numArgs: 	0


OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(928776192)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #Polymorph...etc...
	Receiver's instance variables: 
		bounds: 	(233.0@435.0) corner: (1470.0@837.0)
		owner: 	an OBGroupingMorph(275513344)
		submorphs: 	an Array(a TransformMorph(374341632))
		fullBounds: 	(233@435) corner: (1470@837)
		color: 	Color white
		extension: 	a MorphExtension (467402752) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(935854080)
		scroller: 	a TransformMorph(374341632)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(656670720)
		textMorph: 	an OBTextMorph(472645632)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
	Receiver: an OBPluggableTextMorph(928776192)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(33 to: 32)
		saveScrollerOffset: 	(-3@0)
	Receiver's instance variables: 
		bounds: 	(233.0@435.0) corner: (1470.0@837.0)
		owner: 	an OBGroupingMorph(275513344)
		submorphs: 	an Array(a TransformMorph(374341632))
		fullBounds: 	(233@435) corner: (1470@837)
		color: 	Color white
		extension: 	a MorphExtension (467402752) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(935854080)
		scroller: 	a TransformMorph(374341632)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(656670720)
		textMorph: 	an OBTextMorph(472645632)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>accept
	Receiver: an OBPluggableTextMorph(928776192)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(233.0@435.0) corner: (1470.0@837.0)
		owner: 	an OBGroupingMorph(275513344)
		submorphs: 	an Array(a TransformMorph(374341632))
		fullBounds: 	(233@435) corner: (1470@837)
		color: 	Color white
		extension: 	a MorphExtension (467402752) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(935854080)
		scroller: 	a TransformMorph(374341632)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(656670720)
		textMorph: 	an OBTextMorph(472645632)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(33 to: 32)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorphSelection>>accept
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(33 to: 32)
		text: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #PolymorphismAnaly...etc...
		morph: 	an OBPluggableTextMorph(928776192)


OBAcceptTextCommand>>execute
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		each: 	an OBAcceptTextCommand
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBAcceptTextCommand)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an OBAcceptTextCommand nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		aKeystroke: 	cmd+s
		aNode: 	an OBTextMorphSelection
		aRequestor: 	an OBDefinitionPanel
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aKeystroke: 	cmd+s
		aTextSelection: 	an OBTextMorphSelection
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBTextMorph>>keyStroke:
	Receiver: an OBTextMorph(472645632)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1231@82)
		owner: 	a TransformMorph(374341632)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1231@82)
		color: 	Color black
		extension: 	a MorphExtension (493355008) [other:  (blinkStart -> 1099377) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzerTestResource subclass: #PolymorphismAnaly...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(928776192)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
[:iv | 
(usedNames includes: iv)
		ifTrue: [newSuper
				withAllSuperclassesDo: [:cl | (cl instVarNames includes: iv)
						ifTrue: [temp := cl]].
			DuplicatedVariableError new superclass: temp;
				 variable: iv;
				 signal: iv , ' is already defined in ' , temp name.
			^ false].
	nil] in ClassBuilder>>validateInstvars:from:forSuper:
Array(SequenceableCollection)>>do:
ClassBuilder>>validateInstvars:from:forSuper:
[| newCategory oldCategory needNew force organization |
unsafe
		ifFalse: [(self validateSuperclass: newSuper forSubclass: oldClass)
				ifFalse: [^ nil].
			(self
					validateInstvars: instVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateClassvars: classVars
					from: oldClass
					forSuper: newSuper)
				ifFalse: [^ nil].
			(self
					validateSubclassFormat: type
					from: oldClass
					forSuper: newSuper
					extra: instVars size)
				ifFalse: [^ nil]].
	needNew := self
				needsSubclassOf: newSuper
				type: type
				instanceVariables: instVars
				from: oldClass.
	needNew
		ifNil: [^ nil].
	(needNew
			and: [unsafe not])
		ifTrue: [(self tooDangerousClasses includes: oldClass name)
				ifTrue: [self error: oldClass name , ' cannot be changed'].
			(oldClass ~~ nil
					and: [oldClass shouldNotBeRedefined])
				ifTrue: [self notify: oldClass name asText allBold , ' should not be redefined. \Proceed to store over it.' withCRs]].
	needNew
		ifTrue: [newClass := self
						newSubclassOf: newSuper
						type: type
						instanceVariables: instVars
						from: oldClass.
			newClass
				ifNil: [^ nil].
			newClass setName: className]
		ifFalse: [newClass := oldClass].
	force := (newClass declare: classVarString)
				| (newClass sharing: poolString).
	newCategory := category asSymbol.
	organization := environ
				ifNotNil: [environ organization].
	oldClass isNil
		ifFalse: [oldCategory := (organization categoryOfElement: oldClass name) asSymbol].
	organization classify: newClass name under: newCategory.
	newClass environment: environ.
	newClass := self
				recompile: force
				from: oldClass
				to: newClass
				mutate: false.
	(environ
			at: newClass name
			ifAbsent: [])
			== newClass
		ifFalse: [environ at: newClass name put: newClass.
			Smalltalk globals flushClassNameCache].
	copyOfOldTraitComposition
		ifNotNil: [newClass setTraitComposition: copyOfOldTraitComposition].
	copyOfOldClassTraitComposition
		ifNotNil: [newClass class setTraitComposition: copyOfOldClassTraitComposition].
	newClass doneCompiling.
	oldClass isNil
		ifTrue: [SystemChangeNotifier uniqueInstance classAdded: newClass inCategory: newCategory.
			^ newClass].
	newCategory ~= oldCategory
		ifTrue: [SystemChangeNotifier uniqueInstance
				class: newClass
				recategorizedFrom: oldCategory
				to: category]
		ifFalse: [SystemChangeNotifier uniqueInstance classDefinitionChangedFrom: copyOfOldClass to: newClass]] in ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
BlockClosure>>ensure:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:
ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
PolymorphismAnalyzerTestResource class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:notifying:logged:
RBAddClassChange(RBRefactoryDefinitionChange)>>primitiveExecute
RBAddClassChange(RBRefactoryClassChange)>>executeNotifying:
RBAddClassChange(RBRefactoryChange)>>execute
[self addUndo: aRefactoringChange execute] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ORClassDefinition>>defineClass:notifying:
ORClassDefinition(OBClassDefinition)>>accept:notifying:
[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
OBPluggableTextMorph(PluggableTextMorph)>>accept
OBTextMorphSelection>>accept
OBAcceptTextCommand>>execute
[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
OBTextMorph>>keyStroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Reading a number failed: a digit between 0 and 9 expected
23 October 2012 10:00:27.149 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

SqNumberParser(Object)>>error:
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		aString: 	'Reading a number failed: a digit between 0 and 9 expected'
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser(NumberParser)>>expected:
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		aString: 	'a digit between 0 and 9'
		errorString: 	'a digit between 0 and 9 expected'
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser>>readNamedFloatOrFail
	Receiver: a SqNumberParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser>>nextNumber
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		numberOfTrailingZeroInIntegerPart: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


Number class>>readFrom:
	Receiver: Number
	Arguments and temporary variables: 
		stringOrStream: 	a ReadStream
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(size 125)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics-Primitives' @)
('*Tools-Inspector' defaultLabelForIns...etc...
		subclasses: 	{Fraction. Float. Integer}
		name: 	#Number
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Numbers'
		traitComposition: 	{}
		localSelectors: 	nil


Number class(Object)>>readFromString:
	Receiver: Number
	Arguments and temporary variables: 
		aString: 	'jhotdraw.mse'
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(size 125)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*Graphics-Primitives' @)
('*Tools-Inspector' defaultLabelForIns...etc...
		subclasses: 	{Fraction. Float. Integer}
		name: 	#Number
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Numbers'
		traitComposition: 	{}
		localSelectors: 	nil


ByteString(String)>>asNumber
	Receiver: 'jhotdraw.mse'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'jhotdraw.mse'

ByteString(String)>>adaptToString:andSend:
	Receiver: '.mse'
	Arguments and temporary variables: 
		rcvr: 	'jhotdraw.mse'
		selector: 	#+
	Receiver's instance variables: 
'.mse'

ByteString(String)>>+
	Receiver: 'jhotdraw.mse'
	Arguments and temporary variables: 
		arg: 	'.mse'
	Receiver's instance variables: 
'jhotdraw.mse'

PolymorphismAnalyzerTestJHD(PolymorphismAnalyzerTestResource)>>setUp
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	nil


[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


BlockClosure>>ensure:
	Receiver: [candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]]
	Arguments and temporary variables: 
		aBlock: 	[current == candidate
		ifFalse: [candidate tearDown]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvaila...etc...
		startpc: 	69
		numArgs: 	0


PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aTestAsserter: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		each: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {PolymorphismAnalyzerTestJHD. PolymorphismAnalyzerTestJFC}
	Arguments and temporary variables: 
		aBlock: 	[:each | each availableFor: self]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{PolymorphismAnalyzerTestJHD. PolymorphismAnalyzerTestJFC}

PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(894959616)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1337@464) mouseUp 1445817 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		owner: 	a MenuMorph(411041792)
		submorphs: 	#()
		fullBounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (897318912)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(894959616)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1337@464) mouseUp 1445817 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		owner: 	a MenuMorph(411041792)
		submorphs: 	#()
		fullBounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (897318912)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(894959616)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1337@464) mouseUp 1445817 nil]
	Receiver's instance variables: 
		bounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		owner: 	a MenuMorph(411041792)
		submorphs: 	#()
		fullBounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (897318912)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(894959616)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
	Receiver's instance variables: 
		bounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		owner: 	a MenuMorph(411041792)
		submorphs: 	#()
		fullBounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (897318912)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1337@464) mouseUp 1445817 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(894959616)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1445817
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1337@464)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(894959616)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
	Receiver's instance variables: 
		bounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		owner: 	a MenuMorph(411041792)
		submorphs: 	#()
		fullBounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (897318912)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
		aMorph: 	a ToggleMenuItemMorph(894959616)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
		aMorph: 	a ToggleMenuItemMorph(894959616)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(894959616)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		owner: 	a MenuMorph(411041792)
		submorphs: 	#()
		fullBounds: 	(1260.0@461.0) corner: (1497.0@475.0)
		color: 	Color black
		extension: 	a MorphExtension (897318912)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
		aMorph: 	a MenuMorph(411041792)
		localEvt: 	[(1337@464) mouseUp 1445817 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(894959616)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(753926144)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
		aMorph: 	a MenuMorph(411041792)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(411041792)
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1255.0@221.0) corner: (1502.0@618.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(753926144)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1255.0@221.0) corner: (1502.0@618.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (414711808) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(894959616)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(753926144)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(411041792)
	Arguments and temporary variables: 
		anEvent: 	[(1337@464) mouseUp 1445817 nil]
	Receiver's instance variables: 
		bounds: 	(1255.0@221.0) corner: (1502.0@618.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(753926144)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1255.0@221.0) corner: (1502.0@618.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (414711808) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(894959616)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(753926144)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(411041792)
	Arguments and temporary variables: 
		evt: 	[(1337@464) mouseUp 1445817 nil]
	Receiver's instance variables: 
		bounds: 	(1255.0@221.0) corner: (1502.0@618.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(753926144)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1255.0@221.0) corner: (1502.0@618.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (414711808) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(894959616)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(753926144)'File out' a To...etc...



--- The full stack ---
SqNumberParser(Object)>>error:
SqNumberParser(NumberParser)>>expected:
SqNumberParser>>readNamedFloatOrFail
SqNumberParser>>nextNumber
Number class>>readFrom:
Number class(Object)>>readFromString:
ByteString(String)>>asNumber
ByteString(String)>>adaptToString:andSend:
ByteString(String)>>+
PolymorphismAnalyzerTestJHD(PolymorphismAnalyzerTestResource)>>setUp
[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
BlockClosure>>ensure:
PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
Array(SequenceableCollection)>>do:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
23 October 2012 10:01:33.404 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('jhotdraw.mse' 'jfreechart.mse' 'Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('jhotdraw.mse' 'jfreechart.mse' 'Choose another name' 'Cancel' nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('jhotdraw.mse' 'jfreechart.mse' 'Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('jhotdraw.mse' 'jfreechart.mse' 'Choose another name' 'Cancel' nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection>>at:
	Receiver: an OrderedCollection('jhotdraw.mse' 'jfreechart.mse' 'Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('jhotdraw.mse' 'jfreechart.mse' 'Choose another name' 'Cancel' nil nil...etc...
		firstIndex: 	1
		lastIndex: 	4


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/jho...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#('.DS_Store' 'jfreechart.mse' 'jhotdraw.mse' 'moose.st' 'moose4.7.chang...etc...
		choices: 	an OrderedCollection('jhotdraw.mse' 'jfreechart.mse' 'Choose another n...etc...
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw.mse.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/j...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/jhotdra...etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/j...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/jhotdra...etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1288@465) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/j...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/jhotdra...etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/jhotdra...etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/jhotdra...etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'jhotdraw.mse.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jhotdraw.mse.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTestJHD(PolymorphismAnalyzerTestResource)>>setUp
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	nil


[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


BlockClosure>>ensure:
	Receiver: [candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]]
	Arguments and temporary variables: 
		aBlock: 	[current == candidate
		ifFalse: [candidate tearDown]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvaila...etc...
		startpc: 	69
		numArgs: 	0


PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aTestAsserter: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	PolymorphismAnalyzerTestResource
		methodDict: 	a MethodDictionary(#file->(PolymorphismAnalyzerTestJHD>>#file "a Co...etc...
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified' file)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	nil


[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		each: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {PolymorphismAnalyzerTestJHD. PolymorphismAnalyzerTestJFC}
	Arguments and temporary variables: 
		aBlock: 	[:each | each availableFor: self]
		index: 	1
		indexLimiT: 	2
	Receiver's instance variables: 
{PolymorphismAnalyzerTestJHD. PolymorphismAnalyzerTestJFC}

PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(716439552)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1288@465) mouseUp 1507685 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		owner: 	a MenuMorph(234356736)
		submorphs: 	#()
		fullBounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (719060992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(716439552)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1288@465) mouseUp 1507685 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		owner: 	a MenuMorph(234356736)
		submorphs: 	#()
		fullBounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (719060992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(716439552)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1288@465) mouseUp 1507685 nil]
	Receiver's instance variables: 
		bounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		owner: 	a MenuMorph(234356736)
		submorphs: 	#()
		fullBounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (719060992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(716439552)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1288@465) mouseUp 1507685 nil]
	Receiver's instance variables: 
		bounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		owner: 	a MenuMorph(234356736)
		submorphs: 	#()
		fullBounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (719060992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1288@465) mouseUp 1507685 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(716439552)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1507685
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1288@465)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(716439552)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1288@465) mouseUp 1507685 nil]
	Receiver's instance variables: 
		bounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		owner: 	a MenuMorph(234356736)
		submorphs: 	#()
		fullBounds: 	(1203.0@458.0) corner: (1440.0@472.0)
		color: 	Color black
		extension: 	a MorphExtension (719060992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTestJHD(PolymorphismAnalyzerTestResource)>>setUp
[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
BlockClosure>>ensure:
PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
Array(SequenceableCollection)>>do:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "rootPolyMethods" is nil
23 October 2012 10:03:16.57 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #rootPolyMethods
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	rootPolyMethods
		exception: 	MessageNotUnderstood: receiver of "rootPolyMethods" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	nil
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(406061056)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(98304000)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1264@466) mouseUp 1545582 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		owner: 	a MenuMorph(689700864)
		submorphs: 	#()
		fullBounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (100925440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(98304000)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1264@466) mouseUp 1545582 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		owner: 	a MenuMorph(689700864)
		submorphs: 	#()
		fullBounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (100925440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(98304000)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1264@466) mouseUp 1545582 nil]
	Receiver's instance variables: 
		bounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		owner: 	a MenuMorph(689700864)
		submorphs: 	#()
		fullBounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (100925440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(98304000)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
	Receiver's instance variables: 
		bounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		owner: 	a MenuMorph(689700864)
		submorphs: 	#()
		fullBounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (100925440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1264@466) mouseUp 1545582 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(98304000)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1545582
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1264@466)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(98304000)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
	Receiver's instance variables: 
		bounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		owner: 	a MenuMorph(689700864)
		submorphs: 	#()
		fullBounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (100925440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		aMorph: 	a ToggleMenuItemMorph(98304000)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		aMorph: 	a ToggleMenuItemMorph(98304000)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(98304000)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		owner: 	a MenuMorph(689700864)
		submorphs: 	#()
		fullBounds: 	(1223.0@464.0) corner: (1460.0@478.0)
		color: 	Color black
		extension: 	a MorphExtension (100925440)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(406061056))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		aMorph: 	a MenuMorph(689700864)
		localEvt: 	[(1264@466) mouseUp 1545582 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(98304000)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(1032585216)'File out' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		aMorph: 	a MenuMorph(689700864)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(689700864)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1218.0@224.0) corner: (1465.0@621.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1032585216)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1218.0@224.0) corner: (1465.0@621.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (693370880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(98304000)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1032585216)'File out' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(689700864)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
	Receiver's instance variables: 
		bounds: 	(1218.0@224.0) corner: (1465.0@621.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1032585216)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1218.0@224.0) corner: (1465.0@621.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (693370880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(98304000)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1032585216)'File out' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(689700864)
	Arguments and temporary variables: 
		evt: 	[(1264@466) mouseUp 1545582 nil]
	Receiver's instance variables: 
		bounds: 	(1218.0@224.0) corner: (1465.0@621.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1032585216)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1218.0@224.0) corner: (1465.0@621.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (693370880) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(98304000)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1032585216)'File out' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		focusHolder: 	a MenuMorph(689700864)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2448@831) corner: (2464@847)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2448@831) mouseOver nil nil]
		targetOffset: 	(41.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1547988 1276 441 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1264@466) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(1004535808) a S...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		focusHolder: 	a MenuMorph(689700864)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2448@831) corner: (2464@847)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2448@831) mouseOver nil nil]
		targetOffset: 	(41.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1547988 1276 441 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		focusHolder: 	a MenuMorph(689700864)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2448@831) corner: (2464@847)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2448@831) mouseOver nil nil]
		targetOffset: 	(41.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1547988 1276 441 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
	Receiver's instance variables: 
		bounds: 	(2448@831) corner: (2464@847)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2448@831) mouseOver nil nil]
		targetOffset: 	(41.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1547988 1276 441 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1264@466) mouseUp 1545582 nil]
		evt: 	[(1264@466) mouseUp 1545582 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2448@831) corner: (2464@847)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2448@831) mouseOver nil nil]
		targetOffset: 	(41.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1547988 1276 441 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1264@466) mouseUp 1545582 nil]
		evtBuf: 	#(1 1545582 1264 466 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2448@831) corner: (2464@847)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2448@831) mouseOver nil nil]
		targetOffset: 	(41.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1547988 1276 441 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...
		lastStepTime: 	1615363
		lastStepMessage: 	nil
		lastCycleTime: 	1615363
		alarms: 	a Heap()
		lastAlarmTime: 	1615363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...
		lastStepTime: 	1615363
		lastStepMessage: 	nil
		lastCycleTime: 	1615363
		alarms: 	a Heap()
		lastAlarmTime: 	1615363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #rootPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXMethod>>withOverriderMethods
23 October 2012 10:04:55.062 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXMethod(Object)>>doesNotUnderstand: #withOverriderMethods
	Receiver: IntervalXYDataset>>getEndYValue(int,int) (Method)
	Arguments and temporary variables: 
		aMessage: 	withOverriderMethods
		exception: 	MessageNotUnderstood: FAMIXMethod>>withOverriderMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5867192
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/x...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * Returns the end ...n The end y-value.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'getEndYValue'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('abstract' 'public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	#()
		incomingInvocations: 	an Array(iterateToFindRangeBounds -> ixyd#getEndYValue(int...etc...
		localVariables: 	#()
		parameters: 	an Array(item (parameter in IntervalXYDataset>>getEndYValue(int,int...etc...
		signature: 	'getEndYValue(int,int)'
		accesses: 	#()
		declaredType: 	double (PrimitiveType)
		kind: 	nil
		parentType: 	IntervalXYDataset in org::jfree::data::xy (Class)


[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		met: 	IntervalXYDataset>>getEndYValue(int,int) (Method)
	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	IntervalXYDataset>>getEndYValue(int,int) (Method)
		stream: 	[:met | met withOverriderMethods]
		each: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection>>do:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | stream
		nextPutAll: (aBlock value: each)]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	[:met | met withOverriderMethods]
		stream: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolyMethods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Me...etc...
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1039663104)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1989@435) mouseUp 1710259 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		owner: 	a MenuMorph(555745280)
		submorphs: 	#()
		fullBounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (1042284544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1039663104)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1989@435) mouseUp 1710259 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		owner: 	a MenuMorph(555745280)
		submorphs: 	#()
		fullBounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (1042284544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1039663104)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1989@435) mouseUp 1710259 nil]
	Receiver's instance variables: 
		bounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		owner: 	a MenuMorph(555745280)
		submorphs: 	#()
		fullBounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (1042284544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1039663104)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
	Receiver's instance variables: 
		bounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		owner: 	a MenuMorph(555745280)
		submorphs: 	#()
		fullBounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (1042284544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1989@435) mouseUp 1710259 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1039663104)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1710259
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1989@435)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1039663104)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
	Receiver's instance variables: 
		bounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		owner: 	a MenuMorph(555745280)
		submorphs: 	#()
		fullBounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (1042284544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		aMorph: 	a ToggleMenuItemMorph(1039663104)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		aMorph: 	a ToggleMenuItemMorph(1039663104)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1039663104)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		owner: 	a MenuMorph(555745280)
		submorphs: 	#()
		fullBounds: 	(1885.0@424.0) corner: (2122.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (1042284544)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		aMorph: 	a MenuMorph(555745280)
		localEvt: 	[(1989@435) mouseUp 1710259 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(1039663104)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(898891776)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		aMorph: 	a MenuMorph(555745280)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(555745280)
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1880.0@184.0) corner: (2127.0@581.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(898891776)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1880.0@184.0) corner: (2127.0@581.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (559677440) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(1039663104)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(898891776)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(555745280)
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
	Receiver's instance variables: 
		bounds: 	(1880.0@184.0) corner: (2127.0@581.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(898891776)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1880.0@184.0) corner: (2127.0@581.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (559677440) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(1039663104)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(898891776)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(555745280)
	Arguments and temporary variables: 
		evt: 	[(1989@435) mouseUp 1710259 nil]
	Receiver's instance variables: 
		bounds: 	(1880.0@184.0) corner: (2127.0@581.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(898891776)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1880.0@184.0) corner: (2127.0@581.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (559677440) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(1039663104)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(898891776)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		focusHolder: 	a MenuMorph(555745280)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1949@366) corner: (1965@382)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1949@366) corner: (1965@382)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1949@366) mouseOver nil nil]
		targetOffset: 	(104.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1712875 1989 439 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1989@435) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		focusHolder: 	a MenuMorph(555745280)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1949@366) corner: (1965@382)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1949@366) corner: (1965@382)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1949@366) mouseOver nil nil]
		targetOffset: 	(104.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1712875 1989 439 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1989@435) mouseUp 1710259 nil]
		focusHolder: 	a MenuMorph(555745280)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1949@366) corner: (1965@382)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1949@366) corner: (1965@382)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1949@366) mouseOver nil nil]
		targetOffset: 	(104.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1712875 1989 439 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
FAMIXMethod(Object)>>doesNotUnderstand: #withOverriderMethods
[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
OrderedCollection>>do:
OrderedCollection(Collection)>>flatCollect:
PolymorphismAnalyzer>>polymorphicMethods_computer
PolymorphismAnalyzer>>allPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXMethod>>overriderMethods
23 October 2012 10:08:28.903 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXMethod(Object)>>doesNotUnderstand: #overriderMethods
	Receiver: IntervalXYDataset>>getEndYValue(int,int) (Method)
	Arguments and temporary variables: 
		aMessage: 	overriderMethods
		exception: 	MessageNotUnderstood: FAMIXMethod>>overriderMethods
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5867192
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/x...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * Returns the end ...n The end y-value.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'getEndYValue'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('abstract' 'public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	#()
		incomingInvocations: 	an Array(iterateToFindRangeBounds -> ixyd#getEndYValue(int...etc...
		localVariables: 	#()
		parameters: 	an Array(item (parameter in IntervalXYDataset>>getEndYValue(int,int...etc...
		signature: 	'getEndYValue(int,int)'
		accesses: 	#()
		declaredType: 	double (PrimitiveType)
		kind: 	nil
		parentType: 	IntervalXYDataset in org::jfree::data::xy (Class)


FAMIXMethod>>withOverriderMethods
	Receiver: IntervalXYDataset>>getEndYValue(int,int) (Method)
	Arguments and temporary variables: 
		all: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method))
	Receiver's instance variables: 
		mooseID: 	5867192
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/x...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * Returns the end ...n The end y-value.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'getEndYValue'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('abstract' 'public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	#()
		incomingInvocations: 	an Array(iterateToFindRangeBounds -> ixyd#getEndYValue(int...etc...
		localVariables: 	#()
		parameters: 	an Array(item (parameter in IntervalXYDataset>>getEndYValue(int,int...etc...
		signature: 	'getEndYValue(int,int)'
		accesses: 	#()
		declaredType: 	double (PrimitiveType)
		kind: 	nil
		parentType: 	IntervalXYDataset in org::jfree::data::xy (Class)


[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		met: 	IntervalXYDataset>>getEndYValue(int,int) (Method)
	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	IntervalXYDataset>>getEndYValue(int,int) (Method)
		stream: 	[:met | met withOverriderMethods]
		each: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection>>do:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | stream
		nextPutAll: (aBlock value: each)]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	[:met | met withOverriderMethods]
		stream: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolyMethods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Me...etc...
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(691535872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2018@433) mouseUp 1923985 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		owner: 	a MenuMorph(209190912)
		submorphs: 	#()
		fullBounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (694157312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(691535872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2018@433) mouseUp 1923985 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		owner: 	a MenuMorph(209190912)
		submorphs: 	#()
		fullBounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (694157312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(691535872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2018@433) mouseUp 1923985 nil]
	Receiver's instance variables: 
		bounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		owner: 	a MenuMorph(209190912)
		submorphs: 	#()
		fullBounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (694157312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(691535872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
	Receiver's instance variables: 
		bounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		owner: 	a MenuMorph(209190912)
		submorphs: 	#()
		fullBounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (694157312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2018@433) mouseUp 1923985 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(691535872)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1923985
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2018@433)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(691535872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
	Receiver's instance variables: 
		bounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		owner: 	a MenuMorph(209190912)
		submorphs: 	#()
		fullBounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (694157312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		aMorph: 	a ToggleMenuItemMorph(691535872)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		aMorph: 	a ToggleMenuItemMorph(691535872)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(691535872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		owner: 	a MenuMorph(209190912)
		submorphs: 	#()
		fullBounds: 	(1917.0@427.0) corner: (2154.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (694157312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		aMorph: 	a MenuMorph(209190912)
		localEvt: 	[(2018@433) mouseUp 1923985 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(691535872)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(552337408)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		aMorph: 	a MenuMorph(209190912)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(209190912)
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1912.0@187.0) corner: (2159.0@584.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(552337408)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1912.0@187.0) corner: (2159.0@584.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (213123072) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(691535872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(552337408)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(209190912)
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
	Receiver's instance variables: 
		bounds: 	(1912.0@187.0) corner: (2159.0@584.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(552337408)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1912.0@187.0) corner: (2159.0@584.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (213123072) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(691535872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(552337408)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(209190912)
	Arguments and temporary variables: 
		evt: 	[(2018@433) mouseUp 1923985 nil]
	Receiver's instance variables: 
		bounds: 	(1912.0@187.0) corner: (2159.0@584.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(552337408)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1912.0@187.0) corner: (2159.0@584.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (213123072) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(691535872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(552337408)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		focusHolder: 	a MenuMorph(209190912)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2018@433) corner: (2034@449)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2018@433) corner: (2034@449)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2018@433) mouseOver nil nil]
		targetOffset: 	(101.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1923985 2018 433 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2018@433) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2018@433) mouseUp 1923985 nil]
		focusHolder: 	a MenuMorph(209190912)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2018@433) corner: (2034@449)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2018@433) corner: (2034@449)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2018@433) mouseOver nil nil]
		targetOffset: 	(101.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1923985 2018 433 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
FAMIXMethod(Object)>>doesNotUnderstand: #overriderMethods
FAMIXMethod>>withOverriderMethods
[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
OrderedCollection>>do:
OrderedCollection(Collection)>>flatCollect:
PolymorphismAnalyzer>>polymorphicMethods_computer
PolymorphismAnalyzer>>allPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXClass>>subclassHierarchyGroupModel
23 October 2012 10:09:13.185 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXClass(Object)>>doesNotUnderstand: #subclassHierarchyGroupModel
	Receiver: IntervalXYDataset in org::jfree::data::xy (Class)
	Arguments and temporary variables: 
		aMessage: 	subclassHierarchyGroupModel
		exception: 	MessageNotUnderstood: FAMIXClass>>subclassHierarchyGroupModel
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5764883
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/x...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * An extension of ... * numerical axes.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'IntervalXYDataset'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		subInheritances: 	an Array(HistogramDataset -> IntervalXYDataset (Inheritance) C...etc...
		methods: 	an Array(IntervalXYDataset>>getEndX(int,int) (Method) IntervalXYDatase...etc...
		container: 	org (Namespace)::jfree (Namespace)::data (Namespace)::xy (Namespace)...etc...
		superInheritances: 	an Array(IntervalXYDataset -> XYDataset (Inheritance))
		attributes: 	#()
		behavioursWithDeclaredType: 	an Array(CombinedXYPlotDemo1>>createDataset1() (Met...etc...
		structuresWithDeclaredType: 	an Array(ixyd (local variable in DatasetUtilities>>...etc...
		isInterface: 	true


FAMIXMethod>>overriderMethods
	Receiver: IntervalXYDataset>>getEndYValue(int,int) (Method)
	Arguments and temporary variables: 
		overs: 	an OrderedCollection()
	Receiver's instance variables: 
		mooseID: 	5867192
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/x...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * Returns the end ...n The end y-value.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'getEndYValue'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('abstract' 'public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	#()
		incomingInvocations: 	an Array(iterateToFindRangeBounds -> ixyd#getEndYValue(int...etc...
		localVariables: 	#()
		parameters: 	an Array(item (parameter in IntervalXYDataset>>getEndYValue(int,int...etc...
		signature: 	'getEndYValue(int,int)'
		accesses: 	#()
		declaredType: 	double (PrimitiveType)
		kind: 	nil
		parentType: 	IntervalXYDataset in org::jfree::data::xy (Class)


FAMIXMethod>>withOverriderMethods
	Receiver: IntervalXYDataset>>getEndYValue(int,int) (Method)
	Arguments and temporary variables: 
		all: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method))
	Receiver's instance variables: 
		mooseID: 	5867192
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/jfreechart-1.0.13/source/org/jfree/data/x...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * Returns the end ...n The end y-value.
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'getEndYValue'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('abstract' 'public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	#()
		incomingInvocations: 	an Array(iterateToFindRangeBounds -> ixyd#getEndYValue(int...etc...
		localVariables: 	#()
		parameters: 	an Array(item (parameter in IntervalXYDataset>>getEndYValue(int,int...etc...
		signature: 	'getEndYValue(int,int)'
		accesses: 	#()
		declaredType: 	double (PrimitiveType)
		kind: 	nil
		parentType: 	IntervalXYDataset in org::jfree::data::xy (Class)


[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		met: 	IntervalXYDataset>>getEndYValue(int,int) (Method)
	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	IntervalXYDataset>>getEndYValue(int,int) (Method)
		stream: 	[:met | met withOverriderMethods]
		each: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection>>do:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | stream
		nextPutAll: (aBlock value: each)]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


OrderedCollection(Collection)>>flatCollect:
	Receiver: an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractIntervalXYD...etc...
	Arguments and temporary variables: 
		aBlock: 	[:met | met withOverriderMethods]
		stream: 	a NSCollectionStream
	Receiver's instance variables: 
		array: 	an Array(IntervalXYDataset>>getEndYValue(int,int) (Method) AbstractInter...etc...
		firstIndex: 	1
		lastIndex: 	502


PolymorphismAnalyzer>>polymorphicMethods_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolyMethods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jfreechart(217562)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (11813 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(in...etc...
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 
		rootAbstract: 	an OrderedCollection(IntervalXYDataset>>getEndYValue(int,int) (Me...etc...
		allAbstract: 	nil
	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testAbstractPolymorphicMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(140509184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1913@434) mouseUp 1970009 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		owner: 	a MenuMorph(725090304)
		submorphs: 	#()
		fullBounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		color: 	Color black
		extension: 	a MorphExtension (143130624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(140509184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1913@434) mouseUp 1970009 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		owner: 	a MenuMorph(725090304)
		submorphs: 	#()
		fullBounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		color: 	Color black
		extension: 	a MorphExtension (143130624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(140509184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1913@434) mouseUp 1970009 nil]
	Receiver's instance variables: 
		bounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		owner: 	a MenuMorph(725090304)
		submorphs: 	#()
		fullBounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		color: 	Color black
		extension: 	a MorphExtension (143130624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(140509184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
	Receiver's instance variables: 
		bounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		owner: 	a MenuMorph(725090304)
		submorphs: 	#()
		fullBounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		color: 	Color black
		extension: 	a MorphExtension (143130624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1913@434) mouseUp 1970009 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(140509184)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1970009
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1913@434)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(140509184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
	Receiver's instance variables: 
		bounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		owner: 	a MenuMorph(725090304)
		submorphs: 	#()
		fullBounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		color: 	Color black
		extension: 	a MorphExtension (143130624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		aMorph: 	a ToggleMenuItemMorph(140509184)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		aMorph: 	a ToggleMenuItemMorph(140509184)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(140509184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		owner: 	a MenuMorph(725090304)
		submorphs: 	#()
		fullBounds: 	(1884.0@426.0) corner: (2121.0@440.0)
		color: 	Color black
		extension: 	a MorphExtension (143130624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		aMorph: 	a MenuMorph(725090304)
		localEvt: 	[(1913@434) mouseUp 1970009 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(140509184)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(1068236800)'File out' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		aMorph: 	a MenuMorph(725090304)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(725090304)
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1879.0@186.0) corner: (2126.0@583.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1068236800)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1879.0@186.0) corner: (2126.0@583.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (729022464) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(140509184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1068236800)'File out' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(725090304)
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
	Receiver's instance variables: 
		bounds: 	(1879.0@186.0) corner: (2126.0@583.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1068236800)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1879.0@186.0) corner: (2126.0@583.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (729022464) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(140509184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1068236800)'File out' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(725090304)
	Arguments and temporary variables: 
		evt: 	[(1913@434) mouseUp 1970009 nil]
	Receiver's instance variables: 
		bounds: 	(1879.0@186.0) corner: (2126.0@583.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1068236800)'File out' a ToggleMenuIte...etc...
		fullBounds: 	(1879.0@186.0) corner: (2126.0@583.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (729022464) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(140509184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1068236800)'File out' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1913@434) mouseUp 1970009 nil]
		focusHolder: 	a MenuMorph(725090304)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1913@434) corner: (1929@450)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1913@434) corner: (1929@450)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1913@434) mouseOver nil nil]
		targetOffset: 	(29.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1970009 1913 434 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1913@434) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FAMIXClass(Object)>>doesNotUnderstand: #subclassHierarchyGroupModel
FAMIXMethod>>overriderMethods
FAMIXMethod>>withOverriderMethods
[:met | met withOverriderMethods] in PolymorphismAnalyzer>>polymorphicMethods_computer
[:each | stream
		nextPutAll: (aBlock value: each)] in OrderedCollection(Collection)>>flatCollect:
OrderedCollection>>do:
OrderedCollection(Collection)>>flatCollect:
PolymorphismAnalyzer>>polymorphicMethods_computer
PolymorphismAnalyzer>>allPolyMethods
PolymorphismAnalyzerTest>>testAbstractPolymorphicMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXInvocation>>candidateList
23 October 2012 11:01:12.816 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXInvocation(Object)>>doesNotUnderstand: #candidateList
	Receiver: readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
	Arguments and temporary variables: 
		aMessage: 	candidateList
		exception: 	MessageNotUnderstood: FAMIXInvocation>>candidateList
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5414140
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		previous: 	readShapeAttributes -> self#toWSOrCommaSeparatedArray(String) (Invoca...etc...
		next: 	readShapeAttributes -> STROKE_DASHES#put(Map<AttributeKey,Object>,T) (Inv...etc...
		sender: 	SVGInputFormat>>readShapeAttributes(IXMLElement,HashMap<AttributeKey,Ob...etc...
		receiver: 	SVGInputFormat.self (ImplicitVariable)
		receiverSourceCode: 	nil
		signature: 	'toNumber(IXMLElement,String)'
		candidates: 	an Array(SVGInputFormat>>toNumber(IXMLElement,String) (Method))


[:invocation | invocation candidateList notNil
		and: [invocation candidateList
				contains: [:met | self allPolyMethods includes: met]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocation: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocatio...etc...
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)...etc...
	Arguments and temporary variables: 
		aBlock: 	[:invocation | invocation candidateList notNil
		and: [invocation candi...etc...
		newCollection: 	an OrderedCollection()
		element: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(readShapeAttributes -> self#toNumber(IXMLElement,String) (Invoc...etc...
		firstIndex: 	1
		lastIndex: 	36685


MooseGroup>>select:
	Receiver: All famixinvocations (36685 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:invocation | invocation candidateList notNil
		and: [invocation candi...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	5523636
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(readShapeAttributes -> self#toNumber(IXMLEl...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzerTest>>testHd_allPolymorphicCalls
	Receiver: PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allPolymorphicCalls
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allPolymorphicCalls
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allPolymorphicCalls
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allPolymorphicCalls
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allPolymorphicCalls
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allPolymorphicCalls
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	24 run, 7 passes, 0 expected failures, 5 failures, 12 errors, 0 unexpec...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allPolymorphicCalls
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(942669824)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1112@352) mouseUp 2190449 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		owner: 	a MenuMorph(131334144)
		submorphs: 	#()
		fullBounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		color: 	Color black
		extension: 	a MorphExtension (945291264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(942669824)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1112@352) mouseUp 2190449 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		owner: 	a MenuMorph(131334144)
		submorphs: 	#()
		fullBounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		color: 	Color black
		extension: 	a MorphExtension (945291264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(942669824)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1112@352) mouseUp 2190449 nil]
	Receiver's instance variables: 
		bounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		owner: 	a MenuMorph(131334144)
		submorphs: 	#()
		fullBounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		color: 	Color black
		extension: 	a MorphExtension (945291264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(942669824)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
	Receiver's instance variables: 
		bounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		owner: 	a MenuMorph(131334144)
		submorphs: 	#()
		fullBounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		color: 	Color black
		extension: 	a MorphExtension (945291264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1112@352) mouseUp 2190449 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(942669824)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	2190449
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1112@352)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(942669824)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
	Receiver's instance variables: 
		bounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		owner: 	a MenuMorph(131334144)
		submorphs: 	#()
		fullBounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		color: 	Color black
		extension: 	a MorphExtension (945291264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		aMorph: 	a ToggleMenuItemMorph(942669824)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		aMorph: 	a ToggleMenuItemMorph(942669824)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(942669824)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		owner: 	a MenuMorph(131334144)
		submorphs: 	#()
		fullBounds: 	(1051.0@346.0) corner: (1287.0@360.0)
		color: 	Color black
		extension: 	a MorphExtension (945291264)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		aMorph: 	a MenuMorph(131334144)
		localEvt: 	[(1112@352) mouseUp 2190449 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(942669824)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(312475648)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		aMorph: 	a MenuMorph(131334144)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(131334144)
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1046.0@155.0) corner: (1292.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(312475648)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1046.0@155.0) corner: (1292.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (135004160) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(942669824)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(312475648)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(131334144)
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
	Receiver's instance variables: 
		bounds: 	(1046.0@155.0) corner: (1292.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(312475648)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1046.0@155.0) corner: (1292.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (135004160) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(942669824)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(312475648)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(131334144)
	Arguments and temporary variables: 
		evt: 	[(1112@352) mouseUp 2190449 nil]
	Receiver's instance variables: 
		bounds: 	(1046.0@155.0) corner: (1292.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(312475648)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1046.0@155.0) corner: (1292.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (135004160) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(942669824)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(312475648)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		focusHolder: 	a MenuMorph(131334144)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1198@469) corner: (1214@485)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1198@469) corner: (1214@485)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1198@469) mouseOver nil nil]
		targetOffset: 	(32.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5091418 1198 469 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1112@352) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		focusHolder: 	a MenuMorph(131334144)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1198@469) corner: (1214@485)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1198@469) corner: (1214@485)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1198@469) mouseOver nil nil]
		targetOffset: 	(32.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5091418 1198 469 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
		focusHolder: 	a MenuMorph(131334144)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1198@469) corner: (1214@485)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1198@469) corner: (1214@485)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1198@469) mouseOver nil nil]
		targetOffset: 	(32.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5091418 1198 469 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1112@352) mouseUp 2190449 nil]
	Receiver's instance variables: 
		bounds: 	(1198@469) corner: (1214@485)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1198@469) corner: (1214@485)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(648806400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1198@469) mouseOver nil nil]
		targetOffset: 	(32.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5091418 1198 469 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
FAMIXInvocation(Object)>>doesNotUnderstand: #candidateList
[:invocation | invocation candidateList notNil
		and: [invocation candidateList
				contains: [:met | self allPolyMethods includes: met]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
PolymorphismAnalyzerTest>>testHd_allPolymorphicCalls
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 October 2012 11:02:31.722 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTest(TestCase)>>signalFailure:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>assert:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(730857472)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1946@463) mouseUp 5170316 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		owner: 	a MenuMorph(242221056)
		submorphs: 	#()
		fullBounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		color: 	Color black
		extension: 	a MorphExtension (733216768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(730857472)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1946@463) mouseUp 5170316 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		owner: 	a MenuMorph(242221056)
		submorphs: 	#()
		fullBounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		color: 	Color black
		extension: 	a MorphExtension (733216768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(730857472)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1946@463) mouseUp 5170316 nil]
	Receiver's instance variables: 
		bounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		owner: 	a MenuMorph(242221056)
		submorphs: 	#()
		fullBounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		color: 	Color black
		extension: 	a MorphExtension (733216768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(730857472)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
	Receiver's instance variables: 
		bounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		owner: 	a MenuMorph(242221056)
		submorphs: 	#()
		fullBounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		color: 	Color black
		extension: 	a MorphExtension (733216768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1946@463) mouseUp 5170316 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(730857472)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5170316
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1946@463)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(730857472)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
	Receiver's instance variables: 
		bounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		owner: 	a MenuMorph(242221056)
		submorphs: 	#()
		fullBounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		color: 	Color black
		extension: 	a MorphExtension (733216768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		aMorph: 	a ToggleMenuItemMorph(730857472)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		aMorph: 	a ToggleMenuItemMorph(730857472)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(730857472)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		owner: 	a MenuMorph(242221056)
		submorphs: 	#()
		fullBounds: 	(1898.0@452.0) corner: (2135.0@466.0)
		color: 	Color black
		extension: 	a MorphExtension (733216768)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		aMorph: 	a MenuMorph(242221056)
		localEvt: 	[(1946@463) mouseUp 5170316 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(730857472)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(585105408)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		aMorph: 	a MenuMorph(242221056)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(242221056)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1893.0@212.0) corner: (2140.0@609.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(585105408)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1893.0@212.0) corner: (2140.0@609.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (245891072) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(730857472)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(585105408)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(242221056)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
	Receiver's instance variables: 
		bounds: 	(1893.0@212.0) corner: (2140.0@609.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(585105408)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1893.0@212.0) corner: (2140.0@609.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (245891072) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(730857472)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(585105408)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(242221056)
	Arguments and temporary variables: 
		evt: 	[(1946@463) mouseUp 5170316 nil]
	Receiver's instance variables: 
		bounds: 	(1893.0@212.0) corner: (2140.0@609.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(585105408)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1893.0@212.0) corner: (2140.0@609.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (245891072) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(730857472)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(585105408)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		focusHolder: 	a MenuMorph(242221056)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1946@463) corner: (1962@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1946@463) corner: (1962@479)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1946@463) mouseOver nil nil]
		targetOffset: 	(48.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170316 1946 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1946@463) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		focusHolder: 	a MenuMorph(242221056)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1946@463) corner: (1962@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1946@463) corner: (1962@479)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1946@463) mouseOver nil nil]
		targetOffset: 	(48.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170316 1946 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		focusHolder: 	a MenuMorph(242221056)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1946@463) corner: (1962@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1946@463) corner: (1962@479)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1946@463) mouseOver nil nil]
		targetOffset: 	(48.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170316 1946 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
	Receiver's instance variables: 
		bounds: 	(1946@463) corner: (1962@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1946@463) corner: (1962@479)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1946@463) mouseOver nil nil]
		targetOffset: 	(48.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170316 1946 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1946@463) mouseUp 5170316 nil]
		evt: 	[(1946@463) mouseUp 5170316 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1946@463) corner: (1962@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1946@463) corner: (1962@479)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1946@463) mouseOver nil nil]
		targetOffset: 	(48.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170316 1946 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1946@463) mouseUp 5170316 nil]
		evtBuf: 	#(1 5170316 1946 463 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1946@463) corner: (1962@479)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1946@463) corner: (1962@479)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1946@463) mouseOver nil nil]
		targetOffset: 	(48.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5170316 1946 463 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(855113728))(an Ove...etc...
		lastStepTime: 	5170481
		lastStepMessage: 	nil
		lastCycleTime: 	5170481
		alarms: 	a Heap()
		lastAlarmTime: 	5170481
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
PolymorphismAnalyzerTest(TestCase)>>signalFailure:
PolymorphismAnalyzerTest(TestCase)>>assert:
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 October 2012 11:03:32.204 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTest(TestCase)>>signalFailure:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>assert:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest>>testHd_allIndependentClasses
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allIndependentClasses>
		requestor: 	an OBColumn(testHd_allIndependentClasses)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allIndependentClasses>
		requestor: 	an OBColumn(testHd_allIndependentClasses)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(959447040)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1923@480) mouseUp 5230798 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		owner: 	a MenuMorph(475267072)
		submorphs: 	#()
		fullBounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		color: 	Color black
		extension: 	a MorphExtension (961806336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(959447040)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1923@480) mouseUp 5230798 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		owner: 	a MenuMorph(475267072)
		submorphs: 	#()
		fullBounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		color: 	Color black
		extension: 	a MorphExtension (961806336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(959447040)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1923@480) mouseUp 5230798 nil]
	Receiver's instance variables: 
		bounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		owner: 	a MenuMorph(475267072)
		submorphs: 	#()
		fullBounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		color: 	Color black
		extension: 	a MorphExtension (961806336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(959447040)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
	Receiver's instance variables: 
		bounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		owner: 	a MenuMorph(475267072)
		submorphs: 	#()
		fullBounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		color: 	Color black
		extension: 	a MorphExtension (961806336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1923@480) mouseUp 5230798 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(959447040)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5230798
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1923@480)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(959447040)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
	Receiver's instance variables: 
		bounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		owner: 	a MenuMorph(475267072)
		submorphs: 	#()
		fullBounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		color: 	Color black
		extension: 	a MorphExtension (961806336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		aMorph: 	a ToggleMenuItemMorph(959447040)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		aMorph: 	a ToggleMenuItemMorph(959447040)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(959447040)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		owner: 	a MenuMorph(475267072)
		submorphs: 	#()
		fullBounds: 	(1854.0@470.0) corner: (2091.0@484.0)
		color: 	Color black
		extension: 	a MorphExtension (961806336)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		aMorph: 	a MenuMorph(475267072)
		localEvt: 	[(1923@480) mouseUp 5230798 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(959447040)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(818151424)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		aMorph: 	a MenuMorph(475267072)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(475267072)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1849.0@230.0) corner: (2096.0@627.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(818151424)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1849.0@230.0) corner: (2096.0@627.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (478937088) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allIndependentClasses)
		selectedItem: 	a ToggleMenuItemMorph(959447040)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(818151424)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(475267072)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
	Receiver's instance variables: 
		bounds: 	(1849.0@230.0) corner: (2096.0@627.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(818151424)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1849.0@230.0) corner: (2096.0@627.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (478937088) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allIndependentClasses)
		selectedItem: 	a ToggleMenuItemMorph(959447040)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(818151424)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(475267072)
	Arguments and temporary variables: 
		evt: 	[(1923@480) mouseUp 5230798 nil]
	Receiver's instance variables: 
		bounds: 	(1849.0@230.0) corner: (2096.0@627.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(818151424)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1849.0@230.0) corner: (2096.0@627.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (478937088) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allIndependentClasses)
		selectedItem: 	a ToggleMenuItemMorph(959447040)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(818151424)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		focusHolder: 	a MenuMorph(475267072)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1923@480) corner: (1939@496)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1923@480) corner: (1939@496)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1923@480) mouseOver nil nil]
		targetOffset: 	(69.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5230798 1923 480 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1923@480) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		focusHolder: 	a MenuMorph(475267072)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1923@480) corner: (1939@496)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1923@480) corner: (1939@496)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1923@480) mouseOver nil nil]
		targetOffset: 	(69.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5230798 1923 480 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		focusHolder: 	a MenuMorph(475267072)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1923@480) corner: (1939@496)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1923@480) corner: (1939@496)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1923@480) mouseOver nil nil]
		targetOffset: 	(69.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5230798 1923 480 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
	Receiver's instance variables: 
		bounds: 	(1923@480) corner: (1939@496)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1923@480) corner: (1939@496)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1923@480) mouseOver nil nil]
		targetOffset: 	(69.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5230798 1923 480 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1923@480) mouseUp 5230798 nil]
		evt: 	[(1923@480) mouseUp 5230798 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1923@480) corner: (1939@496)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1923@480) corner: (1939@496)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1923@480) mouseOver nil nil]
		targetOffset: 	(69.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5230798 1923 480 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1923@480) mouseUp 5230798 nil]
		evtBuf: 	#(1 5230798 1923 480 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1923@480) corner: (1939@496)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1923@480) corner: (1939@496)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1923@480) mouseOver nil nil]
		targetOffset: 	(69.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5230798 1923 480 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(855113728))(an Ove...etc...
		lastStepTime: 	5230956
		lastStepMessage: 	nil
		lastCycleTime: 	5230956
		alarms: 	a Heap()
		lastAlarmTime: 	5230956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
PolymorphismAnalyzerTest(TestCase)>>signalFailure:
PolymorphismAnalyzerTest(TestCase)>>assert:
PolymorphismAnalyzerTest>>testHd_allIndependentClasses
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 October 2012 11:03:43.565 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTest(TestCase)>>signalFailure:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>assert:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest>>testHd_allIndependentClasses
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allIndependentClasses
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allIndependentClasses
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allIndependentClasses>
		requestor: 	an OBColumn(testHd_allIndependentClasses)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allIndependentClasses>
		requestor: 	an OBColumn(testHd_allIndependentClasses)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(27262976)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1985@477) mouseUp 5242140 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		owner: 	a MenuMorph(615514112)
		submorphs: 	#()
		fullBounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		color: 	Color black
		extension: 	a MorphExtension (29884416)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(27262976)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1985@477) mouseUp 5242140 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		owner: 	a MenuMorph(615514112)
		submorphs: 	#()
		fullBounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		color: 	Color black
		extension: 	a MorphExtension (29884416)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(27262976)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1985@477) mouseUp 5242140 nil]
	Receiver's instance variables: 
		bounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		owner: 	a MenuMorph(615514112)
		submorphs: 	#()
		fullBounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		color: 	Color black
		extension: 	a MorphExtension (29884416)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(27262976)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
	Receiver's instance variables: 
		bounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		owner: 	a MenuMorph(615514112)
		submorphs: 	#()
		fullBounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		color: 	Color black
		extension: 	a MorphExtension (29884416)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1985@477) mouseUp 5242140 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(27262976)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5242140
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1985@477)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(27262976)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
	Receiver's instance variables: 
		bounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		owner: 	a MenuMorph(615514112)
		submorphs: 	#()
		fullBounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		color: 	Color black
		extension: 	a MorphExtension (29884416)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		aMorph: 	a ToggleMenuItemMorph(27262976)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		aMorph: 	a ToggleMenuItemMorph(27262976)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(27262976)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		owner: 	a MenuMorph(615514112)
		submorphs: 	#()
		fullBounds: 	(1947.0@467.0) corner: (2184.0@481.0)
		color: 	Color black
		extension: 	a MorphExtension (29884416)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		aMorph: 	a MenuMorph(615514112)
		localEvt: 	[(1985@477) mouseUp 5242140 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(27262976)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(958398464)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		aMorph: 	a MenuMorph(615514112)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(615514112)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1942.0@227.0) corner: (2189.0@624.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(958398464)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1942.0@227.0) corner: (2189.0@624.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (619184128) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allIndependentClasses)
		selectedItem: 	a ToggleMenuItemMorph(27262976)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(958398464)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(615514112)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
	Receiver's instance variables: 
		bounds: 	(1942.0@227.0) corner: (2189.0@624.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(958398464)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1942.0@227.0) corner: (2189.0@624.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (619184128) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allIndependentClasses)
		selectedItem: 	a ToggleMenuItemMorph(27262976)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(958398464)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(615514112)
	Arguments and temporary variables: 
		evt: 	[(1985@477) mouseUp 5242140 nil]
	Receiver's instance variables: 
		bounds: 	(1942.0@227.0) corner: (2189.0@624.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(958398464)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1942.0@227.0) corner: (2189.0@624.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (619184128) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allIndependentClasses)
		selectedItem: 	a ToggleMenuItemMorph(27262976)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(958398464)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		focusHolder: 	a MenuMorph(615514112)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1985@477) corner: (2001@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1985@477) corner: (2001@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1985@477) mouseOver nil nil]
		targetOffset: 	(38.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5242140 1985 477 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1985@477) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		focusHolder: 	a MenuMorph(615514112)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1985@477) corner: (2001@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1985@477) corner: (2001@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1985@477) mouseOver nil nil]
		targetOffset: 	(38.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5242140 1985 477 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		focusHolder: 	a MenuMorph(615514112)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1985@477) corner: (2001@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1985@477) corner: (2001@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1985@477) mouseOver nil nil]
		targetOffset: 	(38.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5242140 1985 477 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
	Receiver's instance variables: 
		bounds: 	(1985@477) corner: (2001@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1985@477) corner: (2001@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1985@477) mouseOver nil nil]
		targetOffset: 	(38.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5242140 1985 477 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@477) mouseUp 5242140 nil]
		evt: 	[(1985@477) mouseUp 5242140 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1985@477) corner: (2001@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1985@477) corner: (2001@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1985@477) mouseOver nil nil]
		targetOffset: 	(38.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5242140 1985 477 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1985@477) mouseUp 5242140 nil]
		evtBuf: 	#(1 5242140 1985 477 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1985@477) corner: (2001@493)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1985@477) corner: (2001@493)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1985@477) mouseOver nil nil]
		targetOffset: 	(38.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5242140 1985 477 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(855113728))(an Ove...etc...
		lastStepTime: 	5242342
		lastStepMessage: 	nil
		lastCycleTime: 	5242342
		alarms: 	a Heap()
		lastAlarmTime: 	5242342
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
PolymorphismAnalyzerTest(TestCase)>>signalFailure:
PolymorphismAnalyzerTest(TestCase)>>assert:
PolymorphismAnalyzerTest>>testHd_allIndependentClasses
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXInvocation>>invokedBy
23 October 2012 11:04:31.774 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXInvocation(Object)>>doesNotUnderstand: #invokedBy
	Receiver: redo -> editedFigure#setText(String) (Invocation)
	Arguments and temporary variables: 
		aMessage: 	invokedBy
		exception: 	MessageNotUnderstood: FAMIXInvocation>>invokedBy
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5492850
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		previous: 	redo -> editedFigure#willChange() (Invocation)
		next: 	redo -> editedFigure#changed() (Invocation)
		sender: 	anonymous(AbstractUndoableEdit)>>redo() (Method)
		receiver: 	editedFigure (local variable in TextAreaCreationTool>>endEdit() (Meth...etc...
		receiverSourceCode: 	nil
		signature: 	'setText(String)'
		candidates: 	an Array(TextHolderFigure>>setText(String) (Method))


[:e | e invokedBy] in PolymorphismAnalyzer>>callSites_methods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		e: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


OrderedCollection>>collect:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e invokedBy]
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>collect:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:e | e invokedBy]
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6103931
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>callSites_methods
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


PolymorphismAnalyzerTest>>testHd_callSites
	Receiver: PolymorphismAnalyzerTest>>#testHd_callSites
	Arguments and temporary variables: 
		classes: 	nil
	Receiver's instance variables: 
		testSelector: 	#testHd_callSites
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_callSites
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callSites
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_callSites
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callSites
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_callSites
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callSites
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_callSites
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callSites
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_callSites
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callSites
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_callSites
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_callSites>
		requestor: 	an OBColumn(testHd_callSites)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_callSites>
		requestor: 	an OBColumn(testHd_callSites)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(306708480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1985@520) mouseUp 5282509 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		owner: 	a MenuMorph(893386752)
		submorphs: 	#()
		fullBounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		color: 	Color black
		extension: 	a MorphExtension (309329920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(306708480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1985@520) mouseUp 5282509 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		owner: 	a MenuMorph(893386752)
		submorphs: 	#()
		fullBounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		color: 	Color black
		extension: 	a MorphExtension (309329920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(306708480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1985@520) mouseUp 5282509 nil]
	Receiver's instance variables: 
		bounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		owner: 	a MenuMorph(893386752)
		submorphs: 	#()
		fullBounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		color: 	Color black
		extension: 	a MorphExtension (309329920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(306708480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
	Receiver's instance variables: 
		bounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		owner: 	a MenuMorph(893386752)
		submorphs: 	#()
		fullBounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		color: 	Color black
		extension: 	a MorphExtension (309329920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1985@520) mouseUp 5282509 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(306708480)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5282509
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1985@520)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(306708480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
	Receiver's instance variables: 
		bounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		owner: 	a MenuMorph(893386752)
		submorphs: 	#()
		fullBounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		color: 	Color black
		extension: 	a MorphExtension (309329920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		aMorph: 	a ToggleMenuItemMorph(306708480)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		aMorph: 	a ToggleMenuItemMorph(306708480)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(306708480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		owner: 	a MenuMorph(893386752)
		submorphs: 	#()
		fullBounds: 	(1929.0@513.0) corner: (2166.0@527.0)
		color: 	Color black
		extension: 	a MorphExtension (309329920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		aMorph: 	a MenuMorph(893386752)
		localEvt: 	[(1985@520) mouseUp 5282509 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(306708480)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(162529280)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		aMorph: 	a MenuMorph(893386752)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(893386752)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1924.0@273.0) corner: (2171.0@670.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(162529280)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1924.0@273.0) corner: (2171.0@670.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (897056768) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callSites)
		selectedItem: 	a ToggleMenuItemMorph(306708480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(162529280)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(893386752)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
	Receiver's instance variables: 
		bounds: 	(1924.0@273.0) corner: (2171.0@670.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(162529280)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1924.0@273.0) corner: (2171.0@670.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (897056768) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callSites)
		selectedItem: 	a ToggleMenuItemMorph(306708480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(162529280)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(893386752)
	Arguments and temporary variables: 
		evt: 	[(1985@520) mouseUp 5282509 nil]
	Receiver's instance variables: 
		bounds: 	(1924.0@273.0) corner: (2171.0@670.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(162529280)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1924.0@273.0) corner: (2171.0@670.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (897056768) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callSites)
		selectedItem: 	a ToggleMenuItemMorph(306708480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(162529280)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		focusHolder: 	a MenuMorph(893386752)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(531@1526) corner: (547@1542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(531@1526) corner: (547@1542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@1526) mouseUp 5289330 nil]
		targetOffset: 	(209.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5289330 531 1526 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(512229376) a Panel...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1985@520) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(512229376) a Panel...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		focusHolder: 	a MenuMorph(893386752)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(531@1526) corner: (547@1542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(531@1526) corner: (547@1542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableMultiColumnListMorph(202113024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@1526) mouseOver nil nil]
		targetOffset: 	(209.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5289330 531 1526 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		focusHolder: 	a MenuMorph(893386752)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(531@1526) corner: (547@1542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(531@1526) corner: (547@1542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableMultiColumnListMorph(202113024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@1526) mouseOver nil nil]
		targetOffset: 	(209.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5289330 531 1526 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
	Receiver's instance variables: 
		bounds: 	(531@1526) corner: (547@1542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(531@1526) corner: (547@1542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableMultiColumnListMorph(202113024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@1526) mouseOver nil nil]
		targetOffset: 	(209.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5289330 531 1526 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1985@520) mouseUp 5282509 nil]
		evt: 	[(1985@520) mouseUp 5282509 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(531@1526) corner: (547@1542)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(531@1526) corner: (547@1542)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableMultiColumnListMorph(202113024)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@1526) mouseOver nil nil]
		targetOffset: 	(209.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5289330 531 1526 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
FAMIXInvocation(Object)>>doesNotUnderstand: #invokedBy
[:e | e invokedBy] in PolymorphismAnalyzer>>callSites_methods
OrderedCollection>>collect:
MooseGroup>>collect:
PolymorphismAnalyzer>>callSites_methods
PolymorphismAnalyzerTest>>testHd_callSites
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXInvocation>>candidateList
23 October 2012 11:10:10.917 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXInvocation(Object)>>doesNotUnderstand: #candidateList
	Receiver: clone -> #InternalError(String) (Invocation)
	Arguments and temporary variables: 
		aMessage: 	candidateList
		exception: 	MessageNotUnderstood: FAMIXInvocation>>candidateList
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5431669
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		previous: 	clone -> super#clone() (Invocation)
		next: 	clone -> ex#getMessage() (Invocation)
		sender: 	CurvedLiner>>clone() (Method)
		receiver: 	nil
		receiverSourceCode: 	nil
		signature: 	'InternalError(String)'
		candidates: 	an Array(InternalError>>InternalError(String) (Method))


[:inv | inv candidateList notNil
		and: [inv candidateList
				contains: [:met | met notNil
						and: [met belongsTo = self belongsTo superclass
								and: [met name = self name]]]]] in FAMIXMethod>>isCallingSuper
	Receiver: CurvedLiner>>clone() (Method)
	Arguments and temporary variables: 
		inv: 	clone -> #InternalError(String) (Invocation)
	Receiver's instance variables: 
		mooseID: 	5437237
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'clone'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('public')
		parentPackage: 	nil
		annotationInstances: 	an Array(a FAMIXAnnotationInstance #'java::lang::Override(...etc...
		outgoingReferences: 	an Array(clone -> InternalError (Reference))
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	an Array(clone -> #InternalError(String) (Invocation) clon...etc...
		incomingInvocations: 	#()
		localVariables: 	an Array(ex (local variable in CurvedLiner>>clone() (Method)) e...etc...
		parameters: 	#()
		signature: 	'clone()'
		accesses: 	#()
		declaredType: 	Liner in org::jhotdraw::draw::liner (Class)
		kind: 	nil
		parentType: 	CurvedLiner in org::jhotdraw::draw::liner (Class)


[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(clone -> #InternalError(String) (Invocation) clone -> error#initCause(Throwable) ...etc...
	Arguments and temporary variables: 
		aBlock: 	clone -> #InternalError(String) (Invocation)
		each: 	[:inv | inv candidateList notNil
		and: [inv candidateList
				contains: ...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(clone -> #InternalError(String) (Invocation) clone...etc...
		owner: 	CurvedLiner>>clone() (Method)
		opposite: 	#sender:


OrderedCollection>>do:
	Receiver: an OrderedCollection(clone -> #InternalError(String) (Invocation) clone -> error#initCause...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(clone -> #InternalError(String) (Invocation) clone -> error#ini...etc...
		firstIndex: 	1
		lastIndex: 	4


FMMultivalueLink>>do:
	Receiver: an Array(clone -> #InternalError(String) (Invocation) clone -> error#initCause(Throwable) ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
	Receiver's instance variables: 
		values: 	an OrderedCollection(clone -> #InternalError(String) (Invocation) clone...etc...
		owner: 	CurvedLiner>>clone() (Method)
		opposite: 	#sender:


FMMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(clone -> #InternalError(String) (Invocation) clone -> error#initCause(Throwable) ...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidateList notNil
		and: [inv candidateList
				contains...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(clone -> #InternalError(String) (Invocation) clone...etc...
		owner: 	CurvedLiner>>clone() (Method)
		opposite: 	#sender:


FAMIXMethod>>isCallingSuper
	Receiver: CurvedLiner>>clone() (Method)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mooseID: 	5437237
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'clone'
		isStub: 	false
		receivingInvocations: 	#()
		modifiers: 	an OrderedCollection('public')
		parentPackage: 	nil
		annotationInstances: 	an Array(a FAMIXAnnotationInstance #'java::lang::Override(...etc...
		outgoingReferences: 	an Array(clone -> InternalError (Reference))
		types: 	#()
		incomingReferences: 	#()
		outgoingInvocations: 	an Array(clone -> #InternalError(String) (Invocation) clon...etc...
		incomingInvocations: 	#()
		localVariables: 	an Array(ex (local variable in CurvedLiner>>clone() (Method)) e...etc...
		parameters: 	#()
		signature: 	'clone()'
		accesses: 	#()
		declaredType: 	Liner in org::jhotdraw::draw::liner (Class)
		kind: 	nil
		parentType: 	CurvedLiner in org::jhotdraw::draw::liner (Class)


[:e | e isCallingSuper] in PolymorphismAnalyzerTest>>testHd_callingSuper
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 
		e: 	CurvedLiner>>clone() (Method)
	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


OrderedCollection>>select:
	Receiver: an OrderedCollection(StraightLineFigure>>drawFill(Graphics2D) (Method) StdXMLReader>>getPu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e isCallingSuper]
		newCollection: 	an OrderedCollection()
		element: 	CurvedLiner>>clone() (Method)
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(StraightLineFigure>>drawFill(Graphics2D) (Method) StdXMLReader>...etc...
		firstIndex: 	1
		lastIndex: 	2762


PolymorphismAnalyzerTest>>testHd_callingSuper
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_callingSuper
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_callingSuper>
		requestor: 	an OBColumn(testHd_callingSuper)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_callingSuper>
		requestor: 	an OBColumn(testHd_callingSuper)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1979@523) mouseUp 5628051 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(437780480)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5628051
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1979@523)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a ToggleMenuItemMorph(437780480)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a ToggleMenuItemMorph(437780480)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a MenuMorph(1027604480)
		localEvt: 	[(1979@523) mouseUp 5628051 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(437780480)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a MenuMorph(1027604480)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1027604480)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (1031274496) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callingSuper)
		selectedItem: 	a ToggleMenuItemMorph(437780480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(296747008)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1027604480)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (1031274496) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callingSuper)
		selectedItem: 	a ToggleMenuItemMorph(437780480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(296747008)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1027604480)
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (1031274496) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callingSuper)
		selectedItem: 	a ToggleMenuItemMorph(437780480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(296747008)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		focusHolder: 	a MenuMorph(1027604480)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1956@338) corner: (1972@354)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1956@338) corner: (1972@354)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1956@338) mouseOver nil nil]
		targetOffset: 	(54.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5628763 1979 508 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1979@523) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
FAMIXInvocation(Object)>>doesNotUnderstand: #candidateList
[:inv | inv candidateList notNil
		and: [inv candidateList
				contains: [:met | met notNil
						and: [met belongsTo = self belongsTo superclass
								and: [met name = self name]]]]] in FAMIXMethod>>isCallingSuper
[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultivalueLink(Collection)>>anySatisfy:
OrderedCollection>>do:
FMMultivalueLink>>do:
FMMultivalueLink(Collection)>>anySatisfy:
FAMIXMethod>>isCallingSuper
[:e | e isCallingSuper] in PolymorphismAnalyzerTest>>testHd_callingSuper
OrderedCollection>>select:
PolymorphismAnalyzerTest>>testHd_callingSuper
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
23 October 2012 11:10:27.708 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTest(TestCase)>>signalFailure:
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>assert:
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest>>testHd_callingSuper
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_callingSuper
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_callingSuper
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_callingSuper
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_callingSuper>
		requestor: 	an OBColumn(testHd_callingSuper)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_callingSuper>
		requestor: 	an OBColumn(testHd_callingSuper)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1979@523) mouseUp 5628051 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(437780480)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5628051
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1979@523)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a ToggleMenuItemMorph(437780480)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a ToggleMenuItemMorph(437780480)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(437780480)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		owner: 	a MenuMorph(1027604480)
		submorphs: 	#()
		fullBounds: 	(1925.0@520.0) corner: (2162.0@534.0)
		color: 	Color black
		extension: 	a MorphExtension (440401920)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a MenuMorph(1027604480)
		localEvt: 	[(1979@523) mouseUp 5628051 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(437780480)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		aMorph: 	a MenuMorph(1027604480)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1027604480)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (1031274496) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callingSuper)
		selectedItem: 	a ToggleMenuItemMorph(437780480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(296747008)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1027604480)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (1031274496) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callingSuper)
		selectedItem: 	a ToggleMenuItemMorph(437780480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(296747008)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1027604480)
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(296747008)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1920.0@280.0) corner: (2167.0@677.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (1031274496) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_callingSuper)
		selectedItem: 	a ToggleMenuItemMorph(437780480)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(296747008)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		focusHolder: 	a MenuMorph(1027604480)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(554@500) corner: (570@516)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(554@500) mouseOver nil nil]
		targetOffset: 	(130.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5646333 554 500 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1979@523) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		focusHolder: 	a MenuMorph(1027604480)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(554@500) corner: (570@516)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(554@500) mouseOver nil nil]
		targetOffset: 	(130.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5646333 554 500 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		focusHolder: 	a MenuMorph(1027604480)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(554@500) corner: (570@516)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(554@500) mouseOver nil nil]
		targetOffset: 	(130.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5646333 554 500 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
	Receiver's instance variables: 
		bounds: 	(554@500) corner: (570@516)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(554@500) mouseOver nil nil]
		targetOffset: 	(130.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5646333 554 500 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1979@523) mouseUp 5628051 nil]
		evt: 	[(1979@523) mouseUp 5628051 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(554@500) corner: (570@516)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(554@500) mouseOver nil nil]
		targetOffset: 	(130.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5646333 554 500 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1979@523) mouseUp 5628051 nil]
		evtBuf: 	#(1 5628051 1979 523 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(554@500) corner: (570@516)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(554@500) mouseOver nil nil]
		targetOffset: 	(130.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5646333 554 500 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	5646454
		lastStepMessage: 	nil
		lastCycleTime: 	5646454
		alarms: 	a Heap()
		lastAlarmTime: 	5646454
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
PolymorphismAnalyzerTest(TestCase)>>signalFailure:
PolymorphismAnalyzerTest(TestCase)>>assert:
PolymorphismAnalyzerTest>>testHd_callingSuper
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: [:e | e root name = #Figure] not found in OrderedCollection
23 October 2012 11:12:20.207 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Collection)>>errorNotFound:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		anObject: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
		exceptionBlock: 	[self errorNotFound: aBlock]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


MooseGroup(MooseAbstractGroup)>>detect:
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		mooseID: 	6150543
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


PolymorphismAnalyzerTest>>testHd_hierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchies
	Arguments and temporary variables: 
		figure: 	nil
		drawingEditor: 	nil
		hier: 	nil
		m2: 	nil
		m1: 	nil
		m3: 	nil
	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_hierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_hierarchies>
		requestor: 	an OBColumn(testHd_hierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_hierarchies>
		requestor: 	an OBColumn(testHd_hierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(385613824)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1959@548) mouseUp 5757021 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		owner: 	a MenuMorph(972029952)
		submorphs: 	#()
		fullBounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		color: 	Color black
		extension: 	a MorphExtension (387973120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(385613824)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1959@548) mouseUp 5757021 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		owner: 	a MenuMorph(972029952)
		submorphs: 	#()
		fullBounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		color: 	Color black
		extension: 	a MorphExtension (387973120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(385613824)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1959@548) mouseUp 5757021 nil]
	Receiver's instance variables: 
		bounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		owner: 	a MenuMorph(972029952)
		submorphs: 	#()
		fullBounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		color: 	Color black
		extension: 	a MorphExtension (387973120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(385613824)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
	Receiver's instance variables: 
		bounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		owner: 	a MenuMorph(972029952)
		submorphs: 	#()
		fullBounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		color: 	Color black
		extension: 	a MorphExtension (387973120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1959@548) mouseUp 5757021 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(385613824)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5757021
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1959@548)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(385613824)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
	Receiver's instance variables: 
		bounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		owner: 	a MenuMorph(972029952)
		submorphs: 	#()
		fullBounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		color: 	Color black
		extension: 	a MorphExtension (387973120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		aMorph: 	a ToggleMenuItemMorph(385613824)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		aMorph: 	a ToggleMenuItemMorph(385613824)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(385613824)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		owner: 	a MenuMorph(972029952)
		submorphs: 	#()
		fullBounds: 	(1913.0@542.0) corner: (2150.0@556.0)
		color: 	Color black
		extension: 	a MorphExtension (387973120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		aMorph: 	a MenuMorph(972029952)
		localEvt: 	[(1959@548) mouseUp 5757021 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(385613824)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(241434624)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		aMorph: 	a MenuMorph(972029952)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(972029952)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1908.0@302.0) corner: (2155.0@699.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(241434624)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1908.0@302.0) corner: (2155.0@699.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_hierarchies)
		selectedItem: 	a ToggleMenuItemMorph(385613824)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(241434624)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(972029952)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
	Receiver's instance variables: 
		bounds: 	(1908.0@302.0) corner: (2155.0@699.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(241434624)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1908.0@302.0) corner: (2155.0@699.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_hierarchies)
		selectedItem: 	a ToggleMenuItemMorph(385613824)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(241434624)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(972029952)
	Arguments and temporary variables: 
		evt: 	[(1959@548) mouseUp 5757021 nil]
	Receiver's instance variables: 
		bounds: 	(1908.0@302.0) corner: (2155.0@699.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(241434624)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1908.0@302.0) corner: (2155.0@699.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_hierarchies)
		selectedItem: 	a ToggleMenuItemMorph(385613824)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(241434624)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		focusHolder: 	a MenuMorph(972029952)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1906@524) corner: (1922@540)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1906@524) corner: (1922@540)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1906@524) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5757287 1958 548 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1959@548) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		focusHolder: 	a MenuMorph(972029952)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1906@524) corner: (1922@540)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1906@524) corner: (1922@540)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1906@524) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5757287 1958 548 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		focusHolder: 	a MenuMorph(972029952)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1906@524) corner: (1922@540)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1906@524) corner: (1922@540)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1906@524) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5757287 1958 548 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
	Receiver's instance variables: 
		bounds: 	(1906@524) corner: (1922@540)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1906@524) corner: (1922@540)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1906@524) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5757287 1958 548 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1959@548) mouseUp 5757021 nil]
		evt: 	[(1959@548) mouseUp 5757021 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1906@524) corner: (1922@540)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1906@524) corner: (1922@540)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1906@524) mouseOver nil nil]
		targetOffset: 	(46.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5757287 1958 548 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
OrderedCollection(Collection)>>errorNotFound:
[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
OrderedCollection(Collection)>>detect:ifNone:
OrderedCollection(Collection)>>detect:
MooseGroup(MooseAbstractGroup)>>detect:
PolymorphismAnalyzerTest>>testHd_hierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: [:e | e root name = #Figure] not found in OrderedCollection
23 October 2012 11:13:19.384 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Collection)>>errorNotFound:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		anObject: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
		exceptionBlock: 	[self errorNotFound: aBlock]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


MooseGroup(MooseAbstractGroup)>>detect:
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		mooseID: 	6169997
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


PolymorphismAnalyzerTest>>testHd_hierarchyLeaves
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Arguments and temporary variables: 
		figureHierarchy: 	nil
	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchyLeaves
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchyLeaves
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchyLeaves
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchyLeaves
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchyLeaves
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_hierarchyLeaves
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_hierarchyLeaves
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_hierarchyLeaves>
		requestor: 	an OBColumn(testHd_hierarchyLeaves)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_hierarchyLeaves>
		requestor: 	an OBColumn(testHd_hierarchyLeaves)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(358088704)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1971@554) mouseUp 5816155 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		owner: 	a MenuMorph(944766976)
		submorphs: 	#()
		fullBounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		color: 	Color black
		extension: 	a MorphExtension (360710144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(358088704)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1971@554) mouseUp 5816155 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		owner: 	a MenuMorph(944766976)
		submorphs: 	#()
		fullBounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		color: 	Color black
		extension: 	a MorphExtension (360710144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(358088704)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1971@554) mouseUp 5816155 nil]
	Receiver's instance variables: 
		bounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		owner: 	a MenuMorph(944766976)
		submorphs: 	#()
		fullBounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		color: 	Color black
		extension: 	a MorphExtension (360710144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(358088704)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
	Receiver's instance variables: 
		bounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		owner: 	a MenuMorph(944766976)
		submorphs: 	#()
		fullBounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		color: 	Color black
		extension: 	a MorphExtension (360710144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1971@554) mouseUp 5816155 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(358088704)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5816155
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1971@554)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(358088704)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
	Receiver's instance variables: 
		bounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		owner: 	a MenuMorph(944766976)
		submorphs: 	#()
		fullBounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		color: 	Color black
		extension: 	a MorphExtension (360710144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		aMorph: 	a ToggleMenuItemMorph(358088704)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		aMorph: 	a ToggleMenuItemMorph(358088704)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(358088704)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		owner: 	a MenuMorph(944766976)
		submorphs: 	#()
		fullBounds: 	(1937.0@554.0) corner: (2174.0@568.0)
		color: 	Color black
		extension: 	a MorphExtension (360710144)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		aMorph: 	a MenuMorph(944766976)
		localEvt: 	[(1971@554) mouseUp 5816155 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(358088704)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(213909504)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		aMorph: 	a MenuMorph(944766976)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(944766976)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1932.0@314.0) corner: (2179.0@711.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(213909504)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1932.0@314.0) corner: (2179.0@711.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (948436992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_hierarchyLeaves)
		selectedItem: 	a ToggleMenuItemMorph(358088704)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(213909504)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(944766976)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
	Receiver's instance variables: 
		bounds: 	(1932.0@314.0) corner: (2179.0@711.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(213909504)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1932.0@314.0) corner: (2179.0@711.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (948436992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_hierarchyLeaves)
		selectedItem: 	a ToggleMenuItemMorph(358088704)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(213909504)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(944766976)
	Arguments and temporary variables: 
		evt: 	[(1971@554) mouseUp 5816155 nil]
	Receiver's instance variables: 
		bounds: 	(1932.0@314.0) corner: (2179.0@711.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(213909504)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1932.0@314.0) corner: (2179.0@711.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (948436992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_hierarchyLeaves)
		selectedItem: 	a ToggleMenuItemMorph(358088704)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(213909504)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		focusHolder: 	a MenuMorph(944766976)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1912@532) corner: (1928@548)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1912@532) corner: (1928@548)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1912@532) mouseOver nil nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5816523 1964 552 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1971@554) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		focusHolder: 	a MenuMorph(944766976)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1912@532) corner: (1928@548)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1912@532) corner: (1928@548)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1912@532) mouseOver nil nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5816523 1964 552 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		focusHolder: 	a MenuMorph(944766976)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1912@532) corner: (1928@548)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1912@532) corner: (1928@548)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1912@532) mouseOver nil nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5816523 1964 552 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
	Receiver's instance variables: 
		bounds: 	(1912@532) corner: (1928@548)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1912@532) corner: (1928@548)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1912@532) mouseOver nil nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5816523 1964 552 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1971@554) mouseUp 5816155 nil]
		evt: 	[(1971@554) mouseUp 5816155 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1912@532) corner: (1928@548)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1912@532) corner: (1928@548)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1912@532) mouseOver nil nil]
		targetOffset: 	(34.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5816523 1964 552 0 0 0 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
OrderedCollection(Collection)>>errorNotFound:
[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
OrderedCollection(Collection)>>detect:ifNone:
OrderedCollection(Collection)>>detect:
MooseGroup(MooseAbstractGroup)>>detect:
PolymorphismAnalyzerTest>>testHd_hierarchyLeaves
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>visualizeInSnaut
23 October 2012 11:13:53.716 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #visualizeInSnaut
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	visualizeInSnaut
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>visualizeInSnaut
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_startSnautAndHighlightStuff
	Receiver: PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_startSnautAndHighlightStuff
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_startSnautAndHighlightStuff
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_startSnautAndHighlightStuff
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_startSnautAndHighlightStuff
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_startSnautAndHighlightStuff
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_startSnautAndHighlightStuff
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_startSnautAndHighlightStuff
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_startSnautAndHighlightStuf...etc...
		requestor: 	an OBColumn(testHd_startSnautAndHighlightStuff)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_startSnautAndHighlightStuf...etc...
		requestor: 	an OBColumn(testHd_startSnautAndHighlightStuff)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(516685824)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1898@623) mouseUp 5852387 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		owner: 	a MenuMorph(125566976)
		submorphs: 	#()
		fullBounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		color: 	Color black
		extension: 	a MorphExtension (519045120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(516685824)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1898@623) mouseUp 5852387 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		owner: 	a MenuMorph(125566976)
		submorphs: 	#()
		fullBounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		color: 	Color black
		extension: 	a MorphExtension (519045120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(516685824)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1898@623) mouseUp 5852387 nil]
	Receiver's instance variables: 
		bounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		owner: 	a MenuMorph(125566976)
		submorphs: 	#()
		fullBounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		color: 	Color black
		extension: 	a MorphExtension (519045120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(516685824)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
	Receiver's instance variables: 
		bounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		owner: 	a MenuMorph(125566976)
		submorphs: 	#()
		fullBounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		color: 	Color black
		extension: 	a MorphExtension (519045120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1898@623) mouseUp 5852387 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(516685824)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5852387
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1898@623)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(516685824)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
	Receiver's instance variables: 
		bounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		owner: 	a MenuMorph(125566976)
		submorphs: 	#()
		fullBounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		color: 	Color black
		extension: 	a MorphExtension (519045120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		aMorph: 	a ToggleMenuItemMorph(516685824)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		aMorph: 	a ToggleMenuItemMorph(516685824)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(516685824)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		owner: 	a MenuMorph(125566976)
		submorphs: 	#()
		fullBounds: 	(1884.0@623.0) corner: (2121.0@637.0)
		color: 	Color black
		extension: 	a MorphExtension (519045120)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		aMorph: 	a MenuMorph(125566976)
		localEvt: 	[(1898@623) mouseUp 5852387 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(516685824)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(468451328)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		aMorph: 	a MenuMorph(125566976)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(125566976)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1879.0@383.0) corner: (2126.0@780.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(468451328)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1879.0@383.0) corner: (2126.0@780.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (129236992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_startSnautAndHighlightStuff)
		selectedItem: 	a ToggleMenuItemMorph(516685824)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(468451328)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(125566976)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
	Receiver's instance variables: 
		bounds: 	(1879.0@383.0) corner: (2126.0@780.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(468451328)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1879.0@383.0) corner: (2126.0@780.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (129236992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_startSnautAndHighlightStuff)
		selectedItem: 	a ToggleMenuItemMorph(516685824)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(468451328)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(125566976)
	Arguments and temporary variables: 
		evt: 	[(1898@623) mouseUp 5852387 nil]
	Receiver's instance variables: 
		bounds: 	(1879.0@383.0) corner: (2126.0@780.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(468451328)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1879.0@383.0) corner: (2126.0@780.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (129236992) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_startSnautAndHighlightStuff)
		selectedItem: 	a ToggleMenuItemMorph(516685824)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(468451328)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		focusHolder: 	a MenuMorph(125566976)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1898@623) corner: (1914@639)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1898@623) corner: (1914@639)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1898@623) mouseOver nil nil]
		targetOffset: 	(14.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5852387 1898 623 0 0 1 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1898@623) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		focusHolder: 	a MenuMorph(125566976)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1898@623) corner: (1914@639)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1898@623) corner: (1914@639)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1898@623) mouseOver nil nil]
		targetOffset: 	(14.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5852387 1898 623 0 0 1 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		focusHolder: 	a MenuMorph(125566976)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1898@623) corner: (1914@639)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1898@623) corner: (1914@639)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1898@623) mouseOver nil nil]
		targetOffset: 	(14.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5852387 1898 623 0 0 1 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
	Receiver's instance variables: 
		bounds: 	(1898@623) corner: (1914@639)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1898@623) corner: (1914@639)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1898@623) mouseOver nil nil]
		targetOffset: 	(14.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5852387 1898 623 0 0 1 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1898@623) mouseUp 5852387 nil]
		evt: 	[(1898@623) mouseUp 5852387 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1898@623) corner: (1914@639)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1898@623) corner: (1914@639)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1898@623) mouseOver nil nil]
		targetOffset: 	(14.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5852387 1898 623 0 0 1 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1898@623) mouseUp 5852387 nil]
		evtBuf: 	#(1 5852387 1898 623 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1898@623) corner: (1914@639)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1898@623) corner: (1914@639)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1898@623) mouseOver nil nil]
		targetOffset: 	(14.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5852387 1898 623 0 0 1 1)
		lastKeyScanCode: 	126
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(53215232))(a SystemWind...etc...
		lastStepTime: 	5852482
		lastStepMessage: 	nil
		lastCycleTime: 	5852482
		alarms: 	a Heap()
		lastAlarmTime: 	5852482
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(53215232))(a SystemWind...etc...
		lastStepTime: 	5852482
		lastStepMessage: 	nil
		lastCycleTime: 	5852482
		alarms: 	a Heap()
		lastAlarmTime: 	5852482
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #visualizeInSnaut
PolymorphismAnalyzerTest>>testHd_startSnautAndHighlightStuff
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>visualizeAllPolyMethods
23 October 2012 11:14:40.005 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #visualizeAllPolyMethods
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	visualizeAllPolyMethods
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>visualizeAllPolyMe...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_visualizeAllPolyMethods
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeAllPolyMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeAllPolyMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeAllPolyMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeAllPolyMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeAllPolyMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeAllPolyMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_visualizeAllPolyMethods
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_visualizeAllPolyMethods>
		requestor: 	an OBColumn(testHd_visualizeAllPolyMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_visualizeAllPolyMethods>
		requestor: 	an OBColumn(testHd_visualizeAllPolyMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429916160)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2027@639) mouseUp 5898680 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		owner: 	a MenuMorph(38797312)
		submorphs: 	#()
		fullBounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		color: 	Color black
		extension: 	a MorphExtension (432275456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(429916160)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2027@639) mouseUp 5898680 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		owner: 	a MenuMorph(38797312)
		submorphs: 	#()
		fullBounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		color: 	Color black
		extension: 	a MorphExtension (432275456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(429916160)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2027@639) mouseUp 5898680 nil]
	Receiver's instance variables: 
		bounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		owner: 	a MenuMorph(38797312)
		submorphs: 	#()
		fullBounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		color: 	Color black
		extension: 	a MorphExtension (432275456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(429916160)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
	Receiver's instance variables: 
		bounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		owner: 	a MenuMorph(38797312)
		submorphs: 	#()
		fullBounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		color: 	Color black
		extension: 	a MorphExtension (432275456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2027@639) mouseUp 5898680 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(429916160)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5898680
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2027@639)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(429916160)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
	Receiver's instance variables: 
		bounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		owner: 	a MenuMorph(38797312)
		submorphs: 	#()
		fullBounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		color: 	Color black
		extension: 	a MorphExtension (432275456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		aMorph: 	a ToggleMenuItemMorph(429916160)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		aMorph: 	a ToggleMenuItemMorph(429916160)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(429916160)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		owner: 	a MenuMorph(38797312)
		submorphs: 	#()
		fullBounds: 	(1989.0@631.0) corner: (2226.0@645.0)
		color: 	Color black
		extension: 	a MorphExtension (432275456)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		aMorph: 	a MenuMorph(38797312)
		localEvt: 	[(2027@639) mouseUp 5898680 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(429916160)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(381681664)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		aMorph: 	a MenuMorph(38797312)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(38797312)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1984.0@391.0) corner: (2231.0@788.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381681664)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1984.0@391.0) corner: (2231.0@788.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (42467328) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_visualizeAllPolyMethods)
		selectedItem: 	a ToggleMenuItemMorph(429916160)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(381681664)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(38797312)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
	Receiver's instance variables: 
		bounds: 	(1984.0@391.0) corner: (2231.0@788.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381681664)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1984.0@391.0) corner: (2231.0@788.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (42467328) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_visualizeAllPolyMethods)
		selectedItem: 	a ToggleMenuItemMorph(429916160)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(381681664)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(38797312)
	Arguments and temporary variables: 
		evt: 	[(2027@639) mouseUp 5898680 nil]
	Receiver's instance variables: 
		bounds: 	(1984.0@391.0) corner: (2231.0@788.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(381681664)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1984.0@391.0) corner: (2231.0@788.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (42467328) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_visualizeAllPolyMethods)
		selectedItem: 	a ToggleMenuItemMorph(429916160)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(381681664)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		focusHolder: 	a MenuMorph(38797312)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2027@639) corner: (2043@655)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2027@639) mouseOver nil nil]
		targetOffset: 	(38.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5898680 2027 639 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2027@639) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		focusHolder: 	a MenuMorph(38797312)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2027@639) corner: (2043@655)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2027@639) mouseOver nil nil]
		targetOffset: 	(38.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5898680 2027 639 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		focusHolder: 	a MenuMorph(38797312)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2027@639) corner: (2043@655)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2027@639) mouseOver nil nil]
		targetOffset: 	(38.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5898680 2027 639 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
	Receiver's instance variables: 
		bounds: 	(2027@639) corner: (2043@655)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2027@639) mouseOver nil nil]
		targetOffset: 	(38.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5898680 2027 639 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2027@639) mouseUp 5898680 nil]
		evt: 	[(2027@639) mouseUp 5898680 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2027@639) corner: (2043@655)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2027@639) mouseOver nil nil]
		targetOffset: 	(38.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5898680 2027 639 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2027@639) mouseUp 5898680 nil]
		evtBuf: 	#(1 5898680 2027 639 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2027@639) corner: (2043@655)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2027@639) mouseOver nil nil]
		targetOffset: 	(38.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5898680 2027 639 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(329252864))(an OBSys...etc...
		lastStepTime: 	5898765
		lastStepMessage: 	nil
		lastCycleTime: 	5898765
		alarms: 	a Heap()
		lastAlarmTime: 	5898765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(329252864))(an OBSys...etc...
		lastStepTime: 	5898765
		lastStepMessage: 	nil
		lastCycleTime: 	5898765
		alarms: 	a Heap()
		lastAlarmTime: 	5898765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #visualizeAllPolyMethods
PolymorphismAnalyzerTest>>testHd_visualizeAllPolyMethods
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: [:e | e root name = #Figure] not found in OrderedCollection
23 October 2012 11:16:00.787 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Collection)>>errorNotFound:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		anObject: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
		exceptionBlock: 	[self errorNotFound: aBlock]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


MooseGroup(MooseAbstractGroup)>>detect:
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		mooseID: 	6266997
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


PolymorphismAnalyzerTest>>testHd_parentHierarchy
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 
		cfigure: 	nil
		hcfigure: 	nil
		m1: 	nil
		hfigure: 	nil
		figure: 	nil
	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_parentHierarchy>
		requestor: 	an OBColumn(testHd_parentHierarchy)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_parentHierarchy>
		requestor: 	an OBColumn(testHd_parentHierarchy)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(810811392)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2000@581) mouseUp 5977702 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		owner: 	a MenuMorph(142344192)
		submorphs: 	#()
		fullBounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (813432832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(810811392)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2000@581) mouseUp 5977702 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		owner: 	a MenuMorph(142344192)
		submorphs: 	#()
		fullBounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (813432832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(810811392)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2000@581) mouseUp 5977702 nil]
	Receiver's instance variables: 
		bounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		owner: 	a MenuMorph(142344192)
		submorphs: 	#()
		fullBounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (813432832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(810811392)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
	Receiver's instance variables: 
		bounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		owner: 	a MenuMorph(142344192)
		submorphs: 	#()
		fullBounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (813432832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2000@581) mouseUp 5977702 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(810811392)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	5977702
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2000@581)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(810811392)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
	Receiver's instance variables: 
		bounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		owner: 	a MenuMorph(142344192)
		submorphs: 	#()
		fullBounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (813432832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		aMorph: 	a ToggleMenuItemMorph(810811392)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		aMorph: 	a ToggleMenuItemMorph(810811392)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(810811392)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		owner: 	a MenuMorph(142344192)
		submorphs: 	#()
		fullBounds: 	(1948.0@577.0) corner: (2185.0@591.0)
		color: 	Color black
		extension: 	a MorphExtension (813432832)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		aMorph: 	a MenuMorph(142344192)
		localEvt: 	[(2000@581) mouseUp 5977702 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(810811392)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(485228544)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		aMorph: 	a MenuMorph(142344192)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(142344192)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1943.0@337.0) corner: (2190.0@734.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(485228544)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1943.0@337.0) corner: (2190.0@734.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (146014208) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(810811392)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(485228544)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(142344192)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
	Receiver's instance variables: 
		bounds: 	(1943.0@337.0) corner: (2190.0@734.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(485228544)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1943.0@337.0) corner: (2190.0@734.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (146014208) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(810811392)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(485228544)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(142344192)
	Arguments and temporary variables: 
		evt: 	[(2000@581) mouseUp 5977702 nil]
	Receiver's instance variables: 
		bounds: 	(1943.0@337.0) corner: (2190.0@734.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(485228544)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1943.0@337.0) corner: (2190.0@734.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (146014208) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(810811392)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(485228544)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		focusHolder: 	a MenuMorph(142344192)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2000@581) corner: (2016@597)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2000@581) corner: (2016@597)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2000@581) mouseOver nil nil]
		targetOffset: 	(52.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5977702 2000 581 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2000@581) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		focusHolder: 	a MenuMorph(142344192)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2000@581) corner: (2016@597)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2000@581) corner: (2016@597)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2000@581) mouseOver nil nil]
		targetOffset: 	(52.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5977702 2000 581 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		focusHolder: 	a MenuMorph(142344192)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2000@581) corner: (2016@597)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2000@581) corner: (2016@597)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2000@581) mouseOver nil nil]
		targetOffset: 	(52.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5977702 2000 581 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
	Receiver's instance variables: 
		bounds: 	(2000@581) corner: (2016@597)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2000@581) corner: (2016@597)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2000@581) mouseOver nil nil]
		targetOffset: 	(52.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5977702 2000 581 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2000@581) mouseUp 5977702 nil]
		evt: 	[(2000@581) mouseUp 5977702 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2000@581) corner: (2016@597)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2000@581) corner: (2016@597)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2000@581) mouseOver nil nil]
		targetOffset: 	(52.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 5977702 2000 581 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
OrderedCollection(Collection)>>errorNotFound:
[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
OrderedCollection(Collection)>>detect:ifNone:
OrderedCollection(Collection)>>detect:
MooseGroup(MooseAbstractGroup)>>detect:
PolymorphismAnalyzerTest>>testHd_parentHierarchy
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: [:e | e root name = #Figure] not found in OrderedCollection
23 October 2012 11:26:35.008 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Collection)>>errorNotFound:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		anObject: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
		exceptionBlock: 	[self errorNotFound: aBlock]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


MooseGroup(MooseAbstractGroup)>>detect:
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		mooseID: 	6312859
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


PolymorphismAnalyzerTest>>testHd_parentHierarchy
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 
		cfigure: 	nil
		hcfigure: 	nil
		m1: 	nil
		hfigure: 	nil
		figure: 	nil
	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_parentHierarchy>
		requestor: 	an OBColumn(testHd_parentHierarchy)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_parentHierarchy>
		requestor: 	an OBColumn(testHd_parentHierarchy)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(515375104)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2010@590) mouseUp 6611800 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		owner: 	a MenuMorph(26738688)
		submorphs: 	#()
		fullBounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		color: 	Color black
		extension: 	a MorphExtension (517734400)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(515375104)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2010@590) mouseUp 6611800 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		owner: 	a MenuMorph(26738688)
		submorphs: 	#()
		fullBounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		color: 	Color black
		extension: 	a MorphExtension (517734400)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(515375104)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2010@590) mouseUp 6611800 nil]
	Receiver's instance variables: 
		bounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		owner: 	a MenuMorph(26738688)
		submorphs: 	#()
		fullBounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		color: 	Color black
		extension: 	a MorphExtension (517734400)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(515375104)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
	Receiver's instance variables: 
		bounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		owner: 	a MenuMorph(26738688)
		submorphs: 	#()
		fullBounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		color: 	Color black
		extension: 	a MorphExtension (517734400)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2010@590) mouseUp 6611800 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(515375104)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	6611800
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2010@590)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(515375104)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
	Receiver's instance variables: 
		bounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		owner: 	a MenuMorph(26738688)
		submorphs: 	#()
		fullBounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		color: 	Color black
		extension: 	a MorphExtension (517734400)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		aMorph: 	a ToggleMenuItemMorph(515375104)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		aMorph: 	a ToggleMenuItemMorph(515375104)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(515375104)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		owner: 	a MenuMorph(26738688)
		submorphs: 	#()
		fullBounds: 	(1934.0@583.0) corner: (2171.0@597.0)
		color: 	Color black
		extension: 	a MorphExtension (517734400)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		aMorph: 	a MenuMorph(26738688)
		localEvt: 	[(2010@590) mouseUp 6611800 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(515375104)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(369623040)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		aMorph: 	a MenuMorph(26738688)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(26738688)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1929.0@343.0) corner: (2176.0@740.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(369623040)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1929.0@343.0) corner: (2176.0@740.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (30408704) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(515375104)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(369623040)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(26738688)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
	Receiver's instance variables: 
		bounds: 	(1929.0@343.0) corner: (2176.0@740.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(369623040)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1929.0@343.0) corner: (2176.0@740.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (30408704) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(515375104)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(369623040)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(26738688)
	Arguments and temporary variables: 
		evt: 	[(2010@590) mouseUp 6611800 nil]
	Receiver's instance variables: 
		bounds: 	(1929.0@343.0) corner: (2176.0@740.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(369623040)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1929.0@343.0) corner: (2176.0@740.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (30408704) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(515375104)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(369623040)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		focusHolder: 	a MenuMorph(26738688)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1445@666) corner: (1461@682)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1445@666) mouseOver nil nil]
		targetOffset: 	(76.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6612125 2000 590 0 0 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2010@590) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		focusHolder: 	a MenuMorph(26738688)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1445@666) corner: (1461@682)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1445@666) mouseOver nil nil]
		targetOffset: 	(76.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6612125 2000 590 0 0 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		focusHolder: 	a MenuMorph(26738688)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1445@666) corner: (1461@682)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1445@666) mouseOver nil nil]
		targetOffset: 	(76.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6612125 2000 590 0 0 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
	Receiver's instance variables: 
		bounds: 	(1445@666) corner: (1461@682)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1445@666) mouseOver nil nil]
		targetOffset: 	(76.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6612125 2000 590 0 0 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2010@590) mouseUp 6611800 nil]
		evt: 	[(2010@590) mouseUp 6611800 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1445@666) corner: (1461@682)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1445@666) mouseOver nil nil]
		targetOffset: 	(76.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6612125 2000 590 0 0 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
OrderedCollection(Collection)>>errorNotFound:
[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
OrderedCollection(Collection)>>detect:ifNone:
OrderedCollection(Collection)>>detect:
MooseGroup(MooseAbstractGroup)>>detect:
PolymorphismAnalyzerTest>>testHd_parentHierarchy
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: [:e | e root name = #Figure] not found in OrderedCollection
23 October 2012 11:26:54.79 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Collection)>>errorNotFound:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		anObject: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
		exceptionBlock: 	[self errorNotFound: aBlock]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


MooseGroup(MooseAbstractGroup)>>detect:
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		mooseID: 	6313535
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


MooseGroup>>DoIt
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mooseID: 	6313535
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	Group (22 Hierarchies)
		aRequestor: 	a TextMorphForEditView(324272128)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self
		detect: [:e | e root name = #Figure]
		method: 	(MooseGroup>>#DoIt "a CompiledMethod(859832320)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(324272128)
		class: 	MooseGroup
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	Group (22 Hierarchies)
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(324272128)
		selectionShowing: 	true
		model: 	an Inspector
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	Group (22 Hierarchies)
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(324272128)
		selectionShowing: 	true
		model: 	an Inspector
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(645922816)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(822.0@800.0) corner: (1771.0@873.0)
		owner: 	a SystemWindow(22282240)
		submorphs: 	an Array(a TransformMorph(91226112))
		fullBounds: 	(822@800) corner: (1771@873)
		color: 	Color white
		extension: 	a MorphExtension (319029248) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(652738560)
		scroller: 	a TransformMorph(91226112)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(373555200)
		textMorph: 	a TextMorphForEditView(324272128)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 41)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(645922816)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(822.0@800.0) corner: (1771.0@873.0)
		owner: 	a SystemWindow(22282240)
		submorphs: 	an Array(a TransformMorph(91226112))
		fullBounds: 	(822@800) corner: (1771@873)
		color: 	Color white
		extension: 	a MorphExtension (319029248) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(652738560)
		scroller: 	a TransformMorph(91226112)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(373555200)
		textMorph: 	a TextMorphForEditView(324272128)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 41)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(324272128)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (941@18)
		owner: 	a TransformMorph(91226112)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (941@18)
		color: 	Color black
		extension: 	a MorphExtension (344981504) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self detect: [:e| e root name =  #Figure]'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(645922816)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(645922816)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(822.0@800.0) corner: (1771.0@873.0)
		owner: 	a SystemWindow(22282240)
		submorphs: 	an Array(a TransformMorph(91226112))
		fullBounds: 	(822@800) corner: (1771@873)
		color: 	Color white
		extension: 	a MorphExtension (319029248) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(652738560)
		scroller: 	a TransformMorph(91226112)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(373555200)
		textMorph: 	a TextMorphForEditView(324272128)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 41)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(645922816)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(822.0@800.0) corner: (1771.0@873.0)
		owner: 	a SystemWindow(22282240)
		submorphs: 	an Array(a TransformMorph(91226112))
		fullBounds: 	(822@800) corner: (1771@873)
		color: 	Color white
		extension: 	a MorphExtension (319029248) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(652738560)
		scroller: 	a TransformMorph(91226112)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(373555200)
		textMorph: 	a TextMorphForEditView(324272128)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 41)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(645922816)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(645922816)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(645922816)
		secondArg: 	a PluggableTextMorph(645922816)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(645922816)
		secondArg: 	a PluggableTextMorph(645922816)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(645922816)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(645922816)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(645922816)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(645922816)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(645922816)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	7
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil a KMCategoryTarget nil nil a KMCateg...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(645922816)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(645922816)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(645922816)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(645922816)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(822.0@800.0) corner: (1771.0@873.0)
		owner: 	a SystemWindow(22282240)
		submorphs: 	an Array(a TransformMorph(91226112))
		fullBounds: 	(822@800) corner: (1771@873)
		color: 	Color white
		extension: 	a MorphExtension (319029248) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(652738560)
		scroller: 	a TransformMorph(91226112)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(373555200)
		textMorph: 	a TextMorphForEditView(324272128)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 41)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(91226112)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(91226112)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(91226112)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(823@801) corner: (1770@872)
		owner: 	a PluggableTextMorph(645922816)
		submorphs: 	an Array(a TextMorphForEditView(324272128))
		fullBounds: 	(823@801) corner: (1770@872)
		color: 	Color transparent
		extension: 	a MorphExtension (93061120) [other:  (kmDispatcher -> a KMDispatcher...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-826@ -801.0)...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (941@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(324272128)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(324272128)
		directKeymaps: 	a KMCategory



--- The full stack ---
OrderedCollection(Collection)>>errorNotFound:
[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
OrderedCollection(Collection)>>detect:ifNone:
OrderedCollection(Collection)>>detect:
MooseGroup(MooseAbstractGroup)>>detect:
MooseGroup>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MooseGroupRuntimeStorage>>first
23 October 2012 11:27:18.238 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

MooseGroupRuntimeStorage(Object)>>doesNotUnderstand: #first
	Receiver: a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
	Arguments and temporary variables: 
		aMessage: 	first
		exception: 	MessageNotUnderstood: MooseGroupRuntimeStorage>>first
		resumeValue: 	nil
	Receiver's instance variables: 
		byName: 	an IdentityDictionary()
		elements: 	an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Cl...etc...
		byType: 	a Dictionary(Hierarchy->an OrderedCollection(a Hierarchy(Polygon2D in o...etc...


MooseGroupRuntimeStorage>>DoIt
	Receiver: a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		byName: 	an IdentityDictionary()
		elements: 	an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Cl...etc...
		byType: 	a Dictionary(Hierarchy->an OrderedCollection(a Hierarchy(Polygon2D in o...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::ge...etc...
		aRequestor: 	a TextMorphForEditView(642252800)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self first root
		method: 	(MooseGroupRuntimeStorage>>#DoIt "a CompiledMethod(750256128)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(642252800)
		class: 	MooseGroupRuntimeStorage
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (...etc...
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(642252800)
		selectionShowing: 	true
		model: 	an Inspector
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
selectionInterval := oldEditor selectionInterval.
	textMorp...etc...
		result: 	nil
		rcvr: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (...etc...
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(642252800)
		selectionShowing: 	true
		model: 	an Inspector
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(91750400)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	(842.0@820.0) corner: (1182.0@893.0)
		owner: 	a SystemWindow(262668288)
		submorphs: 	an Array(a TransformMorph(611057664))
		fullBounds: 	(842@820) corner: (1182@893)
		color: 	Color white
		extension: 	a MorphExtension (637009920) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(98828288)
		scroller: 	a TransformMorph(611057664)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(893386752)
		textMorph: 	a TextMorphForEditView(642252800)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 15)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first root'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(91750400)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	(842.0@820.0) corner: (1182.0@893.0)
		owner: 	a SystemWindow(262668288)
		submorphs: 	an Array(a TransformMorph(611057664))
		fullBounds: 	(842@820) corner: (1182@893)
		color: 	Color white
		extension: 	a MorphExtension (637009920) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(98828288)
		scroller: 	a TransformMorph(611057664)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(893386752)
		textMorph: 	a TextMorphForEditView(642252800)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 15)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph printIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(91750400)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(91750400)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(91750400)
		secondArg: 	a PluggableTextMorph(91750400)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(91750400)
		secondArg: 	a PluggableTextMorph(91750400)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [:morph | morph printIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(91750400)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(91750400)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#printIt on Cmd + P do [:morph | morph printIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#printIt on Cmd + P do [:morph | morph printIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(91750400)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(91750400)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil a KMCategoryTarget nil a KMCategoryTarge...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(91750400)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(842.0@820.0) corner: (1182.0@893.0)
		owner: 	a SystemWindow(262668288)
		submorphs: 	an Array(a TransformMorph(611057664))
		fullBounds: 	(842@820) corner: (1182@893)
		color: 	Color white
		extension: 	a MorphExtension (637009920) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(98828288)
		scroller: 	a TransformMorph(611057664)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(893386752)
		textMorph: 	a TextMorphForEditView(642252800)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 15)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(611057664)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set()
		morph: 	a TransformMorph(611057664)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(611057664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(843@821) corner: (1181@892)
		owner: 	a PluggableTextMorph(91750400)
		submorphs: 	an Array(a TextMorphForEditView(642252800))
		fullBounds: 	(843@821) corner: (1181@892)
		color: 	Color transparent
		extension: 	a MorphExtension (612892672) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-846@ -821.0)...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (332@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(642252800)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(642252800)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first root'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first root'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(642252800)
	Receiver's instance variables: 
		timeStamp: 	6656902
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(262@152.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first root'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first root'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(642252800)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1108@973) corner: (1124@989)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1108@973) corner: (1124@989)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1108@973) mouseOver CMD nil nil]
		targetOffset: 	(68@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6656510 1108 973 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
MooseGroupRuntimeStorage(Object)>>doesNotUnderstand: #first
MooseGroupRuntimeStorage>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[:morph | morph printIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MooseGroupRuntimeStorage>>first
23 October 2012 11:27:25.522 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

MooseGroupRuntimeStorage(Object)>>doesNotUnderstand: #first
	Receiver: a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
	Arguments and temporary variables: 
		aMessage: 	first
		exception: 	MessageNotUnderstood: MooseGroupRuntimeStorage>>first
		resumeValue: 	nil
	Receiver's instance variables: 
		byName: 	an IdentityDictionary()
		elements: 	an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Cl...etc...
		byType: 	a Dictionary(Hierarchy->an OrderedCollection(a Hierarchy(Polygon2D in o...etc...


MooseGroupRuntimeStorage>>DoIt
	Receiver: a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		byName: 	an IdentityDictionary()
		elements: 	an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Cl...etc...
		byType: 	a Dictionary(Hierarchy->an OrderedCollection(a Hierarchy(Polygon2D in o...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::ge...etc...
		aRequestor: 	a TextMorphForEditView(642252800)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self first
		method: 	(MooseGroupRuntimeStorage>>#DoIt "a CompiledMethod(44826624)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(642252800)
		class: 	MooseGroupRuntimeStorage
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (...etc...
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(642252800)
		selectionShowing: 	true
		model: 	an Inspector
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | 
selectionInterval := oldEditor selectionInterval.
	textMorp...etc...
		result: 	nil
		rcvr: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geom (...etc...
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(642252800)
		selectionShowing: 	true
		model: 	an Inspector
		editingState: 	a SmalltalkEditingState


[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(91750400)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	(842.0@820.0) corner: (1182.0@893.0)
		owner: 	a SystemWindow(262668288)
		submorphs: 	an Array(a TransformMorph(611057664))
		fullBounds: 	(842@820) corner: (1182@893)
		color: 	Color white
		extension: 	a MorphExtension (637009920) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(98828288)
		scroller: 	a TransformMorph(611057664)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(893386752)
		textMorph: 	a TextMorphForEditView(642252800)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		editBlock: 	[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result ...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>printIt
	Receiver: a PluggableTextMorph(91750400)
	Arguments and temporary variables: 
		oldEditor: 	an Array(a SmalltalkEditor)
	Receiver's instance variables: 
		bounds: 	(842.0@820.0) corner: (1182.0@893.0)
		owner: 	a SystemWindow(262668288)
		submorphs: 	an Array(a TransformMorph(611057664))
		fullBounds: 	(842@820) corner: (1182@893)
		color: 	Color white
		extension: 	a MorphExtension (637009920) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(98828288)
		scroller: 	a TransformMorph(611057664)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(893386752)
		textMorph: 	a TextMorphForEditView(642252800)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph printIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(91750400)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(91750400)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(91750400)
		secondArg: 	a PluggableTextMorph(91750400)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph printIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(91750400)
		secondArg: 	a PluggableTextMorph(91750400)
		thirdArg: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	167
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Cmd + P do [:morph | morph printIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(91750400)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(91750400)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Cmd + P do [:morph | morph printIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph printIt]
		name: 	#printIt
		shortcut: 	Cmd + P
		defaultShortcut: 	Cmd + P
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#printIt on Cmd + P do [:morph | morph printIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	4
		each: 	#printIt on Cmd + P do [:morph | morph printIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(91750400)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(91750400)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-p>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	5
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget nil nil a KMCategoryTarge...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-p>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(91750400)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(91750400)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(842.0@820.0) corner: (1182.0@893.0)
		owner: 	a SystemWindow(262668288)
		submorphs: 	an Array(a TransformMorph(611057664))
		fullBounds: 	(842@820) corner: (1182@893)
		color: 	Color white
		extension: 	a MorphExtension (637009920) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	an Inspector
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(98828288)
		scroller: 	a TransformMorph(611057664)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(893386752)
		textMorph: 	a TextMorphForEditView(642252800)
		getTextSelector: 	#trash
		setTextSelector: 	#trash:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(1 to: 10)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(611057664)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set()
		morph: 	a TransformMorph(611057664)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(611057664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(843@821) corner: (1181@892)
		owner: 	a PluggableTextMorph(91750400)
		submorphs: 	an Array(a TextMorphForEditView(642252800))
		fullBounds: 	(843@821) corner: (1181@892)
		color: 	Color transparent
		extension: 	a MorphExtension (612892672) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-846@ -821.0)...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (332@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(642252800)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-p>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(642252800)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(642252800)
	Receiver's instance variables: 
		timeStamp: 	6664188
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(288@24.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(642252800)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (332@18)
		owner: 	a TransformMorph(611057664)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (332@18)
		color: 	Color black
		extension: 	a MorphExtension (662962176) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'self first'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(91750400)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(642252800)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1134@845) corner: (1150@861)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(642252800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1134@845) mouseOver CMD nil nil]
		targetOffset: 	(54@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6662253 1134 845 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
MooseGroupRuntimeStorage(Object)>>doesNotUnderstand: #first
MooseGroupRuntimeStorage>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[(oldEditor := textMorph editor)
		evaluateSelectionAndDo: [:result | 
			selectionInterval := oldEditor selectionInterval.
			textMorph installEditorToReplace: oldEditor.
			textMorph
				handleEdit: [oldEditor afterSelectionInsertAndSelect: result printString].
			selectionInterval := oldEditor selectionInterval.
			textMorph editor selectFrom: selectionInterval first to: selectionInterval last.
			self scrollSelectionIntoView]] in PluggableTextMorph>>printIt
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>printIt
[:morph | morph printIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: [:e | e root name = #Figure] not found in OrderedCollection
23 October 2012 11:29:22.048 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Collection)>>errorNotFound:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		anObject: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
		exceptionBlock: 	[self errorNotFound: aBlock]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in org::j...etc...
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		array: 	an Array(a Hierarchy(Polygon2D in org::jhotdraw::geom (Class) Double in ...etc...
		firstIndex: 	1
		lastIndex: 	22


MooseGroup(MooseAbstractGroup)>>detect:
	Receiver: Group (22 Hierarchies)
	Arguments and temporary variables: 
		aBlock: 	[:e | e root name = #Figure]
	Receiver's instance variables: 
		mooseID: 	6332990
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a Hierarchy(Polygon2D in org::jhotdraw::geo...etc...


PolymorphismAnalyzerTest>>testHd_parentHierarchy
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 
		cfigure: 	nil
		hcfigure: 	nil
		m1: 	nil
		hfigure: 	nil
		figure: 	nil
	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	a PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_parentHierarchy
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_parentHierarchy
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_parentHierarchy>
		requestor: 	an OBColumn(testHd_parentHierarchy)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_parentHierarchy>
		requestor: 	an OBColumn(testHd_parentHierarchy)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(839647232)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2026@584) mouseUp 6778129 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		owner: 	a MenuMorph(352583680)
		submorphs: 	#()
		fullBounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (842268672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(839647232)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2026@584) mouseUp 6778129 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		owner: 	a MenuMorph(352583680)
		submorphs: 	#()
		fullBounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (842268672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(839647232)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2026@584) mouseUp 6778129 nil]
	Receiver's instance variables: 
		bounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		owner: 	a MenuMorph(352583680)
		submorphs: 	#()
		fullBounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (842268672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(839647232)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
	Receiver's instance variables: 
		bounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		owner: 	a MenuMorph(352583680)
		submorphs: 	#()
		fullBounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (842268672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2026@584) mouseUp 6778129 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(839647232)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	6778129
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2026@584)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(839647232)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
	Receiver's instance variables: 
		bounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		owner: 	a MenuMorph(352583680)
		submorphs: 	#()
		fullBounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (842268672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		aMorph: 	a ToggleMenuItemMorph(839647232)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		aMorph: 	a ToggleMenuItemMorph(839647232)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(839647232)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		owner: 	a MenuMorph(352583680)
		submorphs: 	#()
		fullBounds: 	(1976.0@580.0) corner: (2213.0@594.0)
		color: 	Color black
		extension: 	a MorphExtension (842268672)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		aMorph: 	a MenuMorph(352583680)
		localEvt: 	[(2026@584) mouseUp 6778129 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(839647232)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(695468032)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		aMorph: 	a MenuMorph(352583680)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(352583680)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1971.0@340.0) corner: (2218.0@737.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(695468032)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1971.0@340.0) corner: (2218.0@737.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(839647232)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(695468032)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(352583680)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
	Receiver's instance variables: 
		bounds: 	(1971.0@340.0) corner: (2218.0@737.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(695468032)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1971.0@340.0) corner: (2218.0@737.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(839647232)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(695468032)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(352583680)
	Arguments and temporary variables: 
		evt: 	[(2026@584) mouseUp 6778129 nil]
	Receiver's instance variables: 
		bounds: 	(1971.0@340.0) corner: (2218.0@737.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(695468032)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1971.0@340.0) corner: (2218.0@737.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_parentHierarchy)
		selectedItem: 	a ToggleMenuItemMorph(839647232)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(695468032)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		focusHolder: 	a MenuMorph(352583680)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2026@584) corner: (2042@600)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2026@584) corner: (2042@600)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2026@584) mouseOver nil nil]
		targetOffset: 	(50.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6778129 2026 584 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2026@584) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		focusHolder: 	a MenuMorph(352583680)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2026@584) corner: (2042@600)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2026@584) corner: (2042@600)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2026@584) mouseOver nil nil]
		targetOffset: 	(50.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6778129 2026 584 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		focusHolder: 	a MenuMorph(352583680)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2026@584) corner: (2042@600)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2026@584) corner: (2042@600)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2026@584) mouseOver nil nil]
		targetOffset: 	(50.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6778129 2026 584 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
	Receiver's instance variables: 
		bounds: 	(2026@584) corner: (2042@600)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2026@584) corner: (2042@600)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2026@584) mouseOver nil nil]
		targetOffset: 	(50.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6778129 2026 584 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2026@584) mouseUp 6778129 nil]
		evt: 	[(2026@584) mouseUp 6778129 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2026@584) corner: (2042@600)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2026@584) corner: (2042@600)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2026@584) mouseOver nil nil]
		targetOffset: 	(50.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6778129 2026 584 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
OrderedCollection(Collection)>>errorNotFound:
[self errorNotFound: aBlock] in OrderedCollection(Collection)>>detect:
OrderedCollection(Collection)>>detect:ifNone:
OrderedCollection(Collection)>>detect:
MooseGroup(MooseAbstractGroup)>>detect:
PolymorphismAnalyzerTest>>testHd_parentHierarchy
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
23 October 2012 11:45:30.479 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/mod...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/models/...etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/models/...etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	SmalltalkEditor>>evaluateSelectionAndDo:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStr...etc...


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/models/...etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/models/...etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/models/...etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'models/Paparazzo/mse/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'models/Paparazzo/mse/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forJHotDraw
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest class>>DoIt
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats resources runningTheT...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testHd_parentHierarchy) #failures->a Set(...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	PolymorphismAnalyzerTest
		aRequestor: 	an OBTextMorph(985661440)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw complexityResultsCSV inspe...etc...
		method: 	(PolymorphismAnalyzerTest class>>#DoIt "a CompiledMethod(959971328)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	an OBTextMorph(985661440)
		class: 	PolymorphismAnalyzerTest class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzerTest
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	PolymorphismAnalyzerTest
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(20 to: 81)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(20 to: 81)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@34)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@34)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7749662) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'complexityResults
	PolymorphismAnalyzer forJHotDraw complexit...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(20 to: 81)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(20 to: 81)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	an OBPluggableTextMorph(439877632)
		secondArg: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	an OBPluggableTextMorph(439877632)
		secondArg: 	an OBPluggableTextMorph(439877632)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	an OBPluggableTextMorph(439877632)
		category: 	a KMCategory
		morph: 	an OBPluggableTextMorph(439877632)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzer class>>forJHotDraw
PolymorphismAnalyzerTest class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
OBPluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
OBTextMorph(Morph)>>dispatchKeystrokeForEvent:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "implUseResultsCSV" is nil
23 October 2012 11:47:32.302 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #implUseResultsCSV
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	implUseResultsCSV
		exception: 	MessageNotUnderstood: receiver of "implUseResultsCSV" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PolymorphismAnalyzerTest>>runningTheThing
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class>>DoIt
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats resources runningTheT...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testHd_parentHierarchy) #failures->a Set(...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	PolymorphismAnalyzerTest
		aRequestor: 	an OBTextMorph(985661440)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ self new runningTheThing
		method: 	(PolymorphismAnalyzerTest class>>#DoIt "a CompiledMethod(1025769472)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	an OBTextMorph(985661440)
		class: 	PolymorphismAnalyzerTest class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzerTest
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	PolymorphismAnalyzerTest
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@50)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@50)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7845673) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'runningTheThing
	"self new runningTheThing"
	jHotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	an OBPluggableTextMorph(439877632)
		secondArg: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	an OBPluggableTextMorph(439877632)
		secondArg: 	an OBPluggableTextMorph(439877632)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	an OBPluggableTextMorph(439877632)
		category: 	a KMCategory
		morph: 	an OBPluggableTextMorph(439877632)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	an OBPluggableTextMorph(439877632)
		category: 	a KMCategory
		morph: 	an OBPluggableTextMorph(439877632)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	7
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil a KMCategoryTarget a KMCategoryTarget nil nil nil a KMCateg...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


OBPluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(962068480)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(962068480)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(962068480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBPluggableTextMorph(439877632)
		submorphs: 	an Array(an OBTextMorph(985661440))
		fullBounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		color: 	Color transparent
		extension: 	a MorphExtension (963903488) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-377.0@ -625....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (1941@50)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	an OBTextMorph(985661440)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	an OBTextMorph(985661440)
		directKeymaps: 	a KMCategory


OBTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@50)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@50)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7845673) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'runningTheThing
	"self new runningTheThing"
	jHotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@50)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@50)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7845673) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'runningTheThing
	"self new runningTheThing"
	jHotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #implUseResultsCSV
PolymorphismAnalyzerTest>>runningTheThing
PolymorphismAnalyzerTest class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
OBPluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
OBTextMorph(Morph)>>dispatchKeystrokeForEvent:
OBTextMorph(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "implUseResultsCSV" is nil
23 October 2012 11:48:03.12 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #implUseResultsCSV
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	implUseResultsCSV
		exception: 	MessageNotUnderstood: receiver of "implUseResultsCSV" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PolymorphismAnalyzerTest>>runningTheThing
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class>>DoIt
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats resources runningTheT...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testHd_parentHierarchy) #failures->a Set(...etc...


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	PolymorphismAnalyzerTest
		aRequestor: 	an OBTextMorph(985661440)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzerTest new runningTheThing
		method: 	(PolymorphismAnalyzerTest class>>#DoIt "a CompiledMethod(350748672)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	an OBTextMorph(985661440)
		class: 	PolymorphismAnalyzerTest class
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzerTest
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	PolymorphismAnalyzerTest
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	an OBTextMorph(985661440)
		selectionShowing: 	true
		model: 	an OBDefinitionPanel
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 63)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 63)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorph(TextMorph)>>handleEdit:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@50)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@50)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7883732) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'runningTheThing
	"PolymorphismAnalyzerTest  new runningTheThi...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 63)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>doIt
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 63)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	an OBPluggableTextMorph(439877632)
		secondArg: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	an OBPluggableTextMorph(439877632)
		secondArg: 	an OBPluggableTextMorph(439877632)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	an OBPluggableTextMorph(439877632)
		category: 	a KMCategory
		morph: 	an OBPluggableTextMorph(439877632)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	an OBPluggableTextMorph(439877632)
		category: 	a KMCategory
		morph: 	an OBPluggableTextMorph(439877632)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	7
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil a KMCategoryTarget a KMCategoryTarge...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	an OBPluggableTextMorph(439877632)
		directKeymaps: 	a KMCategory


OBPluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(374@625) corner: (2321@1507)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(19 to: 63)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(962068480)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(962068480)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(962068480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		owner: 	an OBPluggableTextMorph(439877632)
		submorphs: 	an Array(an OBTextMorph(985661440))
		fullBounds: 	(374.0@625.0) corner: (2321.0@1507.0)
		color: 	Color transparent
		extension: 	a MorphExtension (963903488) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-377.0@ -625....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (1941@50)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	an OBTextMorph(985661440)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	an OBTextMorph(985661440)
		directKeymaps: 	a KMCategory


OBTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@50)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@50)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7883732) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'runningTheThing
	"PolymorphismAnalyzerTest  new runningTheThi...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@50)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@50)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 7883732) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'runningTheThing
	"PolymorphismAnalyzerTest  new runningTheThi...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #implUseResultsCSV
PolymorphismAnalyzerTest>>runningTheThing
PolymorphismAnalyzerTest class>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in OBPluggableTextMorph(PluggableTextMorph)>>doIt
[result := editBlock value] in OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBTextMorph(TextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>handleEdit:
OBPluggableTextMorph(PluggableTextMorph)>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
OBPluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
OBTextMorph(Morph)>>dispatchKeystrokeForEvent:
OBTextMorph(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
23 October 2012 11:52:15.768 am

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>halt
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


PolymorphismAnalyzer>>allCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


[result add: self modelMethods size;
		 add: self allPolyMethods size;
		 add: self rootPolyMethods size;
		 add: self allHierarchies size;
		 add: self allHierarchies size;
		 add: self polymorphicHierarchies size;
		 add: model allModelClasses size;
		 add: self polymorphicClasses size;
		 add: self callSites_methods size;
		 add: self callSites_classes size;
		 add: self allPolymorphicCalls size;
		 add: self allCalls size;
		 add: self allPolyMethods size > 0;
		 add: self callSites_methods size > 0] in PolymorphismAnalyzer>>implUseResultsCSV
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		result: 	an OrderedCollection(7645 2762 702 35 35 22 968 412 2213 553 6855)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


BlockClosure>>on:do:
	Receiver: [result add: self modelMethods size;
		 add: self allPolyMethods size;
		 add: self rootPo...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:e | stream nextPutAll: model name , ' ' , e printString]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzer>>implUseResultsCSV
		startpc: 	138
		numArgs: 	0


PolymorphismAnalyzer>>implUseResultsCSV
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		result: 	an OrderedCollection(7645 2762 702 35 35 22 968 412 2213 553 6855)
		stream: 	a WriteStream
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


PolymorphismAnalyzerTest>>runningTheThing
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(584581120)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzerTest new runningTheThing
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(955252736)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(584581120)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(584581120)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(584581120)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(584581120)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(584581120)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (605028352) [other:  (blinkStart -> 8153429) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzerTest new runningTheThing'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(31457280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(31457280)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(31457280)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(31457280)
		secondArg: 	a PluggableTextMorph(31457280)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(31457280)
		secondArg: 	a PluggableTextMorph(31457280)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(31457280)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(31457280)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(31457280)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(31457280)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	7
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil nil a KMCategoryTarget a KMCategoryTarget a KMCateg...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(552075264)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(552075264)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(552075264)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(49.0@586.0) corner: (487.0@751.0)
		owner: 	a PluggableTextMorph(31457280)
		submorphs: 	an Array(a TextMorphForEditView(584581120))
		fullBounds: 	(49.0@586.0) corner: (487.0@751.0)
		color: 	Color transparent
		extension: 	a MorphExtension (553910272) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-52.0@ -586.0...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)



--- The full stack ---
PolymorphismAnalyzer(Object)>>halt
PolymorphismAnalyzer>>allCalls
[result add: self modelMethods size;
		 add: self allPolyMethods size;
		 add: self rootPolyMethods size;
		 add: self allHierarchies size;
		 add: self allHierarchies size;
		 add: self polymorphicHierarchies size;
		 add: model allModelClasses size;
		 add: self polymorphicClasses size;
		 add: self callSites_methods size;
		 add: self callSites_classes size;
		 add: self allPolymorphicCalls size;
		 add: self allCalls size;
		 add: self allPolyMethods size > 0;
		 add: self callSites_methods size > 0] in PolymorphismAnalyzer>>implUseResultsCSV
BlockClosure>>on:do:
PolymorphismAnalyzer>>implUseResultsCSV
PolymorphismAnalyzerTest>>runningTheThing
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
23 October 2012 12:03:43.056 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>halt
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


PolymorphismAnalyzer>>allHierarchies
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


[result add: self modelMethods size;
		 add: self allPolyMethods size;
		 add: self rootPolyMethods size;
		 add: self allHierarchies size;
		 add: self allHierarchies size;
		 add: self polymorphicHierarchies size;
		 add: model allModelClasses size;
		 add: self polymorphicClasses size;
		 add: self callSites_methods size;
		 add: self callSites_classes size;
		 add: self allPolymorphicCalls size;
		 add: self allCalls size;
		 add: self allPolyMethods size > 0;
		 add: self callSites_methods size > 0] in PolymorphismAnalyzer>>implUseResultsCSV
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		result: 	an OrderedCollection(7645 2762 702)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


BlockClosure>>on:do:
	Receiver: [result add: self modelMethods size;
		 add: self allPolyMethods size;
		 add: self rootPo...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:e | stream nextPutAll: model name , ' ' , e printString]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzer>>implUseResultsCSV
		startpc: 	138
		numArgs: 	0


PolymorphismAnalyzer>>implUseResultsCSV
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		result: 	an OrderedCollection(7645 2762 702)
		stream: 	a WriteStream
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	Group (6855 FAMIXInvocations)


PolymorphismAnalyzerTest>>runningTheThing
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(584581120)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzerTest new runningTheThing
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(989855744)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(584581120)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(584581120)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(584581120)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(584581120)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(584581120)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(552075264)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (605028352) [other:  (blinkStart -> 8840634) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzerTest new runningTheThing'
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(31457280)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(31457280)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(31457280)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(31457280)
		secondArg: 	a PluggableTextMorph(31457280)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(31457280)
		secondArg: 	a PluggableTextMorph(31457280)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(31457280)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(31457280)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(31457280)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(31457280)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	8
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil a KMCategoryTarget nil nil a KMCategoryTarget a KMCategoryT...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(31457280)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(31457280)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(48.0@585.0) corner: (488.0@752.0)
		owner: 	a SystemWindow(336330752)
		submorphs: 	an Array(a TransformMorph(552075264))
		fullBounds: 	(48@585) corner: (488@752)
		color: 	Color white
		extension: 	a MorphExtension (579076096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(38535168)
		scroller: 	a TransformMorph(552075264)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(834404352)
		textMorph: 	a TextMorphForEditView(584581120)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 44)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(552075264)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(552075264)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(552075264)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(49.0@586.0) corner: (487.0@751.0)
		owner: 	a PluggableTextMorph(31457280)
		submorphs: 	an Array(a TextMorphForEditView(584581120))
		fullBounds: 	(49.0@586.0) corner: (487.0@751.0)
		color: 	Color transparent
		extension: 	a MorphExtension (553910272) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-52.0@ -586.0...etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)



--- The full stack ---
PolymorphismAnalyzer(Object)>>halt
PolymorphismAnalyzer>>allHierarchies
[result add: self modelMethods size;
		 add: self allPolyMethods size;
		 add: self rootPolyMethods size;
		 add: self allHierarchies size;
		 add: self allHierarchies size;
		 add: self polymorphicHierarchies size;
		 add: model allModelClasses size;
		 add: self polymorphicClasses size;
		 add: self callSites_methods size;
		 add: self callSites_classes size;
		 add: self allPolymorphicCalls size;
		 add: self allCalls size;
		 add: self allPolyMethods size > 0;
		 add: self callSites_methods size > 0] in PolymorphismAnalyzer>>implUseResultsCSV
BlockClosure>>on:do:
PolymorphismAnalyzer>>implUseResultsCSV
PolymorphismAnalyzerTest>>runningTheThing
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
23 October 2012 12:09:24.63 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

WideString(String)>>isOctetString
	Receiver: 'signature'
	Arguments and temporary variables: 
		pos: 	8
		posLimiT: 	9
	Receiver's instance variables: 
'signature'

WideString>>copyFrom:to:
	Receiver: 'signaturescationlassypece/jhotdraw7/src/main/java/org/jhotdraw/samples/mini/ConnectingFig...etc...
	Arguments and temporary variables: 
		start: 	1
		stop: 	9
		n: 	'signature'
	Receiver's instance variables: 
'signaturescationlassypece/jhotdraw7/src/main/java/org/jhotdraw/samples/mini/ConnectingFig...etc...

WriteStream>>contents
	Receiver: a WriteStream
	Arguments and temporary variables: 

	Receiver's instance variables: 
		collection: 	'signaturescationlassypece/jhotdraw7/src/main/java/org/jhotdraw/sam...etc...
		position: 	9
		readLimit: 	2424
		writeLimit: 	2560


FMMSEParser>>tNAME
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4502984
		n: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4502874
		n: 	'FAMIX.Invocation'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	20100662
		minVal: 	1
		aPoint: 	(285@1019)
		progressTitle: 	'Parsing jhotdraw.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	20100662
		minVal: 	1
		aPoint: 	(285@1019)
		progressTitle: 	'Parsing jhotdraw.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	20100662
		minVal: 	1
		aPoint: 	(285@1019)
		progressTitle: 	'Parsing jhotdraw.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	20100662
		minVal: 	1
		aPoint: 	(285@1019)
		progressTitle: 	'Parsing jhotdraw.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	SmalltalkEditor>>evaluateSelectionAndDo:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStr...etc...


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	20100662
		minVal: 	1
		aPoint: 	(285@1019)
		progressTitle: 	'Parsing jhotdraw.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw.mse'
		argPoint: 	(285@1019)
		argMinVal: 	1
		argMaxVal: 	20100662
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	20100662
		minVal: 	1
		aPoint: 	(285@1019)
		progressTitle: 	'Parsing jhotdraw.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw.mse'
		aPoint: 	(285@1019)
		minVal: 	1
		maxVal: 	20100662
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw.mse'
		aPoint: 	(285@1019)
		minVal: 	1
		maxVal: 	20100662
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$'
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection( -> tt#nextToken() (Invocation) getToolTipText -...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	56859
		reminderDict: 	an IdentityDictionary(size 24482)
		serialDict: 	an IdentityDictionary(size 28608)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(3)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(3)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	6494248
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jhotdraw.mse'
		moosemodel: 	a MooseModel #jhotdraw(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forJHotDraw
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allHierarchyRoots
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(31719424)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9174463) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil



--- The full stack ---
WideString(String)>>isOctetString
WideString>>copyFrom:to:
WriteStream>>contents
FMMSEParser>>tNAME
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzer class>>forJHotDraw
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer>>allModelClasses
23 October 2012 12:11:29.505 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>doesNotUnderstand: #allModelClasses
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allModelClasses
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer>>allModelClasses
		resumeValue: 	nil
	Receiver's instance variables: 
		model: 	nil
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allHierarchyRoots
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a PolymorphismAnalyzer
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allHierarchyRoots
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(398721024)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9307428) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil nil nil a KMCategoryTarget a KMCategoryTarget nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(897318912)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(897318912)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9307428) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9307428) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
PolymorphismAnalyzer(Object)>>doesNotUnderstand: #allModelClasses
PolymorphismAnalyzer>>allHierarchyRoots
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer>>allModelClasses
23 October 2012 12:17:05.926 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>doesNotUnderstand: #allModelClasses
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allModelClasses
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer>>allModelClasses
		resumeValue: 	nil
	Receiver's instance variables: 
		model: 	nil
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allHierarchyRoots
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a PolymorphismAnalyzer
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allHierarchyRoots
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(611844096)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9643025) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil a KMCategoryTarget nil nil a KMCategoryTarget nil nil nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(897318912)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(897318912)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9643025) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9643025) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
PolymorphismAnalyzer(Object)>>doesNotUnderstand: #allModelClasses
PolymorphismAnalyzer>>allHierarchyRoots
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "allModelClasses" is nil
23 October 2012 12:18:36.378 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #allModelClasses
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	allModelClasses
		exception: 	MessageNotUnderstood: receiver of "allModelClasses" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PolymorphismAnalyzer>>allHierarchyRoots
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	nil
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allHierarchyRoots
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(200540160)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9734291) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil a KMCategoryTarget nil nil a KMCategoryTarget nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 51)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(897318912)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(897318912)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9734291) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 9734291) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allHierarchyRoots '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #allModelClasses
PolymorphismAnalyzer>>allHierarchyRoots
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
23 October 2012 1:45:13.913 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>halt
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:invocation | invocation candidates notNil
		and: [self halt.
			invocation candidates
				contains: [:met | self allPolyMethods includes: met]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocation: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocatio...etc...
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)...etc...
	Arguments and temporary variables: 
		aBlock: 	[:invocation | invocation candidates notNil
		and: [self halt.
			invoc...etc...
		newCollection: 	an OrderedCollection()
		element: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(readShapeAttributes -> self#toNumber(IXMLElement,String) (Invoc...etc...
		firstIndex: 	1
		lastIndex: 	36685


MooseGroup>>select:
	Receiver: All famixinvocations (36685 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:invocation | invocation candidates notNil
		and: [self halt.
			invoc...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	5523636
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(readShapeAttributes -> self#toNumber(IXMLEl...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	nil
		rootPolymorphicMethods: 	nil
		polymorphicMethods: 	nil
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(208666624)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 14931661) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil nil nil nil nil a KMCategoryTarget a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)



--- The full stack ---
PolymorphismAnalyzer(Object)>>halt
[:invocation | invocation candidates notNil
		and: [self halt.
			invocation candidates
				contains: [:met | self allPolyMethods includes: met]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
23 October 2012 1:46:11.131 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		key: 	60
		aBlock: 	[^ primitiveIndex = 117
		ifTrue: [self
				withoutPrimitiveTryNamedPri...etc...
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


MethodContext(ContextPart)>>simulatePrimitive:in:receiver:arguments:
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 
		primitiveIndex: 	60
		method: 	(Object>>#at: "a CompiledMethod(454295552)")
		receiver: 	a WeakArray(nil nil nil nil nil nil nil nil nil an Object an Object n...etc...
		arguments: 	#(1051)
		key: 	60
		simulator: 	nil
		lit: 	nil
	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


MethodContext(ContextPart)>>doPrimitive:method:receiver:args:
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 
		primitiveIndex: 	60
		meth: 	(Object>>#at: "a CompiledMethod(454295552)")
		receiver: 	a WeakArray(nil nil nil nil nil nil nil nil nil an Object an Object n...etc...
		arguments: 	#(1051)
		value: 	nil
	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


MethodContext(ContextPart)>>tryPrimitiveFor:receiver:args:
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 
		method: 	(Object>>#at: "a CompiledMethod(454295552)")
		receiver: 	a WeakArray(nil nil nil nil nil nil nil nil nil an Object an Object n...etc...
		arguments: 	#(1051)
		primIndex: 	60
	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


MethodContext(ContextPart)>>send:to:with:super:
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 
		selector: 	#at:
		rcvr: 	a WeakArray(nil nil nil nil nil nil nil nil nil an Object an Object nil a...etc...
		args: 	#(1051)
		superFlag: 	false
		class: 	WeakArray
		meth: 	(Object>>#at: "a CompiledMethod(454295552)")
		val: 	nil
		ctx: 	nil
	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


MethodContext(ContextPart)>>send:super:numArgs:
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 
		selector: 	#at:
		superFlag: 	false
		numArgs: 	1
		receiver: 	a WeakArray(nil nil nil nil nil nil nil nil nil an Object an Object n...etc...
		arguments: 	#(1051)
		answer: 	nil
		i: 	0
	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


MethodContext(InstructionStream)>>interpretNextInstructionFor:
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 
		client: 	WeakSet>>scanFor:
		byte: 	192
		type: 	12
		offset: 	0
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


MethodContext(ContextPart)>>step
	Receiver: WeakSet>>scanFor:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sender: 	WeakSet>>like:
		pc: 	50
		stackp: 	4
		method: 	(WeakSet>>#scanFor: "a CompiledMethod(439615488)")
		closureOrNil: 	nil
		receiver: 	a WeakSet(#overriden #throwsException #'bringToFront(Figure)' #jfreec...etc...


Process>>step
	Receiver: a Process in WeakSet>>scanFor:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	WeakSet>>scanFor:
		priority: 	40
		myList: 	nil
		threadId: 	nil
		errorHandler: 	nil
		name: 	nil
		env: 	nil


Process>>stepToHome:
	Receiver: a Process in WeakSet>>scanFor:
	Arguments and temporary variables: 
		aContext: 	OrderedCollection>>do:
		home: 	OrderedCollection>>do:
		ctxt: 	WeakSet>>scanFor:
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	WeakSet>>scanFor:
		priority: 	40
		myList: 	nil
		threadId: 	nil
		errorHandler: 	nil
		name: 	nil
		env: 	nil


Debugger>>stepIntoBlock
	Receiver: a Debugger
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(140771328) a PluggableMultiColumnL...etc...
		contents: 	a Text for 'do: aBlock 
	"Override the superclass for performance rea...etc...
		currentCompiledMethod: 	(OrderedCollection>>#do: "a CompiledMethod(621543424)")
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in WeakSet>>scanFor:
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(OrderedCollection>>do: FMMultiMultivalueLink...etc...
		contextStackTop: 	OrderedCollection>>do:
		contextStackIndex: 	1
		contextStackList: 	#('OrderedCollection>>do:' 'FMMultiMultivalueLink(FMMultivalu...etc...
		receiverInspector: 	an OrderedCollectionInspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
	...etc...
		errorWasInUIProcess: 	true
		labelString: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(471597056)
	Arguments and temporary variables: 
		event: 	[(1200@491) mouseUp 14980018 nil]
	Receiver's instance variables: 
		bounds: 	(1128.0@486.0) corner: (1316.0@511.0)
		owner: 	an OverflowRowMorph(857997312)
		submorphs: 	an Array(an AlignmentMorph(628097024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901)
		extension: 	a MorphExtension (478150656) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Through'
		getStateSelector: 	nil
		actionSelector: 	#stepIntoBlock
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction: evt]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(471597056)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(471597056)
		m: 	[(1200@491) mouseUp 14980018 nil]
	Receiver's instance variables: 
		bounds: 	(1128.0@486.0) corner: (1316.0@511.0)
		owner: 	an OverflowRowMorph(857997312)
		submorphs: 	an Array(an AlignmentMorph(628097024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901)
		extension: 	a MorphExtension (478150656) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Through'
		getStateSelector: 	nil
		actionSelector: 	#stepIntoBlock
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(504102912) a PluggableButtonMorph(764411904) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	5
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(504102912) a PluggableButtonMorph(764411904) a PluggableBu...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(471597056)
	Arguments and temporary variables: 
		evt: 	[(1200@491) mouseUp 14980018 nil]
		all: 	an Array(a PluggableButtonMorph(504102912) a PluggableButtonMorph(76441190...etc...
	Receiver's instance variables: 
		bounds: 	(1128.0@486.0) corner: (1316.0@511.0)
		owner: 	an OverflowRowMorph(857997312)
		submorphs: 	an Array(an AlignmentMorph(628097024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901)
		extension: 	a MorphExtension (478150656) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Through'
		getStateSelector: 	nil
		actionSelector: 	#stepIntoBlock
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(471597056)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
		handler: 	nil
	Receiver's instance variables: 
		bounds: 	(1128.0@486.0) corner: (1316.0@511.0)
		owner: 	an OverflowRowMorph(857997312)
		submorphs: 	an Array(an AlignmentMorph(628097024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901)
		extension: 	a MorphExtension (478150656) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Through'
		getStateSelector: 	nil
		actionSelector: 	#stepIntoBlock
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1200@491) mouseUp 14980018 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(471597056)
	Receiver's instance variables: 
		timeStamp: 	14980018
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1200@491)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(471597056)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
	Receiver's instance variables: 
		bounds: 	(1128.0@486.0) corner: (1316.0@511.0)
		owner: 	an OverflowRowMorph(857997312)
		submorphs: 	an Array(an AlignmentMorph(628097024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901)
		extension: 	a MorphExtension (478150656) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Through'
		getStateSelector: 	nil
		actionSelector: 	#stepIntoBlock
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(471597056)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
	Receiver's instance variables: 
		bounds: 	(1128.0@486.0) corner: (1316.0@511.0)
		owner: 	an OverflowRowMorph(857997312)
		submorphs: 	an Array(an AlignmentMorph(628097024))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901)
		extension: 	a MorphExtension (478150656) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Through'
		getStateSelector: 	nil
		actionSelector: 	#stepIntoBlock
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
		focusHolder: 	a PluggableButtonMorph(471597056)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1200@491) corner: (1216@507)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1200@491) corner: (1216@507)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1039400960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1200@491) mouseUp 14980018 nil]
		targetOffset: 	(72.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14980018 1200 491 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(140771328) a Syste...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1200@491) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(140771328) a Syste...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
		focusHolder: 	a PluggableButtonMorph(471597056)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1200@491) corner: (1216@507)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1200@491) corner: (1216@507)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1039400960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1200@491) mouseUp 14980018 nil]
		targetOffset: 	(72.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14980018 1200 491 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
		focusHolder: 	a PluggableButtonMorph(471597056)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1200@491) corner: (1216@507)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1200@491) corner: (1216@507)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1039400960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1200@491) mouseUp 14980018 nil]
		targetOffset: 	(72.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14980018 1200 491 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
	Receiver's instance variables: 
		bounds: 	(1200@491) corner: (1216@507)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1200@491) corner: (1216@507)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1039400960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1200@491) mouseUp 14980018 nil]
		targetOffset: 	(72.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14980018 1200 491 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1200@491) mouseUp 14980018 nil]
		evt: 	[(1200@491) mouseUp 14980018 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(1200@491) corner: (1216@507)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1200@491) corner: (1216@507)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1039400960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1200@491) mouseUp 14980018 nil]
		targetOffset: 	(72.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14980018 1200 491 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1200@491) mouseUp 14980018 nil]
		evtBuf: 	#(1 14980018 1200 491 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1200@491) corner: (1216@507)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1200@491) corner: (1216@507)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForEditView(1039400960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1200@491) mouseUp 14980018 nil]
		targetOffset: 	(72.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14980018 1200 491 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(857997312))(an Ove...etc...
		lastStepTime: 	14980004
		lastStepMessage: 	nil
		lastCycleTime: 	14980025
		alarms: 	a Heap()
		lastAlarmTime: 	14980004
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(857997312))(an Ove...etc...
		lastStepTime: 	14980004
		lastStepMessage: 	nil
		lastCycleTime: 	14980025
		alarms: 	a Heap()
		lastAlarmTime: 	14980004
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(857997312))(an Ove...etc...
		lastStepTime: 	14980004
		lastStepMessage: 	nil
		lastCycleTime: 	14980025
		alarms: 	a Heap()
		lastAlarmTime: 	14980004
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(857997312))(an Ove...etc...
		lastStepTime: 	14980004
		lastStepMessage: 	nil
		lastCycleTime: 	14980025
		alarms: 	a Heap()
		lastAlarmTime: 	14980004
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(140771328) a Syste...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
Dictionary>>at:ifAbsent:
MethodContext(ContextPart)>>simulatePrimitive:in:receiver:arguments:
MethodContext(ContextPart)>>doPrimitive:method:receiver:args:
MethodContext(ContextPart)>>tryPrimitiveFor:receiver:args:
MethodContext(ContextPart)>>send:to:with:super:
MethodContext(ContextPart)>>send:super:numArgs:
MethodContext(InstructionStream)>>interpretNextInstructionFor:
MethodContext(ContextPart)>>step
Process>>step
Process>>stepToHome:
Debugger>>stepIntoBlock
PluggableButtonMorph>>performAction:
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction: evt]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
23 October 2012 1:46:18.668 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>halt
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:invocation | invocation candidates notNil
		and: [self halt.
			invocation candidates
				contains: [:met | self allPolyMethods includes: met]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocation: 	JMixer -> #Preset(String,int) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)...etc...
	Arguments and temporary variables: 
		aBlock: 	[:invocation | invocation candidates notNil
		and: [self halt.
			invoc...etc...
		newCollection: 	an OrderedCollection()
		element: 	JMixer -> #Preset(String,int) (Invocation)
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(readShapeAttributes -> self#toNumber(IXMLElement,String) (Invoc...etc...
		firstIndex: 	1
		lastIndex: 	36685


MooseGroup>>select:
	Receiver: All famixinvocations (36685 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:invocation | invocation candidates notNil
		and: [self halt.
			invoc...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	5523636
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(readShapeAttributes -> self#toNumber(IXMLEl...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(208666624)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 14997050) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil nil nil nil nil a KMCategoryTarget a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-d>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)



--- The full stack ---
PolymorphismAnalyzer(Object)>>halt
[:invocation | invocation candidates notNil
		and: [self halt.
			invocation candidates
				contains: [:met | self allPolyMethods includes: met]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
23 October 2012 2:14:24.809 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	anySatisfy: [:rec | inv candidates
		anySatisfy: [:cand | cand belong...etc...
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6592634
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(311164928)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 16678877) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil nil nil nil nil a KMCategoryTarget a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(897318912)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil



--- The full stack ---
FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
23 October 2012 2:15:33.028 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	anySatisfy: [:rec | inv candidates
		anySatisfy: [:cand | cand belong...etc...
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


Message>>sentTo:
	Receiver: anySatisfy: [:rec | inv candidates
		anySatisfy: [:cand | cand belongsTo = rec declaredTyp...etc...
	Arguments and temporary variables: 
		receiver: 	editedFigure (local variable in TextAreaCreationTool>>endEdit() (Meth...etc...
	Receiver's instance variables: 
		selector: 	#anySatisfy:
		args: 	an Array([:rec | inv candidates
		anySatisfy: [:cand | cand belongsTo = r...etc...
		lookupClass: 	FAMIXLocalVariable


FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	anySatisfy: [:rec | inv candidates
		anySatisfy: [:cand | cand belong...etc...
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
		resumeValue: 	MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6592634
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(311164928)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 16686492) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil nil nil nil nil a KMCategoryTarget a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory



--- The full stack ---
FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
Message>>sentTo:
FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
23 October 2012 2:15:41.404 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	anySatisfy: [:rec | inv candidates
		anySatisfy: [:cand | cand belong...etc...
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6601686
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(281018368)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 16755243) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph doIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	103
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#doIt on Cmd + D do [:morph | morph doIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #doIt on Cmd + D do [:morph | morph doIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph doIt]
		name: 	#doIt
		shortcut: 	Cmd + D
		defaultShortcut: 	Cmd + D
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#doIt on Cmd + D do [:morph | morph doIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	1
		each: 	#doIt on Cmd + D do [:morph | morph doIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-d>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil a KMCategoryTarget nil nil a KMCategoryTarget nil nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-d>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)



--- The full stack ---
FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
[:morph | morph doIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
23 October 2012 2:15:45.682 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	anySatisfy: [:rec | inv candidates
		anySatisfy: [:cand | cand belong...etc...
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>anySatisfy:
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisf...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6610738
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(884998144)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 16764918) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil a KMCategoryTarget nil nil a KMCategoryTarget a KMC...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(864288768)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		owner: 	a PluggableTextMorph(343408640)
		submorphs: 	an Array(a TextMorphForEditView(897318912))
		fullBounds: 	(29.0@1004.0) corner: (467.0@1169.0)
		color: 	Color transparent
		extension: 	a MorphExtension (866123776) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-32.0@ -1004....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (432@18)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(897318912)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil



--- The full stack ---
FAMIXLocalVariable(Object)>>doesNotUnderstand: #anySatisfy:
[:inv | inv receiver
		anySatisfy: [:rec | inv candidates
				anySatisfy: [:cand | cand belongsTo = rec declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "declaredType" is nil
23 October 2012 2:16:23.421 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #declaredType
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	declaredType
		exception: 	MessageNotUnderstood: receiver of "declaredType" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[:cand | cand belongsTo = inv receiver declaredType] in [:inv | inv candidates
		anySatisfy: [:cand | cand belongsTo = inv receiver declaredType]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	Drawing>>fireUndoableEditHappened(UndoableEdit) (Method)
		cand: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	Drawing>>fireUndoableEditHappened(UndoableEdit) (Method)
		each: 	[:cand | cand belongsTo = inv receiver declaredType]
	Receiver's instance variables: 
		values: 	an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (M...etc...
		owner: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		opposite: 	#incomingInvocations


OrderedCollection>>do:
	Receiver: an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method) nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FMMultiMultivalueLink(FMMultivalueLink)>>do:
	Receiver: an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
	Receiver's instance variables: 
		values: 	an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (M...etc...
		owner: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		opposite: 	#incomingInvocations


FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:cand | cand belongsTo = inv receiver declaredType]
	Receiver's instance variables: 
		values: 	an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (M...etc...
		owner: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		opposite: 	#incomingInvocations


[:inv | inv candidates
		anySatisfy: [:cand | cand belongsTo = inv receiver declaredType]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | cand belongsTo = inv rece...etc...
		newCollection: 	an OrderedCollection(redo -> editedFigure#setText(String) (Invoc...etc...
		element: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		index: 	15
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | cand belongsTo = inv rece...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6619790
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(278659072)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 16797199) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil a KMCategoryTarget a KMCategoryTarget nil nil nil nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #declaredType
[:cand | cand belongsTo = inv receiver declaredType] in [:inv | inv candidates
		anySatisfy: [:cand | cand belongsTo = inv receiver declaredType]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
OrderedCollection>>do:
FMMultiMultivalueLink(FMMultivalueLink)>>do:
FMMultiMultivalueLink(Collection)>>anySatisfy:
[:inv | inv candidates
		anySatisfy: [:cand | cand belongsTo = inv receiver declaredType]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXClass>>declaredType
23 October 2012 2:18:36.598 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXClass(Object)>>doesNotUnderstand: #declaredType
	Receiver: RelativeLocator in org::jhotdraw::draw::locator (Class)
	Arguments and temporary variables: 
		aMessage: 	declaredType
		exception: 	MessageNotUnderstood: FAMIXClass>>declaredType
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5467550
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	an Array(/** 
 * A locator that s...:56:21Z rawcoder $
 */
 (comment ...etc...
		declaredSourceLanguage: 	nil
		name: 	'RelativeLocator'
		isStub: 	false
		receivingInvocations: 	an Array(NorthWestHandle -> RelativeLocator#northWest() (...etc...
		modifiers: 	an OrderedCollection('public')
		parentPackage: 	nil
		annotationInstances: 	#()
		outgoingReferences: 	#()
		types: 	#()
		incomingReferences: 	an Array(addLeadHandles -> RelativeLocator (Reference) sout...etc...
		subInheritances: 	an Array(RelativeDecoratorLocator -> RelativeLocator (Inherita...etc...
		methods: 	an Array(RelativeLocator>>read(DOMInput) (Method) RelativeLocator>>sou...etc...
		container: 	org (Namespace)::jhotdraw (Namespace)::draw (Namespace)::locator (Na...etc...
		superInheritances: 	an Array(RelativeLocator -> AbstractLocator (Inheritance))
		attributes: 	an Array(RelativeLocator.isTransform (Attribute) RelativeLocator.re...etc...
		behavioursWithDeclaredType: 	#()
		structuresWithDeclaredType: 	an Array(other (local variable in RelativeLocator>>...etc...
		isInterface: 	nil


[:cand | inv receiver isNil not
		and: [cand belongsTo = inv receiver declaredType]] in [:inv | inv candidates
		anySatisfy: [:cand | inv receiver isNil not
				and: [cand belongsTo = inv receiver declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	RelativeLocator>>southWest() (Method)
		cand: 	createHandles -> RelativeLocator#southWest() (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(RelativeLocator>>southWest() (Method))
	Arguments and temporary variables: 
		aBlock: 	RelativeLocator>>southWest() (Method)
		each: 	[:cand | inv receiver isNil not
		and: [cand belongsTo = inv receiver dec...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(RelativeLocator>>southWest() (Method))
		owner: 	createHandles -> RelativeLocator#southWest() (Invocation)
		opposite: 	#incomingInvocations


OrderedCollection>>do:
	Receiver: an OrderedCollection(RelativeLocator>>southWest() (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(RelativeLocator>>southWest() (Method) nil nil nil nil nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	1


FMMultiMultivalueLink(FMMultivalueLink)>>do:
	Receiver: an Array(RelativeLocator>>southWest() (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
	Receiver's instance variables: 
		values: 	an OrderedCollection(RelativeLocator>>southWest() (Method))
		owner: 	createHandles -> RelativeLocator#southWest() (Invocation)
		opposite: 	#incomingInvocations


FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(RelativeLocator>>southWest() (Method))
	Arguments and temporary variables: 
		aBlock: 	[:cand | inv receiver isNil not
		and: [cand belongsTo = inv receiver d...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(RelativeLocator>>southWest() (Method))
		owner: 	createHandles -> RelativeLocator#southWest() (Invocation)
		opposite: 	#incomingInvocations


[:inv | inv candidates
		anySatisfy: [:cand | inv receiver isNil not
				and: [cand belongsTo = inv receiver declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	createHandles -> RelativeLocator#southWest() (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | inv receiver isNil not
		...etc...
		newCollection: 	an OrderedCollection(redo -> editedFigure#setText(String) (Invoc...etc...
		element: 	createHandles -> RelativeLocator#southWest() (Invocation)
		index: 	229
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | inv receiver isNil not
		...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6628842
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1010302976)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 16930567) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget nil nil nil nil nil nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory



--- The full stack ---
FAMIXClass(Object)>>doesNotUnderstand: #declaredType
[:cand | inv receiver isNil not
		and: [cand belongsTo = inv receiver declaredType]] in [:inv | inv candidates
		anySatisfy: [:cand | inv receiver isNil not
				and: [cand belongsTo = inv receiver declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
OrderedCollection>>do:
FMMultiMultivalueLink(FMMultivalueLink)>>do:
FMMultiMultivalueLink(Collection)>>anySatisfy:
[:inv | inv candidates
		anySatisfy: [:cand | inv receiver isNil not
				and: [cand belongsTo = inv receiver declaredType]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXLocalVariable>>type
23 October 2012 2:29:28.344 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXLocalVariable(Object)>>doesNotUnderstand: #type
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	type
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>type
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMethod := cand.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	inv receiver isNil not
		ifTrue: [receiverObj type = FAMIXClass
				ifTrue: [receiverObj = invokedMethodClass]
				ifFalse: [receiverObj type = FAMIXLocalVariable
						and: [receiverObj declaredType = invokedMethodClass]]]] in [:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj type = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	TextHolderFigure>>setText(String) (Method)
		cand: 	redo -> editedFigure#setText(String) (Invocation)
		invokedMethod: 	TextHolderFigure>>setText(String) (Method)
		receiverObj: 	editedFigure (local variable in TextAreaCreationTool>>endEdit() (M...etc...
		invokedMethodClass: 	TextHolderFigure in org::jhotdraw::draw (Class)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	TextHolderFigure>>setText(String) (Method)
		each: 	[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMethod ...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(TextHolderFigure>>setText(String) (Method))
		owner: 	redo -> editedFigure#setText(String) (Invocation)
		opposite: 	#incomingInvocations


OrderedCollection>>do:
	Receiver: an OrderedCollection(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(TextHolderFigure>>setText(String) (Method) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


FMMultiMultivalueLink(FMMultivalueLink)>>do:
	Receiver: an Array(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
	Receiver's instance variables: 
		values: 	an OrderedCollection(TextHolderFigure>>setText(String) (Method))
		owner: 	redo -> editedFigure#setText(String) (Invocation)
		opposite: 	#incomingInvocations


FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMetho...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(TextHolderFigure>>setText(String) (Method))
		owner: 	redo -> editedFigure#setText(String) (Invocation)
		opposite: 	#incomingInvocations


[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj type = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod recei...etc...
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod recei...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6637894
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(785645568)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 17581777) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil nil nil a KMCategoryTarget a KMCategoryTarget nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory



--- The full stack ---
FAMIXLocalVariable(Object)>>doesNotUnderstand: #type
[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMethod := cand.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	inv receiver isNil not
		ifTrue: [receiverObj type = FAMIXClass
				ifTrue: [receiverObj = invokedMethodClass]
				ifFalse: [receiverObj type = FAMIXLocalVariable
						and: [receiverObj declaredType = invokedMethodClass]]]] in [:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj type = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
OrderedCollection>>do:
FMMultiMultivalueLink(FMMultivalueLink)>>do:
FMMultiMultivalueLink(Collection)>>anySatisfy:
[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj type = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: FAMIXLocalVariable>>type
23 October 2012 2:30:04.601 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXLocalVariable(Object)>>doesNotUnderstand: #type
	Receiver: editedFigure (local variable in TextAreaCreationTool>>endEdit() (Method))
	Arguments and temporary variables: 
		aMessage: 	type
		exception: 	MessageNotUnderstood: FAMIXLocalVariable>>type
		resumeValue: 	nil
	Receiver's instance variables: 
		mooseID: 	5448957
		state: 	a MooseDefaultState
		sourceAnchor: 	a FAMIXFileAnchor #'src/JHotDraw 7.5.1/Source/jhotdraw7/src/main/...etc...
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'editedFigure'
		isStub: 	false
		receivingInvocations: 	an Array(undo -> editedFigure#setText(String) (Invocation...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	TextHolderFigure in org::jhotdraw::draw (Class)
		incomingAccesses: 	an Array(redo -> editedFigure (Access) undo -> editedFigure (...etc...
		parentBehaviouralEntity: 	TextAreaCreationTool>>endEdit() (Method)


[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMethod := cand.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	inv receiver isNil not
		ifTrue: [receiverObj class = FAMIXClass
				ifTrue: [receiverObj = invokedMethodClass]
				ifFalse: [receiverObj type = FAMIXLocalVariable
						and: [receiverObj declaredType = invokedMethodClass]]]] in [:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj class = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	TextHolderFigure>>setText(String) (Method)
		cand: 	redo -> editedFigure#setText(String) (Invocation)
		invokedMethod: 	TextHolderFigure>>setText(String) (Method)
		receiverObj: 	editedFigure (local variable in TextAreaCreationTool>>endEdit() (M...etc...
		invokedMethodClass: 	TextHolderFigure in org::jhotdraw::draw (Class)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	TextHolderFigure>>setText(String) (Method)
		each: 	[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMethod ...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(TextHolderFigure>>setText(String) (Method))
		owner: 	redo -> editedFigure#setText(String) (Invocation)
		opposite: 	#incomingInvocations


OrderedCollection>>do:
	Receiver: an OrderedCollection(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(TextHolderFigure>>setText(String) (Method) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


FMMultiMultivalueLink(FMMultivalueLink)>>do:
	Receiver: an Array(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
	Receiver's instance variables: 
		values: 	an OrderedCollection(TextHolderFigure>>setText(String) (Method))
		owner: 	redo -> editedFigure#setText(String) (Invocation)
		opposite: 	#incomingInvocations


FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(TextHolderFigure>>setText(String) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMetho...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(TextHolderFigure>>setText(String) (Method))
		owner: 	redo -> editedFigure#setText(String) (Invocation)
		opposite: 	#incomingInvocations


[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj class = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod recei...etc...
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod recei...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6646946
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(827588608)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 17618505) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil a KMCategoryTarget nil nil a KMCategoryTarget a KMCategoryT...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory



--- The full stack ---
FAMIXLocalVariable(Object)>>doesNotUnderstand: #type
[:cand | 
| invokedMethod receiverObj invokedMethodClass |
invokedMethod := cand.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	inv receiver isNil not
		ifTrue: [receiverObj class = FAMIXClass
				ifTrue: [receiverObj = invokedMethodClass]
				ifFalse: [receiverObj type = FAMIXLocalVariable
						and: [receiverObj declaredType = invokedMethodClass]]]] in [:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj class = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
OrderedCollection>>do:
FMMultiMultivalueLink(FMMultivalueLink)>>do:
FMMultiMultivalueLink(Collection)>>anySatisfy:
[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			inv receiver isNil not
				ifTrue: [receiverObj class = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObj type = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NonBooleanReceiver: proceed for truth.
23 October 2012 2:31:05.591 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>mustBeBooleanIn:
	Receiver: nil
	Arguments and temporary variables: 
		context: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMul...etc...
		proceedValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>mustBeBoolean
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	Drawing>>fireUndoableEditHappened(UndoableEdit) (Method)
		each: 	[:cand | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (M...etc...
		owner: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		opposite: 	#incomingInvocations


OrderedCollection>>do:
	Receiver: an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method) nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FMMultiMultivalueLink(FMMultivalueLink)>>do:
	Receiver: an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil]
	Receiver's instance variables: 
		values: 	an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (M...etc...
		owner: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		opposite: 	#incomingInvocations


FMMultiMultivalueLink(Collection)>>anySatisfy:
	Receiver: an Array(Drawing>>fireUndoableEditHappened(UndoableEdit) (Method))
	Arguments and temporary variables: 
		aBlock: 	[:cand | 
| invokedMethod receiverObj invokedMethodClass receiverObjCla...etc...
	Receiver's instance variables: 
		values: 	an OrderedCollection(Drawing>>fireUndoableEditHappened(UndoableEdit) (M...etc...
		owner: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		opposite: 	#incomingInvocations


[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass receiverObjClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			receiverObjClass := inv receiver class.
			inv receiver isNil not
				ifTrue: [receiverObjClass = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObjClass = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod recei...etc...
		newCollection: 	an OrderedCollection(redo -> editedFigure#setText(String) (Invoc...etc...
		element: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		index: 	15
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>select:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod recei...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6655998
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(136314880)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@18)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@18)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 17679369) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls '
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil a KMCategoryTarget a KMCategoryTarget nil nil nil nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory



--- The full stack ---
UndefinedObject(Object)>>mustBeBooleanIn:
UndefinedObject(Object)>>mustBeBoolean
[:each | 
(aBlock value: each)
		ifTrue: [^ true].
	nil] in FMMultiMultivalueLink(Collection)>>anySatisfy:
OrderedCollection>>do:
FMMultiMultivalueLink(FMMultivalueLink)>>do:
FMMultiMultivalueLink(Collection)>>anySatisfy:
[:inv | inv candidates
		anySatisfy: [:cand | 
			| invokedMethod receiverObj invokedMethodClass receiverObjClass |
			invokedMethod := cand.
			invokedMethodClass := invokedMethod belongsTo.
			receiverObj := inv receiver.
			receiverObjClass := inv receiver class.
			inv receiver isNil not
				ifTrue: [receiverObjClass = FAMIXClass
						ifTrue: [receiverObj = invokedMethodClass]
						ifFalse: [receiverObjClass = FAMIXLocalVariable
								and: [receiverObj declaredType = invokedMethodClass]]]]] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
OrderedCollection>>select:
MooseGroup>>select:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of FAMIXImplicitVariable are not indexable
23 October 2012 3:06:41.221 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FAMIXImplicitVariable(Object)>>error:
	Receiver: SVGInputFormat.self (ImplicitVariable)
	Arguments and temporary variables: 
		aString: 	'Instances of FAMIXImplicitVariable are not indexable'
	Receiver's instance variables: 
		mooseID: 	5480137
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'self'
		isStub: 	false
		receivingInvocations: 	an Array(readUseShapeAttributes -> self#toNumber(IXMLElem...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	nil
		incomingAccesses: 	#()
		parentBehaviouralEntity: 	SVGInputFormat>>SVGInputFormat() (Method)


FAMIXImplicitVariable(Object)>>errorNotIndexable
	Receiver: SVGInputFormat.self (ImplicitVariable)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mooseID: 	5480137
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'self'
		isStub: 	false
		receivingInvocations: 	an Array(readUseShapeAttributes -> self#toNumber(IXMLElem...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	nil
		incomingAccesses: 	#()
		parentBehaviouralEntity: 	SVGInputFormat>>SVGInputFormat() (Method)


FAMIXImplicitVariable(Object)>>size
	Receiver: SVGInputFormat.self (ImplicitVariable)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		mooseID: 	5480137
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		name: 	'self'
		isStub: 	false
		receivingInvocations: 	an Array(readUseShapeAttributes -> self#toNumber(IXMLElem...etc...
		modifiers: 	a Set()
		parentPackage: 	nil
		annotationInstances: 	#()
		declaredType: 	nil
		incomingAccesses: 	#()
		parentBehaviouralEntity: 	SVGInputFormat>>SVGInputFormat() (Method)


FAMIXInvocation>>DoIt
	Receiver: readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
	Arguments and temporary variables: 
		t1: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
		t2: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
	Receiver's instance variables: 
		mooseID: 	5414140
		state: 	a MooseDefaultState
		sourceAnchor: 	nil
		sourceLanguage: 	nil
		comments: 	#()
		declaredSourceLanguage: 	nil
		previous: 	readShapeAttributes -> self#toWSOrCommaSeparatedArray(String) (Invoca...etc...
		next: 	readShapeAttributes -> STROKE_DASHES#put(Map<AttributeKey,Object>,T) (Inv...etc...
		sender: 	SVGInputFormat>>readShapeAttributes(IXMLElement,HashMap<AttributeKey,Ob...etc...
		receiver: 	SVGInputFormat.self (ImplicitVariable)
		receiverSourceCode: 	nil
		signature: 	'toNumber(IXMLElement,String)'
		candidates: 	an Array(SVGInputFormat>>toNumber(IXMLElement,String) (Method))


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	' | entity each | each := self. entity := each.each receiver size...etc...
		aContext: 	nil
		receiver: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)...etc...
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	false
		methodNode: 	DoIt
	| entity each |
	each := self.
	entity := each.
	^ each recei...etc...
		method: 	(FAMIXInvocation>>#DoIt "a CompiledMethod(878444544)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	FAMIXInvocation
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	' | entity each | each := self. entity := each.each receiver size...etc...
		anObject: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)...etc...
		aController: 	nil
		logFlag: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	' | entity each | each := self. entity := each.each receiver size...etc...
		anObject: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)...etc...
		logFlag: 	false
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[:text :each | Compiler
		evaluate: ' | entity each | each := self. entity := each.' , text
		for: each
		logged: false] in MooseGroup(MooseAbstractGroup)>>mooseFinderListIn:
	Receiver: All famixinvocations (36685 FAMIXInvocations)
	Arguments and temporary variables: 
		text: 	'each receiver size > 1'
		each: 	readShapeAttributes -> self#toNumber(IXMLElement,String) (Invocation)
	Receiver's instance variables: 
		mooseID: 	5523636
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(readShapeAttributes -> self#toNumber(IXMLEl...etc...


[:each | 
check := self glamourPresentation searchStrategy value: self inputText value: each item.
	check
		ifTrue: [newSelection add: each path]] in GLMTreeMorphModel>>executeSearch
	Receiver: a GLMTreeMorphModel
	Arguments and temporary variables: 
		newSelection: 	a NodeModel with readShapeAttributes -> self#toNumber(IXMLElement...etc...
		check: 	an OrderedCollection()
		each: 	#(nil)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PaginatedMorphTreeMorph(46137344) a PluggableTe...etc...
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		pageSize: 	nil
		roots: 	Group (36685 GLMTreeMorphNodeModels)
		glamourPresentation: 	a GLMListPresentation(id=592707584 title=36685 items pane=...etc...
		childrenBlock: 	nil
		onSelection: 	nil
		displayFormat: 	nil
		tagsToFilterBy: 	an OrderedCollection()
		glmAnnouncer: 	a GLMAnnouncer
		inputText: 	'each receiver size > 1'
		amountToFilterBy: 	nil
		defaultPageSize: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a NodeModel with readShapeAttributes -> self#toNumber(IXMLElement,Str...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
check := self glamourPresentation searchStrategy value: self ...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a NodeModel with readShapeAttributes -> self#toNumber(IXMLEleme...etc...
		firstIndex: 	1
		lastIndex: 	36685


MooseGroupRuntimeStorage>>do:
	Receiver: a MooseGroupRuntimeStorage(a NodeModel with readShapeAttributes -> self#toNumber(IXMLEleme...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
check := self glamourPresentation searchStrategy value: self ...etc...
	Receiver's instance variables: 
		byName: 	an IdentityDictionary()
		elements: 	an OrderedCollection(a NodeModel with readShapeAttributes -> self#toN...etc...
		byType: 	a Dictionary(GLMTreeMorphNodeModel->an OrderedCollection(a NodeModel wi...etc...


MooseGroup(MooseAbstractGroup)>>do:
	Receiver: Group (36685 GLMTreeMorphNodeModels)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
check := self glamourPresentation searchStrategy value: self ...etc...
	Receiver's instance variables: 
		mooseID: 	6674112
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(a NodeModel with readShapeAttributes -> sel...etc...


GLMTreeMorphModel>>executeSearch
	Receiver: a GLMTreeMorphModel
	Arguments and temporary variables: 
		newSelection: 	an OrderedCollection()
		check: 	#(nil)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PaginatedMorphTreeMorph(46137344) a PluggableTe...etc...
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		pageSize: 	nil
		roots: 	Group (36685 GLMTreeMorphNodeModels)
		glamourPresentation: 	a GLMListPresentation(id=592707584 title=36685 items pane=...etc...
		childrenBlock: 	nil
		onSelection: 	nil
		displayFormat: 	nil
		tagsToFilterBy: 	an OrderedCollection()
		glmAnnouncer: 	a GLMAnnouncer
		inputText: 	'each receiver size > 1'
		amountToFilterBy: 	nil
		defaultPageSize: 	nil


GLMTreeMorphModel>>doSearchOrFilter
	Receiver: a GLMTreeMorphModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PaginatedMorphTreeMorph(46137344) a PluggableTe...etc...
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		pageSize: 	nil
		roots: 	Group (36685 GLMTreeMorphNodeModels)
		glamourPresentation: 	a GLMListPresentation(id=592707584 title=36685 items pane=...etc...
		childrenBlock: 	nil
		onSelection: 	nil
		displayFormat: 	nil
		tagsToFilterBy: 	an OrderedCollection()
		glmAnnouncer: 	a GLMAnnouncer
		inputText: 	'each receiver size > 1'
		amountToFilterBy: 	nil
		defaultPageSize: 	nil


GLMTreeMorphModel>>inputText:
	Receiver: a GLMTreeMorphModel
	Arguments and temporary variables: 
		anObject: 	'each receiver size > 1'
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PaginatedMorphTreeMorph(46137344) a PluggableTe...etc...
		selection: 	nil
		announcer: 	nil
		rootItems: 	nil
		autoMultiSelection: 	nil
		headerLabel: 	nil
		multiSelection: 	nil
		wrapBlockOrSelector: 	nil
		isCheckList: 	nil
		pageSize: 	nil
		roots: 	Group (36685 GLMTreeMorphNodeModels)
		glamourPresentation: 	a GLMListPresentation(id=592707584 title=36685 items pane=...etc...
		childrenBlock: 	nil
		onSelection: 	nil
		displayFormat: 	nil
		tagsToFilterBy: 	an OrderedCollection()
		glmAnnouncer: 	a GLMAnnouncer
		inputText: 	'each receiver size > 1'
		amountToFilterBy: 	nil
		defaultPageSize: 	nil


PluggableTextFieldMorph>>acceptTextInModel
	Receiver: a PluggableTextFieldMorph(600309760)
	Arguments and temporary variables: 
		objectToAccept: 	'each receiver size > 1'
		text: 	a Text for 'each receiver size > 1'
	Receiver's instance variables: 
		bounds: 	(535.0@618.0) corner: (1035.0@640.0)
		owner: 	a PanelMorph(33292288)
		submorphs: 	an Array(a TransformMorph(45088768))
		fullBounds: 	(535@618) corner: (1035@640)
		color: 	(Color r: 0.837 g: 0.837 b: 0.837)
		extension: 	a MorphExtension (12058624) [balloonText]  [other:  (kmDispatcher ->...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a GLMTreeMorphModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(607649792)
		scroller: 	a TransformMorph(45088768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(327417856)
		textMorph: 	a TextMorphForFieldView(17301504)
		getTextSelector: 	#inputText
		setTextSelector: 	#inputText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(14 to: 13)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	#inputTextEnabled
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		alwaysAccept: 	true
		changedAction: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	''
		default: 	nil
		entryCompletion: 	nil
		endRow: 	nil


PluggableTextFieldMorph(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextFieldMorph(600309760)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(14 to: 13)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(535.0@618.0) corner: (1035.0@640.0)
		owner: 	a PanelMorph(33292288)
		submorphs: 	an Array(a TransformMorph(45088768))
		fullBounds: 	(535@618) corner: (1035@640)
		color: 	(Color r: 0.837 g: 0.837 b: 0.837)
		extension: 	a MorphExtension (12058624) [balloonText]  [other:  (kmDispatcher ->...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a GLMTreeMorphModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(607649792)
		scroller: 	a TransformMorph(45088768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(327417856)
		textMorph: 	a TextMorphForFieldView(17301504)
		getTextSelector: 	#inputText
		setTextSelector: 	#inputText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(14 to: 13)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	#inputTextEnabled
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		alwaysAccept: 	true
		changedAction: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	''
		default: 	nil
		entryCompletion: 	nil
		endRow: 	nil


PluggableTextFieldMorph(PluggableTextMorph)>>accept
	Receiver: a PluggableTextFieldMorph(600309760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(535.0@618.0) corner: (1035.0@640.0)
		owner: 	a PanelMorph(33292288)
		submorphs: 	an Array(a TransformMorph(45088768))
		fullBounds: 	(535@618) corner: (1035@640)
		color: 	(Color r: 0.837 g: 0.837 b: 0.837)
		extension: 	a MorphExtension (12058624) [balloonText]  [other:  (kmDispatcher ->...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a GLMTreeMorphModel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(607649792)
		scroller: 	a TransformMorph(45088768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(327417856)
		textMorph: 	a TextMorphForFieldView(17301504)
		getTextSelector: 	#inputText
		setTextSelector: 	#inputText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	false
		selectionInterval: 	(14 to: 13)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	#inputTextEnabled
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		alwaysAccept: 	true
		changedAction: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	''
		default: 	nil
		entryCompletion: 	nil
		endRow: 	nil


TextMorphForFieldView(TextMorphForEditView)>>acceptContents
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextEditor>>accept
	Receiver: a TextEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>accept:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>performCmdActionsWith:shifted:return:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	116
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#accept:
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>dispatchCommandOn:return:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
		return: 	[:val | ^ val]
		asciiValue: 	115
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>dispatchOn:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


[self dispatchOn: aKeyboardEvent] in TextEditor>>keystroke:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>handleKeystrokeAction:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>handleEditionAction:fromKeyboardEvent:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


TextEditor>>keystroke:
	Receiver: a TextEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(17301504)
		selectionShowing: 	true
		model: 	a GLMTreeMorphModel
		editingState: 	an EditingState


[editor keystroke: evt] in TextMorphForFieldView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextMorphForFieldView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextEditor
		oldParagraph: 	a Paragraph
		oldText: 	a Text for 'each receiver size > 1'
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextMorphForFieldView(TextMorphForEditView)>>handleInteraction:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextMorphForFieldView(TextMorph)>>basicKeyStroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-s>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


[self basicKeyStroke: evt] in TextMorphForFieldView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


NOCController class(NECController class)>>codeCompletionAround:textMorph:keyStroke:
	Receiver: NOCController
	Arguments and temporary variables: 
		aBlock: 	[self basicKeyStroke: evt]
		aTextMorph: 	a TextMorphForFieldView(17301504)
		evt: 	[keystroke '<Cmd-s>']
		editor: 	a TextEditor
		stringHolder: 	a GLMTreeMorphModel
		completionAllowed: 	false
		controller: 	nil
	Receiver's instance variables: 
		superclass: 	NECController
		methodDict: 	a MethodDictionary(#contextClass->(NOCController>>#contextClass "a ...etc...
		format: 	144
		instanceVariables: 	#('expanded' 'contextClass')
		organization: 	('accessing' menuMorph)
('as yet unclassified' expand expanded re...etc...
		subclasses: 	nil
		name: 	#NOCController
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'NOCompletion-Model'
		traitComposition: 	{}
		localSelectors: 	nil
		uniqueInstance: 	a NOCController


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[self basicKeyStroke: evt]
		aTextMorph: 	a TextMorphForFieldView(17301504)
		evt: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForFieldView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextMorphForFieldView(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-s>']
		view: 	a PluggableTextFieldMorph(600309760)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextMorphForFieldView>>keyStroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil


TextMorphForFieldView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForFieldView(17301504)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@20)
		owner: 	a TransformMorph(45088768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@20)
		color: 	Color black
		extension: 	a MorphExtension (38010880) [other:  (blinkStart -> 19794204) (kmDis...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'each receiver size > 1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(2@1) corner: (2@1)
		editView: 	a PluggableTextFieldMorph(600309760)
		acceptOnCR: 	true
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979)
		maxLength: 	nil



--- The full stack ---
FAMIXImplicitVariable(Object)>>error:
FAMIXImplicitVariable(Object)>>errorNotIndexable
FAMIXImplicitVariable(Object)>>size
FAMIXInvocation>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
[:text :each | Compiler
		evaluate: ' | entity each | each := self. entity := each.' , text
		for: each
		logged: false] in MooseGroup(MooseAbstractGroup)>>mooseFinderListIn:
[:each | 
check := self glamourPresentation searchStrategy value: self inputText value: each item.
	check
		ifTrue: [newSelection add: each path]] in GLMTreeMorphModel>>executeSearch
OrderedCollection>>do:
MooseGroupRuntimeStorage>>do:
MooseGroup(MooseAbstractGroup)>>do:
GLMTreeMorphModel>>executeSearch
GLMTreeMorphModel>>doSearchOrFilter
GLMTreeMorphModel>>inputText:
PluggableTextFieldMorph>>acceptTextInModel
PluggableTextFieldMorph(PluggableTextMorph)>>acceptBasic
PluggableTextFieldMorph(PluggableTextMorph)>>accept
TextMorphForFieldView(TextMorphForEditView)>>acceptContents
TextEditor>>accept
TextEditor>>accept:
TextEditor>>performCmdActionsWith:shifted:return:
TextEditor>>dispatchCommandOn:return:
TextEditor>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in TextEditor>>keystroke:
TextEditor>>handleKeystrokeAction:
TextEditor>>handleEditionAction:fromKeyboardEvent:
TextEditor>>keystroke:
[editor keystroke: evt] in TextMorphForFieldView(TextMorph)>>basicKeyStroke:
TextMorphForFieldView(TextMorph)>>handleInteraction:
TextMorphForFieldView(TextMorphForEditView)>>handleInteraction:
TextMorphForFieldView(TextMorph)>>basicKeyStroke:
[self basicKeyStroke: evt] in TextMorphForFieldView(TextMorph)>>keyStroke:
NOCController class(NECController class)>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForFieldView(TextMorph)>>keyStroke:
TextMorphForFieldView(TextMorphForEditView)>>keyStroke:
TextMorphForFieldView>>keyStroke:
TextMorphForFieldView(TextMorph)>>handleKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KeyboardEvent>>sentTo:
TextMorphForFieldView(Morph)>>handleEvent:
TextMorphForFieldView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
23 October 2012 3:25:52.973 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>halt
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj.
			self halt].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	createHandles -> RelativeLocator#southWest() (Invocation)
		invokedMethod: 	RelativeLocator>>southWest() (Method)
		receiverObj: 	RelativeLocator in org::jhotdraw::draw::locator (Class)
		invokedMethodClass: 	RelativeLocator in org::jhotdraw::draw::locator (Class)
		receiverObjClass: 	RelativeLocator in org::jhotdraw::draw::locator (Class)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	createHandles -> RelativeLocator#southWest() (Invocation)
		element: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjCla...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:element | (aBlock value: element)
		== false]
		newCollection: 	an OrderedCollection(initDrawing -> d#setOutputFormats(List<Outp...etc...
		element: 	createHandles -> RelativeLocator#southWest() (Invocation)
		index: 	229
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>reject:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6800863
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(22544384)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 20966811) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls 

Polymo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget nil nil nil nil nil a KMCategoryTarget nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 53)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory



--- The full stack ---
PolymorphismAnalyzer(Object)>>halt
[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj.
			self halt].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
OrderedCollection>>select:
OrderedCollection(Collection)>>reject:
MooseGroup>>reject:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>receiverObjClass
23 October 2012 4:16:49.992 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

BlockClosure(Object)>>doesNotUnderstand: #receiverObjClass
	Receiver: [self halt]
	Arguments and temporary variables: 
		aMessage: 	receiverObjClass
		exception: 	MessageNotUnderstood: BlockClosure>>receiverObjClass
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverO...etc...
		startpc: 	165
		numArgs: 	0


[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	inv receiver isNil ifTrue: [self halt] receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
		invokedMethod: 	TextHolderFigure>>setText(String) (Method)
		receiverObj: 	editedFigure (local variable in TextAreaCreationTool>>endEdit() (M...etc...
		invokedMethodClass: 	TextHolderFigure in org::jhotdraw::draw (Class)
		receiverObjClass: 	TextHolderFigure in org::jhotdraw::draw (Class)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	redo -> editedFigure#setText(String) (Invocation)
		element: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjCla...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:element | (aBlock value: element)
		== false]
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>reject:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6818968
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(584318976)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 24022979) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls 

Polymo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil a KMCategoryTarget nil nil a KMCategoryTarget a KMCateg...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #receiverObjClass
[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	inv receiver isNil ifTrue: [self halt] receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
OrderedCollection>>select:
OrderedCollection(Collection)>>reject:
MooseGroup>>reject:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: BlockClosure>>receiverObjClass
23 October 2012 4:18:52.736 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

BlockClosure(Object)>>doesNotUnderstand: #receiverObjClass
	Receiver: [self halt]
	Arguments and temporary variables: 
		aMessage: 	receiverObjClass
		exception: 	MessageNotUnderstood: BlockClosure>>receiverObjClass
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverO...etc...
		startpc: 	165
		numArgs: 	0


Message>>sentTo:
	Receiver: receiverObjClass
	Arguments and temporary variables: 
		receiver: 	[self halt]
	Receiver's instance variables: 
		selector: 	#receiverObjClass
		args: 	#()
		lookupClass: 	BlockClosure


BlockClosure(Object)>>doesNotUnderstand: #receiverObjClass
	Receiver: [self halt]
	Arguments and temporary variables: 
		aMessage: 	receiverObjClass
		exception: 	MessageNotUnderstood: BlockClosure>>receiverObjClass
		resumeValue: 	MessageNotUnderstood: BlockClosure>>receiverObjClass
	Receiver's instance variables: 
		outerContext: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverO...etc...
		startpc: 	165
		numArgs: 	0


[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	inv receiver isNil ifTrue: [self halt] receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	redo -> editedFigure#setText(String) (Invocation)
		invokedMethod: 	TextHolderFigure>>setText(String) (Method)
		receiverObj: 	editedFigure (local variable in TextAreaCreationTool>>endEdit() (M...etc...
		invokedMethodClass: 	TextHolderFigure in org::jhotdraw::draw (Class)
		receiverObjClass: 	TextHolderFigure in org::jhotdraw::draw (Class)
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	redo -> editedFigure#setText(String) (Invocation)
		element: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjCla...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:element | (aBlock value: element)
		== false]
		newCollection: 	an OrderedCollection()
		element: 	redo -> editedFigure#setText(String) (Invocation)
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>reject:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6818968
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(584318976)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 24151877) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls 

Polymo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil a KMCategoryTarget nil nil a KMCategoryTarget a KMCateg...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #receiverObjClass
Message>>sentTo:
BlockClosure(Object)>>doesNotUnderstand: #receiverObjClass
[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	inv receiver isNil ifTrue: [self halt] receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
OrderedCollection>>select:
OrderedCollection(Collection)>>reject:
MooseGroup>>reject:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
23 October 2012 4:19:17.517 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer(Object)>>halt
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	inv receiver isNil
		ifTrue: [self halt].
	receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		inv: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		invokedMethod: 	Drawing>>fireUndoableEditHappened(UndoableEdit) (Method)
		receiverObj: 	nil
		invokedMethodClass: 	Drawing in org::jhotdraw::draw (Class)
		receiverObjClass: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		element: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjCla...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection>>select:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:element | (aBlock value: element)
		== false]
		newCollection: 	an OrderedCollection(initDrawing -> d#setOutputFormats(List<Outp...etc...
		element: 	keyPressed -> #fireUndoableEditHappened(UndoableEdit) (Invocation)
		index: 	15
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


OrderedCollection(Collection)>>reject:
	Receiver: an OrderedCollection(redo -> editedFigure#setText(String) (Invocation) run -> view1#setDra...etc...
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
	Receiver's instance variables: 
		array: 	an Array(redo -> editedFigure#setText(String) (Invocation) run -> view1#...etc...
		firstIndex: 	1
		lastIndex: 	6855


MooseGroup>>reject:
	Receiver: Group (6855 FAMIXInvocations)
	Arguments and temporary variables: 
		aBlock: 	[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClas...etc...
		resultCollection: 	nil
		result: 	nil
	Receiver's instance variables: 
		mooseID: 	6828020
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage(redo -> editedFigure#setText(String) (Invoc...etc...


PolymorphismAnalyzer>>allPolymorphicCalls_computer
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 
		invocationsToPolyMethods: 	Group (6855 FAMIXInvocations)
		polyInvocations: 	nil
	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


PolymorphismAnalyzer>>allPolymorphicCalls
	Receiver: a PolymorphismAnalyzer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a MooseModel #jhotdraw(126994)
		polymorphicMessagesDict: 	nil
		modelMethods: 	Group (7645 FAMIXMethods)
		rootPolymorphicMethods: 	an OrderedCollection(JColorWheel>>installMouseListeners...etc...
		polymorphicMethods: 	an OrderedCollection(StraightLineFigure>>drawFill(Graphics2...etc...
		methodsCallingPolymorphicMethods: 	nil
		polymorphicMethodSignatures: 	nil
		allPolymorphicCalls: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(897318912)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ PolymorphismAnalyzer forJHotDraw allPolymorphicCalls
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(708837376)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(897318912)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(897318912)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(897318912)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (432@50)
		owner: 	a TransformMorph(864288768)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (432@50)
		color: 	Color black
		extension: 	a MorphExtension (918028288) [other:  (blinkStart -> 24169887) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'PolymorphismAnalyzer forJHotDraw allPolymorphicCalls 

Polymo...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(343408640)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(343408640)
		secondArg: 	a PluggableTextMorph(343408640)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(343408640)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(343408640)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	9
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil a KMCategoryTarget a KMCategoryTarget nil nil nil nil nil a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(343408640)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(343408640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(28.0@1003.0) corner: (468.0@1170.0)
		owner: 	a SystemWindow(673447936)
		submorphs: 	an Array(a TransformMorph(864288768))
		fullBounds: 	(28@1003) corner: (468@1170)
		color: 	Color white
		extension: 	a MorphExtension (892076032) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784)
		model: 	a Workspace
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(350224384)
		scroller: 	a TransformMorph(864288768)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(72876032)
		textMorph: 	a TextMorphForEditView(897318912)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 54)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(864288768)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(864288768)
		directKeymaps: 	a KMCategory



--- The full stack ---
PolymorphismAnalyzer(Object)>>halt
[:inv | 
| invokedMethod receiverObj invokedMethodClass receiverObjClass |
invokedMethod := inv candidates first.
	invokedMethodClass := invokedMethod belongsTo.
	receiverObj := inv receiver.
	receiverObjClass := nil.
	receiverObj class = FAMIXClass
		ifTrue: [receiverObjClass := receiverObj].
	receiverObj class = FAMIXLocalVariable
		ifTrue: [receiverObjClass := receiverObj declaredType].
	inv receiver isNil
		ifTrue: [self halt].
	receiverObjClass = invokedMethodClass] in PolymorphismAnalyzer>>allPolymorphicCalls_computer
[:element | (aBlock value: element)
		== false] in OrderedCollection(Collection)>>reject:
OrderedCollection>>select:
OrderedCollection(Collection)>>reject:
MooseGroup>>reject:
PolymorphismAnalyzer>>allPolymorphicCalls_computer
PolymorphismAnalyzer>>allPolymorphicCalls
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

