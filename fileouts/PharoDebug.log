THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "create:named:" is nil
22 October 2012 3:17:25.784 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #create:named:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	create: #package named: 'Polymorphism-EmpiricalStudy'
		exception: 	MessageNotUnderstood: receiver of "create:named:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ CodeComponent create: #package named: 'Polymorphism-Empiric...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(296747008)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	#(nil)
		chunk: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalStudy'''
	Receiver's instance variables: 



BlockClosure>>on:do:
	Receiver: [| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: sel...etc...
	Arguments and temporary variables: 
		exception: 	InMidstOfFileinNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
		startpc: 	146
		numArgs: 	0


[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
		bar: 	#(nil)
	Receiver's instance variables: 



[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Loading vw.st'
		argPoint: 	(488@331)
		argMinVal: 	0
		argMaxVal: 	33591
		argWorkBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33591
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Loading vw.st'
		aPoint: 	(488@331)
		minVal: 	0
		maxVal: 	33591
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Loading vw.st'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	33591
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
'Loading vw.st'

MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		announcement: 	'Loading vw.st'
		val: 	#(nil)
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



FileStream class>>fileIn:
	Receiver: FileStream
	Arguments and temporary variables: 
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
		ff: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/f...etc...
		fn: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (FileStream --- fileIn:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	FileStream
		label: 	'FileIn entire file'
		selector: 	#fileIn:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'File in the entire contents of the file, which is expected to con...etc...
		argumentGetter: 	nil
		buttonLabel: 	'Filein'


[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		stream: 	SimpleServiceEntry: (FileStream --- fileIn:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		anArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphis...etc...
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
		thirdArg: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymo...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: [handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]]
	Arguments and temporary variables: 
		aBlock: 	[stream close]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	90
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [(204@340) dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	(204@340)
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[(204@340) dropFilesEvent nil]
		index: 	3
		child: 	an ImageMorph(589561856)
		morphs: 	an Array(a TaskbarMorph(984088576) an ImageMorph(589561856))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(204@340) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #create:named:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
MultiByteFileStream(FileStream)>>fileIn
MultiByteFileStream>>fileIn
FileStream class>>fileIn:
SimpleServiceEntry>>performServiceFor:
[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "create:named:" is nil
22 October 2012 3:18:19.205 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #create:named:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	create: #package named: 'Polymorphism-EmpiricalStudy'
		exception: 	MessageNotUnderstood: receiver of "create:named:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ CodeComponent create: #package named: 'Polymorphism-Empiric...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(245891072)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		anObject: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalSt...etc...
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	#(nil)
		chunk: 	'CodeComponent create: #package named: ''Polymorphism-EmpiricalStudy'''
	Receiver's instance variables: 



BlockClosure>>on:do:
	Receiver: [| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: sel...etc...
	Arguments and temporary variables: 
		exception: 	InMidstOfFileinNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
		startpc: 	146
		numArgs: 	0


[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		val: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
		bar: 	#(nil)
	Receiver's instance variables: 



[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Loading vw.st'
		argPoint: 	(488@331)
		argMinVal: 	0
		argMaxVal: 	33626
		argWorkBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading vw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	33626
		minVal: 	0
		aPoint: 	(488@331)
		progressTitle: 	'Loading vw.st'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Loading vw.st'
		aPoint: 	(488@331)
		minVal: 	0
		maxVal: 	33626
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Loading vw.st'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	33626
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
'Loading vw.st'

MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 
		announcement: 	'Loading vw.st'
		val: 	#(nil)
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



FileStream class>>fileIn:
	Receiver: FileStream
	Arguments and temporary variables: 
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
		ff: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphism/f...etc...
		fn: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/vw.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (FileStream --- fileIn:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	FileStream
		label: 	'FileIn entire file'
		selector: 	#fileIn:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'File in the entire contents of the file, which is expected to con...etc...
		argumentGetter: 	nil
		buttonLabel: 	'Filein'


[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		stream: 	SimpleServiceEntry: (FileStream --- fileIn:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		anArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphis...etc...
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorp...etc...
		secondArg: 	a PasteUpMorph(425197568) [world]
		thirdArg: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymo...etc...
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: [handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]]
	Arguments and temporary variables: 
		aBlock: 	[stream close]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	90
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [(205@292) dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	(205@292)
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (976@662)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (976@662)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[(205@292) dropFilesEvent nil]
		index: 	3
		child: 	an ImageMorph(589561856)
		morphs: 	an Array(a TaskbarMorph(984088576) an ImageMorph(589561856))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(205@292) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #create:named:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
MultiByteFileStream(FileStream)>>fileIn
MultiByteFileStream>>fileIn
FileStream class>>fileIn:
SimpleServiceEntry>>performServiceFor:
[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:30:30.875 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults hd_startSnautAndHighlightStuff hd...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults hd_startSnautAndHighlightStuff hd...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults hd_startSnautAndHighlightStuff hd...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBMethodNode>>testSuite
	Receiver: OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Method

		theClass: 	PolymorphismAnalyzerTest
		selector: 	#testAbstractPolymorphicMethods


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testAbstractPolymorphicMethods>
		requestor: 	an OBColumn(testAbstractPolymorphicMethods)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1880@811) mouseUp 265226 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(359399424)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	265226
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1880@811)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a ToggleMenuItemMorph(359399424)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a ToggleMenuItemMorph(359399424)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(359399424)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		owner: 	a MenuMorph(188743680)
		submorphs: 	#()
		fullBounds: 	(1801.0@803.0) corner: (2038.0@817.0)
		color: 	Color black
		extension: 	a MorphExtension (362020864)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a MenuMorph(188743680)
		localEvt: 	[(1880@811) mouseUp 265226 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(359399424)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		aMorph: 	a MenuMorph(188743680)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(188743680)
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (192675840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(359399424)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(447479808)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(188743680)
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (192675840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(359399424)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(447479808)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(188743680)
	Arguments and temporary variables: 
		evt: 	[(1880@811) mouseUp 265226 nil]
	Receiver's instance variables: 
		bounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(447479808)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1796.0@563.0) corner: (2043.0@960.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (192675840) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testAbstractPolymorphicMethods)
		selectedItem: 	a ToggleMenuItemMorph(359399424)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(447479808)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1880@811) mouseUp 265226 nil]
		focusHolder: 	a MenuMorph(188743680)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1880@811) corner: (1896@827)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1880@811) corner: (1896@827)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1880@811) mouseOver nil nil]
		targetOffset: 	(79.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 265226 1880 811 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1880@811) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
OBMethodNode>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:10.185 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1377@407) mouseUp 544536 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	544536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1377@407)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a MenuMorph(485752832)
		localEvt: 	[(1377@407) mouseUp 544536 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(142082048)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(720371712)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:12.859 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1377@407) mouseUp 544536 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	544536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1377@407)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
		aMorph: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:13.747 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1377@407) mouseUp 544536 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(142082048)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	544536
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1377@407)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:14.334 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1377@407) mouseUp 544536 nil]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:14.902 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:15.47 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(142082048)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1377@407) mouseUp 544536 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		owner: 	a MenuMorph(485752832)
		submorphs: 	#()
		fullBounds: 	(1346.0@404.0) corner: (1582.0@418.0)
		color: 	Color black
		extension: 	a MorphExtension (144703488)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:15.995 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:16.419 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:16.871 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:35:17.444 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn()


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:37:00.718 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1214@331) mouseUp 655069 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	655069
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1214@331)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a MenuMorph(584581120)
		localEvt: 	[(1214@331) mouseUp 655069 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(234356736)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(819200000)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:37:04.683 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

Message>>sentTo:
	Receiver: asFilename
	Arguments and temporary variables: 
		receiver: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		selector: 	#asFilename
		args: 	#()
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	MessageNotUnderstood: ByteString>>asFilename
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1214@331) mouseUp 655069 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	655069
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1214@331)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(234356736)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
	Receiver's instance variables: 
		bounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		owner: 	a MenuMorph(584581120)
		submorphs: 	#()
		fullBounds: 	(1156.0@324.0) corner: (1392.0@338.0)
		color: 	Color black
		extension: 	a MorphExtension (236978176)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1214@331) mouseUp 655069 nil]
		aMorph: 	a ToggleMenuItemMorph(234356736)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:38:03.804 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>DoItIn:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		ThisContext: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	PolymorphismAnalyzer class>>forFile:
		receiver: 	PolymorphismAnalyzer
		aRequestor: 	a TextMorphForEditView(784072704)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ (ThisContext namedTempAt: 1) asFilename
		method: 	(PolymorphismAnalyzer class>>#DoItIn: "a CompiledMethod(1047789568)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(784072704)
		class: 	PolymorphismAnalyzer class
		category: 	nil
		context: 	PolymorphismAnalyzer class>>forFile:
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(784072704)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(784072704)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(230424576)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(230424576)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(230424576)
		secondArg: 	a PluggableTextMorph(230424576)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(230424576)
		secondArg: 	a PluggableTextMorph(230424576)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(230424576)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(230424576)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(230424576)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(230424576)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	11
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget nil ni...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(230424576)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(230424576)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(803209216)
		submorphs: 	an Array(a TransformMorph(749207552))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (778829824) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(237502464)
		scroller: 	a TransformMorph(749207552)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1031536640)
		textMorph: 	a TextMorphForEditView(784072704)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(67 to: 85)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(749207552)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(749207552)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(749207552)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	a PluggableTextMorph(230424576)
		submorphs: 	an Array(a TextMorphForEditView(784072704))
		fullBounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		color: 	Color transparent
		extension: 	a MorphExtension (751042560) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-427.0@ -513....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (1654@338)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(784072704)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(784072704)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(784072704)
	Receiver's instance variables: 
		timeStamp: 	718161
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(319.0@194.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	34


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(784072704)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@338)
		owner: 	a TransformMorph(749207552)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@338)
		color: 	Color black
		extension: 	a MorphExtension (804782080) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName |
	modelNam...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(230424576)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>asFilename
22 October 2012 3:39:08.949 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>doesNotUnderstand: #asFilename
	Receiver: '../testing/jhotdraw7_20090906.mse'
	Arguments and temporary variables: 
		aMessage: 	asFilename
		exception: 	MessageNotUnderstood: ByteString>>asFilename
		resumeValue: 	nil
	Receiver's instance variables: 
'../testing/jhotdraw7_20090906.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	nil
		loader: 	nil
		modelName: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1175@328) mouseUp 783297 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1175@328) mouseUp 783297 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1175@328) mouseUp 783297 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1175@328) mouseUp 783297 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(382730240)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	783297
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1175@328)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		aMorph: 	a ToggleMenuItemMorph(382730240)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		aMorph: 	a ToggleMenuItemMorph(382730240)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(382730240)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		owner: 	a MenuMorph(406323200)
		submorphs: 	#()
		fullBounds: 	(1107.0@320.0) corner: (1343.0@334.0)
		color: 	Color black
		extension: 	a MorphExtension (385351680)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1175@328) mouseUp 783297 nil]
		aMorph: 	a MenuMorph(406323200)
		localEvt: 	[(1175@328) mouseUp 783297 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(382730240)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(587726848)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #asFilename
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:46:21.41 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1236@331) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:46:29.399 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1199@335) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:46:37.9 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1139@324) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:47:14.496 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		fromIndex: 	0
		toIndex: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection('Choose another name' 'Cancel')
	Arguments and temporary variables: 
		anInteger: 	0
	Receiver's instance variables: 
		array: 	#('Choose another name' 'Cancel' nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	2


StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
	Receiver: StandardFileStream
	Arguments and temporary variables: 
		fullFileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moo...etc...
		dir: 	UnixFileDirectory on '/Users/caracciolo/Projects/experiments-polymorphism/...etc...
		files: 	#()
		choices: 	an OrderedCollection('Choose another name' 'Cancel')
		selection: 	0
		newName: 	nil
		fileName: 	'jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	FileStream
		methodDict: 	a MethodDictionary(#actAsExecutor->(StandardFileStream>>#actAsExecu...etc...
		format: 	146
		instanceVariables: 	#('name' 'fileID' 'buffer1')
		organization: 	('*Fuel' fuelNextWordsInto: nextBytesPutAll:)
('*Network-RemoteDi...etc...
		subclasses: 	{MultiByteFileStream. AttachableFileStream}
		name: 	#StandardFileStream
		classPool: 	a Dictionary(#Registry->a WeakRegistry(<this WeakRegistry is locked>...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


MorphicUIManager>>fileDoesNotExistsDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments...etc...
	Receiver's instance variables: 
		interactiveParser: 	nil


FileDoesNotExistException>>defaultAction
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
nil

FileDoesNotExistException(Exception)>>pass
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[(1177@329) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Pr...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>cull:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArg: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polym...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-p...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileDoesNotExistException(Exception)>>signal
	Receiver: FileDoesNotExistException: '/Users/caracciolo/Projects/experiments-polymorphism/fileouts/m...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	MultiByteFileStream
		signalContext: 	FileDoesNotExistException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		readOnly: 	true


MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		fullName: 	'/Users/caracciolo/Projects/experiments-polymorphism/fileouts/moose4....etc...
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>readOnlyFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #noname(0)
		loader: 	nil
		modelName: 	nil
		stream: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
StandardFileStream class>>readOnlyFileDoesNotExistUserHandling:
MorphicUIManager>>fileDoesNotExistsDefaultAction:
FileDoesNotExistException>>defaultAction
UndefinedObject>>handleSignal:
FileDoesNotExistException(Exception)>>pass
[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	ex pass] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileDoesNotExistException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>readOnlyFileNamed:
FileStream class>>readOnlyFileNamed:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:47:49.598 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1193@372)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1193@372)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1193@372)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1193@372)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	5
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:48:22.478 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1277@374)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1277@374)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1277@374)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1277@374)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	6
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:49:46.344 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1250@330)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1250@330)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1250@330)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1250@330)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	7
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'../testing/jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:52:42.75 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1163@320)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1163@320)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1163@320)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1163@320)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	8
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:52:57.861 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jhotdraw7_20090906.mse'
		argPoint: 	(1208@323)
		argMinVal: 	1
		argMaxVal: 	13283172
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13283172
		minVal: 	1
		aPoint: 	(1208@323)
		progressTitle: 	'Parsing jhotdraw7_20090906.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1208@323)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jhotdraw7_20090906.mse'
		aPoint: 	(1208@323)
		minVal: 	1
		maxVal: 	13283172
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	nil
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #jhotdraw7_20090906(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	9
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jhotdraw7_20090906'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jhotdraw7_20090906.mse'
		moosemodel: 	a MooseModel #jhotdraw7_20090906(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:54:20.646 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(Object)>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
		index: 	1
		repOff: 	-1
	Receiver's instance variables: 
' '

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		start: 	0
		stop: 	0
		newSize: 	1
	Receiver's instance variables: 
'model.mse'

PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(217562)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@326) mouseUp 240848 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@326) mouseUp 240848 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@326) mouseUp 240848 nil]
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(475529216)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@326) mouseUp 240848 nil]
	Receiver's instance variables: 
		bounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		owner: 	a MenuMorph(334495744)
		submorphs: 	#()
		fullBounds: 	(1172.0@321.0) corner: (1408.0@335.0)
		color: 	Color black
		extension: 	a MorphExtension (478150656)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteString(String)>>replaceFrom:to:with:startingAt:
ByteString>>replaceFrom:to:with:startingAt:
ByteString(SequenceableCollection)>>copyFrom:to:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 October 2012 3:55:32.178 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(Object)>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString>>at:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
'model.mse'

ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
		index: 	1
		repOff: 	-1
	Receiver's instance variables: 
' '

ByteString(String)>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString>>replaceFrom:to:with:startingAt:
	Receiver: ' '
	Arguments and temporary variables: 
		start: 	1
		stop: 	1
		replacement: 	'model.mse'
		repStart: 	0
	Receiver's instance variables: 
' '

ByteString(SequenceableCollection)>>copyFrom:to:
	Receiver: 'model.mse'
	Arguments and temporary variables: 
		start: 	0
		stop: 	0
		newSize: 	1
	Receiver's instance variables: 
'model.mse'

PolymorphismAnalyzer class>>DoItIn:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		ThisContext: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	PolymorphismAnalyzer class>>forFile:
		receiver: 	PolymorphismAnalyzer
		aRequestor: 	a TextMorphForEditView(510656512)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ (ThisContext namedTempAt: 1)
		copyFrom: ((...etc...
		method: 	(PolymorphismAnalyzer class>>#DoItIn: "a CompiledMethod(207093760)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(510656512)
		class: 	PolymorphismAnalyzer class
		category: 	nil
		context: 	PolymorphismAnalyzer class>>forFile:
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510656512)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	PolymorphismAnalyzer
		ctxt: 	PolymorphismAnalyzer class>>forFile:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(510656512)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(510656512)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@546)
		owner: 	a TransformMorph(765460480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@546)
		color: 	Color black
		extension: 	a MorphExtension (531365888) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'forFile: fileName

	| moosemodel loader modelName stream|
	
m...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(246677504)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(246677504)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(246677504)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(246677504)
		secondArg: 	a PluggableTextMorph(246677504)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(246677504)
		secondArg: 	a PluggableTextMorph(246677504)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(246677504)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(246677504)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(246677504)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(246677504)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	10
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(nil nil nil nil a KMCategoryTarget nil nil a KMCategoryTarget a...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(246677504)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(246677504)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424.0@513.0) corner: (2084.0@1139.0)
		owner: 	an AlignmentMorph(686555136)
		submorphs: 	an Array(a TransformMorph(765460480))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color white
		extension: 	a MorphExtension (505413632) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(253755392)
		scroller: 	a TransformMorph(765460480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1047789568)
		textMorph: 	a TextMorphForEditView(510656512)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(342 to: 417)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(765460480)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(765460480)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(765460480)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(424@513) corner: (2084@1139)
		owner: 	a PluggableTextMorph(246677504)
		submorphs: 	an Array(a TextMorphForEditView(510656512))
		fullBounds: 	(424@513) corner: (2084@1139)
		color: 	Color transparent
		extension: 	a MorphExtension (767295488) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-427@ -513))
		smoothing: 	1
		localBounds: 	(0@0) corner: (1654@546)



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(SequenceableCollection)>>replaceFrom:to:with:startingAt:
ByteString(String)>>replaceFrom:to:with:startingAt:
ByteString>>replaceFrom:to:with:startingAt:
ByteString(SequenceableCollection)>>copyFrom:to:
PolymorphismAnalyzer class>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FMSyntaxError: Syntax error at 2
22 October 2012 3:57:49.951 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMUtil>>signal:
	Receiver: a FMUtil
	Arguments and temporary variables: 
		execption: 	FMSyntaxError: Syntax error at 2
	Receiver's instance variables: 
a FMUtil

FMMSEParser>>syntaxError:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		aString: 	'Syntax error at 2'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>syntaxError
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing jfreechart-mod.mse'
		argPoint: 	(1149@327)
		argMinVal: 	1
		argMaxVal: 	13690500
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	13690500
		minVal: 	1
		aPoint: 	(1149@327)
		progressTitle: 	'Parsing jfreechart-mod.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing jfreechart-mod.mse'
		aPoint: 	(1149@327)
		minVal: 	1
		maxVal: 	13690500
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing jfreechart-mod.mse'
		aPoint: 	(1149@327)
		minVal: 	1
		maxVal: 	13690500
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$M
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack()
		elements: 	an OrderedCollection()
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	0
		reminderDict: 	an IdentityDictionary()
		serialDict: 	an IdentityDictionary()


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(2)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(2)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #'jfreechart-mod'(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	435233
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'jfreechart-mod'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'jfreechart-mod.mse'
		moosemodel: 	a MooseModel #'jfreechart-mod'(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testAbstractPolymorphicMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testAbstractPolymorphicMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	1
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	nil
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>suite
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


OBClassNode(OBClassAwareNode)>>testSuite
	Receiver: OBClassNode<PolymorphismAnalyzerTest>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	Class
#allCategory->AllMethodCategory
#categories->MethodCategory

		theClass: 	PolymorphismAnalyzerTest


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)



--- The full stack ---
FMUtil>>signal:
FMMSEParser>>syntaxError:
FMMSEParser>>syntaxError
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
22 October 2012 4:02:22.802 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

Array(SequenceableCollection)>>at:ifAbsent:
	Receiver: {Unicode. JISX0208. GB2312. KSX1001. JISX0208. JapaneseEnvironment. SimplifiedChineseEnvir...etc...
	Arguments and temporary variables: 
		index: 	1
		exceptionBlock: 	[EncodedCharSets at: 1]
	Receiver's instance variables: 
{Unicode. JISX0208. GB2312. KSX1001. JISX0208. JapaneseEnvironment. SimplifiedChineseEnvir...etc...

EncodedCharSet class>>charsetAt:
	Receiver: EncodedCharSet
	Arguments and temporary variables: 
		encoding: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	{GB2312. JISX0208. KSX1001. Latin1. Unicode}
		name: 	#EncodedCharSet
		classPool: 	a Dictionary(#EncodedCharSets->{Unicode. JISX0208. GB2312. KSX1001. ...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-Encodings'
		traitComposition: 	{}
		localSelectors: 	nil
		compoundTextSequence: 	nil


Character>>isLetter
	Receiver: $r
	Arguments and temporary variables: 

	Receiver's instance variables: 
		value: 	114


Character>>isAlphaNumeric
	Receiver: $r
	Arguments and temporary variables: 

	Receiver's instance variables: 
		value: 	114


FMMSEParser>>tNAME
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5155402
		n: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5155374
		n: 	'FAMIX.Access'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing model.mse'
		argPoint: 	(1135@324)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1135@324)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing model.mse'
		aPoint: 	(1135@324)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing model.mse'
		aPoint: 	(1135@324)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$r
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	65970
		reminderDict: 	an IdentityDictionary(size 32857)
		serialDict: 	an IdentityDictionary(size 31722)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(4)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(4)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #model(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	870456
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'model'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>initialize
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	nil
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


PolymorphismAnalyzerTest class(Behavior)>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class>>new
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>selector:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		aSymbol: 	#testHd_NOPMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		suite: 	a TestSuite
		selector: 	#testHd_NOPMethods
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		binaryBlock: 	#testHd_NOPMethods
		nextValue: 	[:suite :selector | suite
		addTest: (self selector: selector);
		 y...etc...
		each: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection>>do:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	2
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarc...etc...
	Arguments and temporary variables: 
		thisValue: 	a TestSuite
		binaryBlock: 	[:suite :selector | suite
		addTest: (self selector: selector);
		...etc...
		nextValue: 	an Array(a TestSuite)
	Receiver's instance variables: 
		array: 	#(#testAbstractPolymorphicMethods #testHd_NOPMethods #testHd_allHierarch...etc...
		firstIndex: 	1
		lastIndex: 	24


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 
		testMethods: 	an OrderedCollection(#testAbstractPolymorphicMethods #testHd_NOPMe...etc...
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
	Receiver: PolymorphismAnalyzerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#complexityResults->(PolymorphismAnalyzerTest>>#...etc...
		format: 	142
		instanceVariables: 	#('analyzer' 'hotDrawAnalyzer' 'jHotDrawAnalyzer' 'jFreeChar...etc...
		organization: 	('evaluating' complexityResults methodStats runningTheThing setUp...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...



--- The full stack ---
Array(SequenceableCollection)>>at:ifAbsent:
EncodedCharSet class>>charsetAt:
Character>>isLetter
Character>>isAlphaNumeric
FMMSEParser>>tNAME
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>initialize
PolymorphismAnalyzerTest class(Behavior)>>new
PolymorphismAnalyzerTest class>>new
PolymorphismAnalyzerTest class(TestCase class)>>selector:
[:suite :selector | suite
		addTest: (self selector: selector);
		 yourself] in PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
[:each | nextValue := binaryBlock value: nextValue value: each] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromMethods:
PolymorphismAnalyzerTest class(TestCase class)>>buildSuiteFromSelectors
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PolymorphismAnalyzerTest class(TestCase class)>>buildSuite
PolymorphismAnalyzerTest class(TestCase class)>>suite
OBClassNode(OBClassAwareNode)>>testSuite
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
22 October 2012 4:04:14.545 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMMSEParser>>Reference2
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	nil
		n: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Value
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5402431
		n: 	'signature'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	5402319
		n: 	'FAMIX.Invocation'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	TestResult>>runCase:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase run...etc...


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing model.mse'
		argPoint: 	(1227@329)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1227@329)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing model.mse'
		aPoint: 	(1227@329)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing model.mse'
		aPoint: 	(1227@329)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	67992
		reminderDict: 	an IdentityDictionary(size 33752)
		serialDict: 	an IdentityDictionary(size 33269)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(5)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(5)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #model(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	1119790
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'model'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>setUp
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
	Receiver: 1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Receiver's instance variables: 
		timeStamp: 	2012-10-22T16:03:19.818+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphic...etc...
		passed: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase anno...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[:ex | ex sunitAnnounce: aTestCase toResult: self]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCase:
		startpc: 	66
		numArgs: 	0


TestResult>>runCase:
	Receiver: 1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes
	Arguments and temporary variables: 
		aTestCase: 	PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Receiver's instance variables: 
		timeStamp: 	2012-10-22T16:03:19.818+02:00
		failures: 	a Set()
		errors: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphic...etc...
		passed: 	an OrderedCollection()


PolymorphismAnalyzerTest(TestCase)>>run:
	Receiver: PolymorphismAnalyzerTest>>#testHd_NOPMethods
	Arguments and temporary variables: 
		aResult: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		testSelector: 	#testHd_NOPMethods
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[:each | 
self changed: each.
	each run: aResult] in TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	PolymorphismAnalyzerTest>>#testHd_NOPMethods
		each: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpected ...etc...
	Receiver's instance variables: 
		tests: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicM...etc...
		resources: 	nil
		name: 	'PolymorphismAnalyzerTest'


OrderedCollection>>do:
	Receiver: an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods Polymorphis...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
self changed: each.
	each run: aResult]
		index: 	2
	Receiver's instance variables: 
		array: 	an Array(PolymorphismAnalyzerTest>>#testAbstractPolymorphicMethods Polym...etc...
		firstIndex: 	1
		lastIndex: 	24


TestSuite>>run:
	Receiver: a TestSuite
	Arguments and temporary variables: 
		aResult: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpect...etc...
	Receiver's instance variables: 
		tests: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicM...etc...
		resources: 	nil
		name: 	'PolymorphismAnalyzerTest'


[self run: result] in TestSuite>>run
	Receiver: a TestSuite
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
	Receiver's instance variables: 
		tests: 	an OrderedCollection(PolymorphismAnalyzerTest>>#testAbstractPolymorphicM...etc...
		resources: 	nil
		name: 	'PolymorphismAnalyzerTest'



--- The full stack ---
FMMSEParser>>Reference2
FMMSEParser>>Value
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTest>>setUp
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[aTestCase announce: TestCaseStarted withResult: self.
	aTestCase runCase.
	aTestCase announce: TestCaseEnded withResult: self.
	self addPass: aTestCase] in TestResult>>runCase:
BlockClosure>>on:do:
TestResult>>runCase:
PolymorphismAnalyzerTest(TestCase)>>run:
[:each | 
self changed: each.
	each run: aResult] in TestSuite>>run:
OrderedCollection>>do:
TestSuite>>run:
[self run: result] in TestSuite>>run
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
TestSuite>>run
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Unmatched string quote
22 October 2012 4:08:53.7 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

Scanner(Object)>>error:
	Receiver: a Scanner
	Arguments and temporary variables: 
		aString: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>notify:
	Receiver: a Scanner
	Arguments and temporary variables: 
		string: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>offEnd:
	Receiver: a Scanner
	Arguments and temporary variables: 
		aString: 	'Unmatched string quote'
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>xSingleQuote
	Receiver: a Scanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanToken
	Receiver: a Scanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanLitVec
	Receiver: a Scanner
	Arguments and temporary variables: 
		s: 	a WriteStream
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


Scanner>>scanTokens:
	Receiver: a Scanner
	Arguments and temporary variables: 
		textOrString: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
...etc...
	Receiver's instance variables: 
		source: 	a ReadStream
		mark: 	147
		hereChar: 	$􏿿
		aheadChar: 	$􏿿
		token: 	#PolyExp
		tokenType: 	#xSingleQuote
		currentComment: 	nil
		buffer: 	a WriteStream
		typeTable: 	#(#xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xBinary #xB...etc...


ORClassDefinition(OBClassDefinition)>>nameOfClassDefinedBy:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	i...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition(OBClassDefinition)>>isRedefinition:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aDefinition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition(OBClassDefinition)>>confirmDefinition:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	i...etc...
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition>>defineClass:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		definition: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	i...etc...
		aController: 	an OBPluggableTextMorph(439877632)
		change: 	nil
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


ORClassDefinition(OBClassDefinition)>>accept:notifying:
	Receiver: an ORClassDefinition
	Arguments and temporary variables: 
		aText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instan...etc...
		aController: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)
		template: 	'TestCase subclass: #PolymorphismAnalyzerTest
	instanceVariableNames:...etc...


[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	...etc...
		def: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


BlockClosure>>on:do:
	Receiver: [def accept: aText notifying: aController]
	Arguments and temporary variables: 
		exception: 	OBAnnouncerRequest
		handlerAction: 	[:notification | notification resume: self announcer]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnoun...etc...
		startpc: 	51
		numArgs: 	0


[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	an ORClassDefinition
		aController: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	...etc...
		def: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>withDefinitionDo:ifNil:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		workBlock: 	[:def | [def accept: aText notifying: aController]
		on: OBAnnouncer...etc...
		nilBlock: 	[true]
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBDefinitionPanel>>accept:notifying:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instan...etc...
		aController: 	an OBPluggableTextMorph(439877632)
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		acceptedText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
...etc...
	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


BlockClosure>>ensure:
	Receiver: [^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perfo...etc...
	Arguments and temporary variables: 
		aBlock: 	[unstyledAcceptText := nil]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
		startpc: 	65
		numArgs: 	0


OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		acceptedText: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
...etc...
	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(80 to: 79)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBPluggableTextMorph(PluggableTextMorph)>>accept
	Receiver: an OBPluggableTextMorph(439877632)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(526.0@602.0) corner: (2473.0@1484.0)
		owner: 	an OBGroupingMorph(679477248)
		submorphs: 	an Array(a TransformMorph(962068480))
		fullBounds: 	(526@602) corner: (2473@1484)
		color: 	Color white
		extension: 	a MorphExtension (980418560) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBDefinitionPanel
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(446955520)
		scroller: 	a TransformMorph(962068480)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(170655744)
		textMorph: 	an OBTextMorph(985661440)
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(80 to: 79)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


OBTextMorphSelection>>accept
	Receiver: an OBTextMorphSelection
	Arguments and temporary variables: 

	Receiver's instance variables: 
		selection: 	(80 to: 79)
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		morph: 	an OBPluggableTextMorph(439877632)


OBAcceptTextCommand>>execute
	Receiver: an OBAcceptTextCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	an OBTextMorphSelection
		requestor: 	an OBDefinitionPanel


[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		each: 	an OBAcceptTextCommand
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBAcceptTextCommand)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an OBAcceptTextCommand nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBTextCommandScan
	Arguments and temporary variables: 
		aKeystroke: 	cmd+s
		aNode: 	an OBTextMorphSelection
		aRequestor: 	an OBDefinitionPanel
	Receiver's instance variables: 
		factories: 	an OrderedCollection(OBCmdBrowseSendersOfIt OBDoItTextCommand ORCmdS...etc...


OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
	Receiver: an OBDefinitionPanel
	Arguments and temporary variables: 
		aKeystroke: 	cmd+s
		aTextSelection: 	an OBTextMorphSelection
	Receiver's instance variables: 
		browser: 	an OBSystemBrowser
		definition: 	an ORClassDefinition
		selection: 	(1 to: 0)


OBTextMorph>>keyStroke:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(TextMorph)>>handleKeystroke:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-s>']
	Arguments and temporary variables: 
		anObject: 	an OBTextMorph(985661440)
	Receiver's instance variables: 
		timeStamp: 	1152147
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(1057.0@475.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	115
		charCode: 	115
		scanCode: 	1


OBTextMorph(Morph)>>handleEvent:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


OBTextMorph(Morph)>>handleFocusEvent:
	Receiver: an OBTextMorph(985661440)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1941@98)
		owner: 	a TransformMorph(962068480)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1941@98)
		color: 	Color black
		extension: 	a MorphExtension (1006370816) [other:  (blinkStart -> 1144013) (kmDi...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '
TestResource subclass: #PolymorphismAnalyzerTestJHD
	instanc...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	an OBPluggableTextMorph(439877632)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		focusHolder: 	an OBTextMorph(985661440)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1586@1077) corner: (1602@1093)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1586@1077) corner: (1602@1093)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1586@1077) mouseOver CMD nil nil]
		targetOffset: 	(176.0@42.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1151982 1586 1077 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		focusHolder: 	an OBTextMorph(985661440)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(1586@1077) corner: (1602@1093)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1586@1077) corner: (1602@1093)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1586@1077) mouseOver CMD nil nil]
		targetOffset: 	(176.0@42.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1151982 1586 1077 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-s>']
		focusHolder: 	an OBTextMorph(985661440)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1586@1077) corner: (1602@1093)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(1586@1077) corner: (1602@1093)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1586@1077) mouseOver CMD nil nil]
		targetOffset: 	(176.0@42.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1151982 1586 1077 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8



--- The full stack ---
Scanner(Object)>>error:
Scanner>>notify:
Scanner>>offEnd:
Scanner>>xSingleQuote
Scanner>>scanToken
Scanner>>scanLitVec
Scanner>>scanTokens:
ORClassDefinition(OBClassDefinition)>>nameOfClassDefinedBy:
ORClassDefinition(OBClassDefinition)>>isRedefinition:
ORClassDefinition(OBClassDefinition)>>confirmDefinition:
ORClassDefinition>>defineClass:notifying:
ORClassDefinition(OBClassDefinition)>>accept:notifying:
[def accept: aText notifying: aController] in [:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
BlockClosure>>on:do:
[:def | [def accept: aText notifying: aController]
		on: OBAnnouncerRequest
		do: [:notification | notification resume: self announcer]] in OBDefinitionPanel>>accept:notifying:
OBDefinitionPanel>>withDefinitionDo:ifNil:
OBDefinitionPanel>>accept:notifying:
[^ setTextSelector isNil
		or: [setTextSelector numArgs = 2
				ifTrue: [model
						perform: setTextSelector
						with: acceptedText
						with: self]
				ifFalse: [model perform: setTextSelector with: acceptedText]]] in OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
OBPluggableTextMorph(PluggableTextMorph)>>acceptTextInModel
OBPluggableTextMorph(PluggableTextMorph)>>acceptBasic
OBPluggableTextMorph(PluggableTextMorph)>>accept
OBTextMorphSelection>>accept
OBAcceptTextCommand>>execute
[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each execute.
			^ true].
	nil] in OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBTextCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OBDefinitionPanel(OBTextPanel)>>keystroke:selection:
OBTextMorph>>keyStroke:
OBTextMorph(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBTextMorph(Morph)>>handleEvent:
OBTextMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
22 October 2012 4:17:12.599 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

FMMSEParser>>backtrack:
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		integer: 	4842623
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Number
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4842623
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Primitive
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		p: 	nil
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Value
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Attribute
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4842601
		n: 	'previous'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Element
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		pos: 	4842540
		n: 	'FAMIX.Invocation'
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>Document
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


FMMSEParser>>basicRun
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 
		bar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Parsing model.mse'
		argPoint: 	(1211@456)
		argMinVal: 	1
		argMaxVal: 	35588555
		argWorkBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a MorphicUIManager
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
		maxVal: 	35588555
		minVal: 	1
		aPoint: 	(1211@456)
		progressTitle: 	'Parsing model.mse'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Parsing model.mse'
		aPoint: 	(1211@456)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


MorphicUIManager>>displayProgress:at:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Parsing model.mse'
		aPoint: 	(1211@456)
		minVal: 	1
		maxVal: 	35588555
		workBlock: 	[:bar | 
progBar := bar.
	self basicRun]
	Receiver's instance variables: 
		interactiveParser: 	nil


FMMSEParser>>run
	Receiver: a FMMSEParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		client: 	a MSEImporter
		buf: 	a WriteStream
		char: 	$)
		progBar: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	retu...etc...


MSEImporter(FMImporter)>>run
	Receiver: a MSEImporter
	Arguments and temporary variables: 
		parser: 	a FMMSEParser
	Receiver's instance variables: 
		stack: 	a Stack(a FMFutureElement)
		elements: 	an OrderedCollection(/** 
 * Common test setup.
 */
 (comment on nil>...etc...
		model: 	a FMRepository
		metamodel: 	a FMMetaRepository
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
		tally: 	63404
		reminderDict: 	an IdentityDictionary(size 31640)
		serialDict: 	an IdentityDictionary(size 29787)


MooseModel class>>importFrom:withMetamodel:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		aMetamodel: 	a FMMetaRepository
		tower: 	a FMCompleteTower
		importer: 	a MSEImporter
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(6)
		metaTower: 	a FMCompleteTower


MooseModel class>>importFrom:
	Receiver: MooseModel
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
	Receiver's instance variables: 
		superclass: 	MooseAbstractGroup
		methodDict: 	a MethodDictionary(#add:->(MooseModel>>#add: "a CompiledMethod(1002...etc...
		format: 	140
		instanceVariables: 	#('sourceLanguage' 'name')
		organization: 	('*Famix-Extensions' ensureClassesAndNamespaces isSmalltalk numbe...etc...
		subclasses: 	nil
		name: 	#MooseModel
		classPool: 	a Dictionary(#MostRecentOwner->nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Moose-Core'
		traitComposition: 	{}
		localSelectors: 	nil
		mostRecentOwner: 	nil
		rootModel: 	a MooseModel #Root(6)
		metaTower: 	a FMCompleteTower


MooseModel>>importFromMSEStream:
	Receiver: a MooseModel #model(0)
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorph...etc...
		repository: 	nil
	Receiver's instance variables: 
		mooseID: 	1383288
		state: 	a MooseDefaultState
		storage: 	a MooseGroupRuntimeStorage()
		sourceLanguage: 	nil
		name: 	'model'


PolymorphismAnalyzer class>>forFile:
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		fileName: 	'model.mse'
		moosemodel: 	a MooseModel #model(0)
		loader: 	nil
		modelName: 	nil
		stream: 	MultiByteFileStream: '/Users/caracciolo/Projects/experiments-polymorphi...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTestJHD>>setUp
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		description: 	nil
		model: 	nil


[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


BlockClosure>>ensure:
	Receiver: [candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]]
	Arguments and temporary variables: 
		aBlock: 	[current == candidate
		ifFalse: [candidate tearDown]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvaila...etc...
		startpc: 	69
		numArgs: 	0


PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		candidate: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aTestAsserter: 	PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Arguments and temporary variables: 
		each: 	PolymorphismAnalyzerTestJHD
	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeRootPolyMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


Array(SequenceableCollection)>>do:
	Receiver: {PolymorphismAnalyzerTestJHD}
	Arguments and temporary variables: 
		aBlock: 	[:each | each availableFor: self]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
{PolymorphismAnalyzerTestJHD}

PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeRootPolyMethods
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_visualizeRootPolyMethods
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_visualizeRootPolyMethods
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0



--- The full stack ---
FMMSEParser>>backtrack:
FMMSEParser>>Number
FMMSEParser>>Primitive
FMMSEParser>>Value
FMMSEParser>>Attribute
FMMSEParser>>Element
FMMSEParser>>Document
FMMSEParser>>basicRun
[:bar | 
progBar := bar.
	self basicRun] in FMMSEParser>>run
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
MorphicUIManager>>displayProgress:at:from:to:during:
FMMSEParser>>run
MSEImporter(FMImporter)>>run
MooseModel class>>importFrom:withMetamodel:
MooseModel class>>importFrom:
MooseModel>>importFromMSEStream:
PolymorphismAnalyzer class>>forFile:
PolymorphismAnalyzerTestJHD>>setUp
[candidate setUp.
	candidate isAvailable
		ifTrue: [current := candidate]] in PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
BlockClosure>>ensure:
PolymorphismAnalyzerTestJHD class(TestResource class)>>makeAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>isAvailable
PolymorphismAnalyzerTestJHD class(TestResource class)>>availableFor:
[:each | each availableFor: self] in PolymorphismAnalyzerTest(TestCase)>>runCase
Array(SequenceableCollection)>>do:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:22:19.742 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	24 run, 3 passes, 0 expected failures, 0 failures, 21 errors, 0 unexpec...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(937689088)
	Receiver's instance variables: 
		target: 	OBClassNode<PolymorphismAnalyzerTest>
		requestor: 	an OBColumn(PolymorphismAnalyzerTest)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(1227@340) mouseUp 1804763 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
	Receiver's instance variables: 
		timeStamp: 	1804763
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1227@340)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1005584384)'Run Tests'
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		owner: 	a MenuMorph(187695104)
		submorphs: 	#()
		fullBounds: 	(1179.0@331.0) corner: (1415.0@345.0)
		color: 	Color black
		extension: 	a MorphExtension (1008205824)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Tests'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(937689088))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a MenuMorph(187695104)
		localEvt: 	[(1227@340) mouseUp 1804763 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		morphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		aMorph: 	a MenuMorph(187695104)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(187695104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (191627264) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(422576128)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(187695104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (191627264) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(422576128)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(187695104)
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(422576128)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1174.0@140.0) corner: (1420.0@458.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (191627264) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(PolymorphismAnalyzerTest)
		selectedItem: 	a ToggleMenuItemMorph(1005584384)'Run Tests'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(422576128)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		focusHolder: 	a MenuMorph(187695104)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(1227@340) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		focusHolder: 	a MenuMorph(187695104)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		focusHolder: 	a MenuMorph(187695104)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(1227@340) mouseUp 1804763 nil]
		evt: 	[(1227@340) mouseUp 1804763 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(1227@340) mouseUp 1804763 nil]
		evtBuf: 	#(1 1804763 1227 340 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2498@810) corner: (2514@826)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2498@810) corner: (2514@826)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2498@810) mouseOver nil nil]
		targetOffset: 	(19.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1949086 2453 787 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(591396864))(an OBSys...etc...
		lastStepTime: 	1958287
		lastStepMessage: 	nil
		lastCycleTime: 	1958287
		alarms: 	a Heap()
		lastAlarmTime: 	1958287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(591396864))(an OBSys...etc...
		lastStepTime: 	1958287
		lastStepMessage: 	nil
		lastCycleTime: 	1958287
		alarms: 	a Heap()
		lastAlarmTime: 	1958287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:23:48.321 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>DoItIn:
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		ThisContext: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream
		aContext: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
		receiver: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
		aRequestor: 	a TextMorphForEditView(1008205824)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoItIn: ThisContext 
	^ hotDrawAnalyzer allHierarchies
		method: 	(PolymorphismAnalyzerTest>>#DoItIn: "a CompiledMethod(653000704)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream
		requestor: 	a TextMorphForEditView(1008205824)
		class: 	PolymorphismAnalyzerTest
		category: 	nil
		context: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
		ctxt: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1008205824)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	110
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result inspect]
		result: 	nil
		rcvr: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
		ctxt: 	PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(1008205824)
		selectionShowing: 	true
		model: 	a Debugger
		editingState: 	a SmalltalkEditingState


[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor
		evaluateSelectionAndDo: [:result | result inspec...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


PluggableTextMorph>>inspectIt
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
	Receiver: KMEditorsDefaultSettings
	Arguments and temporary variables: 
		morph: 	a PluggableTextMorph(456654848)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#KMEditorsDefaultSettings
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Keymapping-Editors'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		anArg: 	a PluggableTextMorph(456654848)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(456654848)
		secondArg: 	a PluggableTextMorph(456654848)
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:morph | morph inspectIt]
	Arguments and temporary variables: 
		firstArg: 	a PluggableTextMorph(456654848)
		secondArg: 	a PluggableTextMorph(456654848)
		thirdArg: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		outerContext: 	KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn...etc...
		startpc: 	119
		numArgs: 	1


KMCategoryTarget>>completeMatch:buffer:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		aKeymap: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(456654848)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(456654848)


[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aBuffer: 	a KMCategoryTarget
		l: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


Array(SequenceableCollection)>>do:
	Receiver: an Array(a KMDispatcher a KMCategoryTarget)
	Arguments and temporary variables: 
		aBlock: 	[:l | l completeMatch: self buffer: aBuffer]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a KMDispatcher a KMCategoryTarget)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		aListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		listeners: 	an Array(a KMDispatcher a KMCategoryTarget)
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #inspectIt on Cmd + I do [:morph | morph inspectIt]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		anAction: 	[^ self]
	Receiver's instance variables: 
		action: 	[:morph | morph inspectIt]
		name: 	#inspectIt
		shortcut: 	Cmd + I
		defaultShortcut: 	Cmd + I
		description: 	''


[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		aMatchListener: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aBlock: 	an Array(a KMDispatcher a KMCategoryTarget)
		entry: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doIt on Cmd + D do [:morph | morph doIt]
 #printIt on Cmd + P do [:morph | morph pr...etc...
	Arguments and temporary variables: 
		aBlock: 	[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
	...etc...
		index: 	7
		each: 	#inspectIt on Cmd + I do [:morph | morph inspectIt]

		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	6
		array: 	an Array(#doIt on Cmd + D do [:morph | morph doIt]
 nil nil #printIt on ...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aMatchListener: 	an Array(a KMDispatcher a KMCategoryTarget)
		aBlock: 	[^ self]
	Receiver's instance variables: 
		name: 	#SmalltalkEditor
		platforms: 	a Dictionary(#MacOSX->a KMStorage #all->a KMStorage )


KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
	Receiver: a KMCategoryTarget
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		aListener: 	a KMDispatcher
		anAction: 	[^ self]
	Receiver's instance variables: 
		target: 	a PluggableTextMorph(456654848)
		category: 	a KMCategory
		morph: 	a PluggableTextMorph(456654848)


[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	a KMCategoryTarget
		aTarget: 	an OrderedCollection([keystroke '<Cmd-i>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


Set>>do:
	Receiver: a Set(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCate...etc...
	Arguments and temporary variables: 
		aBlock: 	[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
...etc...
		index: 	3
		each: 	a KMCategoryTarget
		indexLimiT: 	11
	Receiver's instance variables: 
		tally: 	5
		array: 	an Array(a KMCategoryTarget a KMCategoryTarget a KMCategoryTarget a KMCa...etc...


KMDispatcher>>dispatch:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Cmd-i>'])
		association: 	nil
		match: 	nil
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


KMDispatcher>>matchEvent:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		keyboardEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set(a KMCategoryTarget a KMCategoryTarget)
		morph: 	a PluggableTextMorph(456654848)
		directKeymaps: 	a KMCategory


PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a PluggableTextMorph(456654848)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	an AlignmentMorph(375390208)
		submorphs: 	an Array(a TransformMorph(975437824))
		fullBounds: 	(556@570) corner: (2216@1196)
		color: 	Color white
		extension: 	a MorphExtension (1002700800) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	a Debugger
		open: 	false
		accessor: 	nil
		scrollBar: 	a ScrollBar(463732736)
		scroller: 	a TransformMorph(975437824)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(184025088)
		textMorph: 	a TextMorphForEditView(1008205824)
		getTextSelector: 	#contents
		setTextSelector: 	#contents:notifying:
		getSelectionSelector: 	#contentsSelection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(47 to: 76)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TransformMorph(975437824)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TransformMorph(975437824)
		directKeymaps: 	a KMCategory


TransformMorph(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TransformMorph(975437824)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		owner: 	a PluggableTextMorph(456654848)
		submorphs: 	an Array(a TextMorphForEditView(1008205824))
		fullBounds: 	(556.0@570.0) corner: (2216.0@1196.0)
		color: 	Color transparent
		extension: 	a MorphExtension (977272832) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-559.0@ -570....etc...
		smoothing: 	1
		localBounds: 	(0@0) corner: (1654@66)


KMTarget>>dispatchOwnerKeystroke:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a TextMorphForEditView(1008205824)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


KMDispatcher>>dispatchKeystroke:
	Receiver: a KMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		target: 	a KMTarget
		buffer: 	an OrderedCollection()
		shortcut: 	
		currentEvent: 	[keystroke '<Cmd-i>']
		targets: 	a Set()
		morph: 	a TextMorphForEditView(1008205824)
		directKeymaps: 	a KMCategory


TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-i>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(1008205824)
	Receiver's instance variables: 
		timeStamp: 	2046752
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	(290.0@61.0)
		handler: 	nil
		wasHandled: 	true
		keyValue: 	105
		charCode: 	105
		scanCode: 	34


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(1008205824)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-i>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1654@66)
		owner: 	a TransformMorph(975437824)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (1654@66)
		color: 	Color black
		extension: 	a MorphExtension (1028653056) [other:  (myDependents -> a Dependents...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'testHd_allHierarchies
	<test>

	self assert: (hotDrawAnalyzer...etc...
		wrapFlag: 	true
		paragraph: 	a Paragraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		editView: 	a PluggableTextMorph(456654848)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>DoItIn:
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
[textMorph editor
		evaluateSelectionAndDo: [:result | result inspect]] in PluggableTextMorph>>inspectIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>inspectIt
[:morph | morph inspectIt] in KMEditorsDefaultSettings class>>buildSmalltalkEditorKeymappingsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryTarget>>completeMatch:buffer:
[:l | l completeMatch: self buffer: aBuffer] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[:entry | entry
		onMatchWith: anEventBuffer
		notify: aMatchListener
		andDo: aBlock] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryTarget>>verifyMatchWith:notifying:thenDoing:
[:aTarget | aTarget
		verifyMatchWith: anEventBuffer
		notifying: self
		thenDoing: [^ self]] in KMDispatcher>>dispatch:
Set>>do:
KMDispatcher>>dispatch:
KMDispatcher>>matchEvent:
KMDispatcher>>dispatchKeystroke:
PluggableTextMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TransformMorph(Morph)>>dispatchKeystrokeForEvent:
KMTarget>>dispatchOwnerKeystroke:
KMDispatcher>>dispatchKeystroke:
TextMorphForEditView(Morph)>>dispatchKeystrokeForEvent:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:26:51.876 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2044@445) mouseUp 30360 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(823656448)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	30360
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2044@445)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a ToggleMenuItemMorph(823656448)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a ToggleMenuItemMorph(823656448)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(823656448)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		owner: 	a MenuMorph(386924544)
		submorphs: 	#()
		fullBounds: 	(2003.0@434.0) corner: (2240.0@448.0)
		color: 	Color black
		extension: 	a MorphExtension (826277888)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a MenuMorph(386924544)
		localEvt: 	[(2044@445) mouseUp 30360 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(823656448)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		aMorph: 	a MenuMorph(386924544)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(386924544)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (390594560) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(823656448)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(729808896)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(386924544)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (390594560) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(823656448)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(729808896)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(386924544)
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(729808896)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(1998.0@194.0) corner: (2245.0@591.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (390594560) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(823656448)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(729808896)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		focusHolder: 	a MenuMorph(386924544)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2044@445) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an I...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		focusHolder: 	a MenuMorph(386924544)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		focusHolder: 	a MenuMorph(386924544)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2044@445) mouseUp 30360 nil]
		evt: 	[(2044@445) mouseUp 30360 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2044@445) mouseUp 30360 nil]
		evtBuf: 	#(1 30360 2044 445 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2495@608) corner: (2511@624)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2495@608) mouseOver nil nil]
		targetOffset: 	(41.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 92339 2420 892 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	97800
		lastStepMessage: 	nil
		lastCycleTime: 	97800
		alarms: 	a Heap()
		lastAlarmTime: 	97800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(760741888))(an OBSys...etc...
		lastStepTime: 	97800
		lastStepMessage: 	nil
		lastCycleTime: 	97800
		alarms: 	a Heap()
		lastAlarmTime: 	97800
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "create:named:" is nil
22 October 2012 4:48:05.739 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

UndefinedObject(Object)>>doesNotUnderstand: #create:named:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	create: #package named: 'HotDraw'
		exception: 	MessageNotUnderstood: receiver of "create:named:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'CodeComponent create: #package named: ''HotDraw'''
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ CodeComponent create: #package named: 'HotDraw'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(881852416)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''HotDraw'''
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:for:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''HotDraw'''
		anObject: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


Compiler class>>evaluate:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'CodeComponent create: #package named: ''HotDraw'''
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 
		val: 	#('From VisualWorks¬Æ NonCommercial, 7.7.1 of July 26, 2010 on October 22,...etc...
		chunk: 	'CodeComponent create: #package named: ''HotDraw'''
	Receiver's instance variables: 



BlockClosure>>on:do:
	Receiver: [| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: sel...etc...
	Arguments and temporary variables: 
		exception: 	InMidstOfFileinNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
		startpc: 	146
		numArgs: 	0


[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 
		val: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	return :...etc...
		bar: 	#('From VisualWorks¬Æ NonCommercial, 7.7.1 of July 26, 2010 on October 22,...etc...
	Receiver's instance variables: 



[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


BlockClosure>>on:do:
	Receiver: [result := workBlock value: progress]
	Arguments and temporary variables: 
		exception: 	ProgressNotification
		handlerAction: 	[:ex | 
ex extraParam isString
		ifTrue: [SystemProgressMorph un...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	[[result := workBlock value: progress]
		on: ProgressNotification...etc...
		startpc: 	87
		numArgs: 	0


[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


BlockClosure>>ensure:
	Receiver: [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extr...etc...
	Arguments and temporary variables: 
		aBlock: 	[SystemProgressMorph close: progress]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ProgressInitiationException>>defaultMorphicAction
		startpc: 	81
		numArgs: 	0


ProgressInitiationException>>defaultMorphicAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		progress: 	[:barValArg | 
| barVal return newBarSize |
barVal := barValArg.
	ret...etc...
		result: 	#(nil)
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


MorphicUIManager>>progressInitiationExceptionDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	ProgressInitiationException
	Receiver's instance variables: 
		interactiveParser: 	nil


ProgressInitiationException>>defaultAction
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	ProgressInitiationException
	Receiver's instance variables: 
nil

ProgressInitiationException(Exception)>>signal
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


ProgressInitiationException>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		argString: 	'Loading HotDraw.st'
		argPoint: 	(1254@767)
		argMinVal: 	0
		argMaxVal: 	165
		argWorkBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
		...etc...
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	'Loading HotDraw.st'
		signalContext: 	ProgressInitiationException(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
		maxVal: 	165
		minVal: 	0
		aPoint: 	(1254@767)
		progressTitle: 	'Loading HotDraw.st'


ProgressInitiationException class>>display:at:from:to:during:
	Receiver: ProgressInitiationException
	Arguments and temporary variables: 
		aString: 	'Loading HotDraw.st'
		aPoint: 	(1254@767)
		minVal: 	0
		maxVal: 	165
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->(ProgressInitiationException>>#d...etc...
		format: 	152
		instanceVariables: 	#('workBlock' 'maxVal' 'minVal' 'aPoint' 'progressTitle')
		organization: 	('*Morphic' defaultMorphicAction)
('accessing' maxVal minVal poin...etc...
		subclasses: 	nil
		name: 	#ProgressInitiationException
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'UIManager-Support'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>displayProgressFrom:to:during:
	Receiver: 'Loading HotDraw.st'
	Arguments and temporary variables: 
		minVal: 	0
		maxVal: 	165
		workBlock: 	[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			se...etc...
	Receiver's instance variables: 
'Loading HotDraw.st'

MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 
		announcement: 	'Loading HotDraw.st'
		val: 	#('From VisualWorks¬Æ NonCommercial, 7.7.1 of July 26, 2010 on October 22,...etc...
	Receiver's instance variables: 



MultiByteFileStream(FileStream)>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



MultiByteFileStream>>fileIn
	Receiver: MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Arguments and temporary variables: 

	Receiver's instance variables: 



FileStream class>>fileIn:
	Receiver: FileStream
	Arguments and temporary variables: 
		fullName: 	'/Users/caracciolo/Desktop/HotDraw.st'
		ff: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		fn: 	'/Users/caracciolo/Desktop/HotDraw.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*Compression' viewGZipContents)
('*Network-URI' uri url)
('*Net...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary(#Stderr->MultiByteFileStream: #stderr #Stdin->nil #Stdi...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Files-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil


SimpleServiceEntry>>performServiceFor:
	Receiver: SimpleServiceEntry: (FileStream --- fileIn:)
	Arguments and temporary variables: 
		anObject: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Receiver's instance variables: 
		dependents: 	nil
		provider: 	FileStream
		label: 	'FileIn entire file'
		selector: 	#fileIn:
		usingLineAfter: 	true
		stateSelector: 	#none
		description: 	'File in the entire contents of the file, which is expected to con...etc...
		argumentGetter: 	nil
		buttonLabel: 	'Filein'


[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
	Receiver: ExternalDropHandler
	Arguments and temporary variables: 
		theOne: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		stream: 	SimpleServiceEntry: (FileStream --- fileIn:)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#extension->(ExternalDropHandler>>#extension "a ...etc...
		format: 	136
		instanceVariables: 	#('action' 'type' 'extension')
		organization: 	('accessing' extension handle:in:dropEvent: type)
('initialize' t...etc...
		subclasses: 	nil
		name: 	#ExternalDropHandler
		classPool: 	a Dictionary(#DefaultHandler->a DefaultExternalDropHandler #Register...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	nil
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		anArg: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		secondArg: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [:stream | theOne performServiceFor: stream]
	Arguments and temporary variables: 
		firstArg: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		secondArg: 	a PasteUpMorph(425197568) [world]
		thirdArg: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		outerContext: 	ExternalDropHandler class>>lookupServiceBasedHandler:
		startpc: 	130
		numArgs: 	1


ExternalDropHandler>>handle:in:dropEvent:
	Receiver: an ExternalDropHandler
	Arguments and temporary variables: 
		dropStream: 	MultiByteFileStream: '/Users/caracciolo/Desktop/HotDraw.st'
		pasteUp: 	a PasteUpMorph(425197568) [world]
		anEvent: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		action: 	[:stream | theOne performServiceFor: stream]
		type: 	nil
		extension: 	nil


[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>ensure:
	Receiver: [handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]]
	Arguments and temporary variables: 
		aBlock: 	[stream close]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>dropFiles:
		startpc: 	90
		numArgs: 	0


PasteUpMorph>>dropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


PasteUpMorph(Morph)>>handleDropFiles:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


DropFilesEvent>>sentTo:
	Receiver: [(265@913) dropFilesEvent nil]
	Arguments and temporary variables: 
		anObject: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		timeStamp: 	nil
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		position: 	(265@913)
		contents: 	1
		wasHandled: 	true


PasteUpMorph(Morph)>>handleEvent:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemProgressMorph(607911936) ...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
		localEvt: 	[(265@913) dropFilesEvent nil]
		index: 	4
		child: 	an ImageMorph(589561856)
		morphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an Imag...etc...
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(265@913) dropFilesEvent nil]
		aMorph: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		lastType: 	#dropFilesEvent
		lastDispatch: 	#dispatchDefault:with:



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #create:named:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					self class evaluatorClass evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(self class evaluatorClass evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							self class evaluatorClass evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
[result := workBlock value: progress] in [[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>on:do:
[[result := workBlock value: progress]
		on: ProgressNotification
		do: [:ex | 
			ex extraParam isString
				ifTrue: [SystemProgressMorph uniqueInstance labelAt: progress put: ex extraParam].
			ex resume]] in ProgressInitiationException>>defaultMorphicAction
BlockClosure>>ensure:
ProgressInitiationException>>defaultMorphicAction
MorphicUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
MultiByteFileStream(PositionableStream)>>fileInAnnouncing:
MultiByteFileStream(FileStream)>>fileIn
MultiByteFileStream>>fileIn
FileStream class>>fileIn:
SimpleServiceEntry>>performServiceFor:
[:stream | theOne performServiceFor: stream] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[handler
		ifNotNil: [handler
				handle: stream
				in: self
				dropEvent: anEvent]] in PasteUpMorph>>dropFiles:
BlockClosure>>ensure:
PasteUpMorph>>dropFiles:
PasteUpMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
PasteUpMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 4:58:51.742 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2115@441) mouseUp 1972546 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(593231872)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	1972546
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2115@441)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a ToggleMenuItemMorph(593231872)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a ToggleMenuItemMorph(593231872)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(593231872)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		owner: 	a MenuMorph(159645696)
		submorphs: 	#()
		fullBounds: 	(2058.0@430.0) corner: (2295.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (595853312)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a MenuMorph(159645696)
		localEvt: 	[(2115@441) mouseUp 1972546 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(593231872)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		aMorph: 	a MenuMorph(159645696)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(159645696)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (163315712) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(593231872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(502530048)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(159645696)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (163315712) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(593231872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(502530048)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(159645696)
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(502530048)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2053.0@190.0) corner: (2300.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (163315712) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(593231872)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(502530048)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		focusHolder: 	a MenuMorph(159645696)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	an OBPluggableTextMorph(439877632)
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver red nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -9)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1996827 2209 822 4 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2115@441) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) an O...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		focusHolder: 	a MenuMorph(159645696)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		focusHolder: 	a MenuMorph(159645696)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2115@441) mouseUp 1972546 nil]
		evt: 	[(2115@441) mouseUp 1972546 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2209@822) corner: (2225@838)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2209@822) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1997617 2209 822 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2115@441) mouseUp 1972546 nil]
		evtBuf: 	#(1 1972546 2115 441 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(234@907) corner: (250@923)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(234@907) corner: (250@923)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	an OBTextMorph(985661440)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(234@907) mouseOver nil nil]
		targetOffset: 	(1683.0@220.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1998688 2206 824 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2017700
		lastStepMessage: 	nil
		lastCycleTime: 	2017700
		alarms: 	a Heap()
		lastAlarmTime: 	2017700
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2017700
		lastStepMessage: 	nil
		lastCycleTime: 	2017700
		alarms: 	a Heap()
		lastAlarmTime: 	2017700
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
22 October 2012 5:02:32.026 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aMessage: 	, PolymorphismAnalyzerTestJFC
		exception: 	MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTest>>resources
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self run: result]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	true
		returnValue: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>run
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2076@448) mouseUp 2237841 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(816054272)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2237841
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2076@448)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a ToggleMenuItemMorph(816054272)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a ToggleMenuItemMorph(816054272)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(816054272)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		owner: 	a MenuMorph(36962304)
		submorphs: 	#()
		fullBounds: 	(2034.0@436.0) corner: (2271.0@450.0)
		color: 	Color black
		extension: 	a MorphExtension (818675712)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a MenuMorph(36962304)
		localEvt: 	[(2076@448) mouseUp 2237841 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(816054272)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		aMorph: 	a MenuMorph(36962304)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(36962304)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (40894464) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(816054272)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(380108800)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(36962304)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (40894464) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(816054272)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(380108800)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(36962304)
	Arguments and temporary variables: 
		evt: 	[(2076@448) mouseUp 2237841 nil]
	Receiver's instance variables: 
		bounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(380108800)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2029.0@196.0) corner: (2276.0@593.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (40894464) [other:  (basicColor -> (Color r: 0.8230...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(816054272)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(380108800)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		focusHolder: 	a MenuMorph(36962304)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2076@448) corner: (2092@464)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2076@448) corner: (2092@464)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2076@448) mouseOver nil nil]
		targetOffset: 	(42.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2237841 2076 448 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2076@448) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		focusHolder: 	a MenuMorph(36962304)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2076@448) corner: (2092@464)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2076@448) corner: (2092@464)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2076@448) mouseOver nil nil]
		targetOffset: 	(42.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2237841 2076 448 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2076@448) mouseUp 2237841 nil]
		focusHolder: 	a MenuMorph(36962304)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2076@448) corner: (2092@464)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2076@448) corner: (2092@464)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2076@448) mouseOver nil nil]
		targetOffset: 	(42.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2237841 2076 448 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
PolymorphismAnalyzerTest>>resources
[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>run
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
22 October 2012 5:02:43.206 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
	Receiver: PolymorphismAnalyzerTestJHD
	Arguments and temporary variables: 
		aMessage: 	, PolymorphismAnalyzerTestJFC
		exception: 	MessageNotUnderstood: PolymorphismAnalyzerTestJHD class>>,
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	TestResource
		methodDict: 	a MethodDictionary(#model->(PolymorphismAnalyzerTestJHD>>#model "a ...etc...
		format: 	136
		instanceVariables: 	#('model')
		organization: 	('as yet unclassified' model setUp)

		subclasses: 	nil
		name: 	#PolymorphismAnalyzerTestJHD
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	nil
		localSelectors: 	nil
		current: 	nil


PolymorphismAnalyzerTest>>resources
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [self run: result]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	true
		returnValue: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>run
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>run
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


[target testSuite run] in OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


BlockClosure>>ensure:
	Receiver: [target testSuite run]
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	OBCmdRunTests>>execute
		startpc: 	158
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r111111111111110000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


OBMorphicPlatform>>handleWaitRequest:
	Receiver: an OBMorphicPlatform
	Arguments and temporary variables: 
		request: 	OBWaitRequest
	Receiver's instance variables: 
an OBMorphicPlatform

OBWaitRequest>>handleWith:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		anObject: 	an OBMorphicPlatform
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest(OBInteractionRequest)>>defaultAction
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
	Receiver's instance variables: 
nil

MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	OBWaitRequest
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(869793792)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


OBWaitRequest(Exception)>>signal
	Receiver: OBWaitRequest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	an OBCmdRunTests
		signalContext: 	OBWaitRequest(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		block: 	[target testSuite run]


OBWaitRequest class>>block:
	Receiver: OBWaitRequest
	Arguments and temporary variables: 
		aBlock: 	[target testSuite run]
	Receiver's instance variables: 
		superclass: 	OBInteractionRequest
		methodDict: 	a MethodDictionary(#block->(OBWaitRequest>>#block "a CompiledMethod...etc...
		format: 	144
		instanceVariables: 	#('block')
		organization: 	('accessing' block block:)
('dispatching' handleWith:)

		subclasses: 	nil
		name: 	#OBWaitRequest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OmniBrowser-Notifications'
		traitComposition: 	{}
		localSelectors: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	nil
		defect: 	nil
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2081@436) mouseUp 2249035 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(271581184)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2249035
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2081@436)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a ToggleMenuItemMorph(271581184)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a ToggleMenuItemMorph(271581184)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(271581184)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		owner: 	a MenuMorph(911736832)
		submorphs: 	#()
		fullBounds: 	(2044.0@433.0) corner: (2281.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (274202624)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a MenuMorph(911736832)
		localEvt: 	[(2081@436) mouseUp 2249035 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(271581184)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		aMorph: 	a MenuMorph(911736832)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(911736832)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (915406848) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(271581184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(180879360)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(911736832)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (915406848) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(271581184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(180879360)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(911736832)
	Arguments and temporary variables: 
		evt: 	[(2081@436) mouseUp 2249035 nil]
	Receiver's instance variables: 
		bounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(180879360)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2039.0@193.0) corner: (2286.0@590.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (915406848) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(271581184)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(180879360)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		focusHolder: 	a MenuMorph(911736832)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2081@436) corner: (2097@452)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2081@436) corner: (2097@452)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2081@436) mouseOver nil nil]
		targetOffset: 	(37.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2249035 2081 436 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2081@436) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		focusHolder: 	a MenuMorph(911736832)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2081@436) corner: (2097@452)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2081@436) corner: (2097@452)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2081@436) mouseOver nil nil]
		targetOffset: 	(37.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2249035 2081 436 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2081@436) mouseUp 2249035 nil]
		focusHolder: 	a MenuMorph(911736832)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2081@436) corner: (2097@452)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2081@436) corner: (2097@452)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2081@436) mouseOver nil nil]
		targetOffset: 	(37.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2249035 2081 436 0 0 1 1)
		lastKeyScanCode: 	51
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
PolymorphismAnalyzerTestJHD class(Object)>>doesNotUnderstand: #,
PolymorphismAnalyzerTest>>resources
[TestResource resetResources: self resources] in PolymorphismAnalyzerTest(TestCase)>>run
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>run
[target testSuite run] in OBCmdRunTests>>execute
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
OBMorphicPlatform>>handleWaitRequest:
OBWaitRequest>>handleWith:
OBWaitRequest(OBInteractionRequest)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
OBWaitRequest(Exception)>>signal
OBWaitRequest class>>block:
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 5:04:25.017 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2085@439) mouseUp 2264950 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(371720192)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2264950
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2085@439)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a ToggleMenuItemMorph(371720192)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a ToggleMenuItemMorph(371720192)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(371720192)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		owner: 	a MenuMorph(600047616)
		submorphs: 	#()
		fullBounds: 	(2045.0@430.0) corner: (2282.0@444.0)
		color: 	Color black
		extension: 	a MorphExtension (374341632)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a MenuMorph(600047616)
		localEvt: 	[(2085@439) mouseUp 2264950 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(371720192)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		aMorph: 	a MenuMorph(600047616)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(600047616)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (603979776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(371720192)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(943194112)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(600047616)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (603979776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(371720192)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(943194112)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(600047616)
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(943194112)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2040.0@190.0) corner: (2287.0@587.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (603979776) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(371720192)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(943194112)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		focusHolder: 	a MenuMorph(600047616)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2085@439) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		focusHolder: 	a MenuMorph(600047616)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		focusHolder: 	a MenuMorph(600047616)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2085@439) mouseUp 2264950 nil]
		evt: 	[(2085@439) mouseUp 2264950 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2085@439) mouseUp 2264950 nil]
		evtBuf: 	#(1 2264950 2085 439 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2475@579) corner: (2491@595)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2475@579) mouseOver nil nil]
		targetOffset: 	(40.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2323182 769 1139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2351049
		lastStepMessage: 	nil
		lastCycleTime: 	2351049
		alarms: 	a Heap()
		lastAlarmTime: 	2351049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2351049
		lastStepMessage: 	nil
		lastCycleTime: 	2351049
		alarms: 	a Heap()
		lastAlarmTime: 	2351049
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
22 October 2012 5:09:42.998 pm

VM: Mac OS - intel - 1082 - CoInterpreter VMMaker.oscog-eem.152 uuid: d39d62b0-45ca-4621-8f67-e3981bbe1875 Mar  3 2012, StackToRegisterMappingCogit VMMaker.oscog-eem.148 uuid: bb53aa60-4173-48ed-874b-dc0ff5a48992 Mar  3 2012, r2538 http://www.squeakvm.org/svn/squeak/branches/Cog
Image: Pharo1.4 [Latest update: #14457]

PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
	Receiver: PolymorphismAnalyzer
	Arguments and temporary variables: 
		aMessage: 	allHierarchies
		exception: 	MessageNotUnderstood: PolymorphismAnalyzer class>>allHierarchies
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#allCalls->(PolymorphismAnalyzer>>#allCalls "a C...etc...
		format: 	146
		instanceVariables: 	#('model' 'polymorphicMessagesDict' 'modelMethods' 'rootPoly...etc...
		organization: 	('analysis scripts - messages' messageMeasurements respondersFor:...etc...
		subclasses: 	nil
		name: 	#PolymorphismAnalyzer
		classPool: 	nil
		sharedPools: 	an OrderedCollection(a Dictionary())
		environment: 	a SystemDictionary(lots of globals)
		category: 	#PolyExp
		traitComposition: 	{}
		localSelectors: 	nil


PolymorphismAnalyzerTest>>testHd_allHierarchies
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


PolymorphismAnalyzerTest(TestCase)>>performTest
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>runCase
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	nil
		analyzer: 	PolymorphismAnalyzer
		hotDrawAnalyzer: 	PolymorphismAnalyzer
		jHotDrawAnalyzer: 	a PolymorphismAnalyzer
		jFreeChart: 	a PolymorphismAnalyzer


[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[TestResource resetResources: self resources]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PolymorphismAnalyzerTest(TestCase)>>debug
		startpc: 	45
		numArgs: 	0


PolymorphismAnalyzerTest(TestCase)>>debug
	Receiver: PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testHd_allHierarchies
		expectedFails: 	#()
		analyzer: 	nil
		hotDrawAnalyzer: 	nil
		jHotDrawAnalyzer: 	nil
		jFreeChart: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	PolymorphismAnalyzerTest>>#testHd_allHierarchies
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


OBCmdRunTests(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(112459776)
	Receiver's instance variables: 
		target: 	OBMethodNode<PolymorphismAnalyzerTest#testHd_allHierarchies>
		requestor: 	an OBColumn(testHd_allHierarchies)


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	160
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MouseButtonEvent>>sentTo:
	Receiver: [(2151@439) mouseUp 2537529 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(980156416)'Run Test'
	Receiver's instance variables: 
		timeStamp: 	2537529
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2151@439)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a ToggleMenuItemMorph(980156416)'Run Test'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a ToggleMenuItemMorph(980156416)'Run Test'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(980156416)'Run Test'
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		owner: 	a MenuMorph(543424512)
		submorphs: 	#()
		fullBounds: 	(2071.0@431.0) corner: (2308.0@445.0)
		color: 	Color black
		extension: 	a MorphExtension (982777856)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Run Test'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdRunTests
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(112459776))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'cmd+t'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a MenuMorph(543424512)
		localEvt: 	[(2151@439) mouseUp 2537529 nil]
		index: 	18
		child: 	a ToggleMenuItemMorph(980156416)'Run Test'
		morphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItemMor...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		aMorph: 	a MenuMorph(543424512)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(543424512)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (547094528) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(980156416)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(886308864)'File out' a To...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(543424512)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (547094528) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(980156416)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(886308864)'File out' a To...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(543424512)
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(886308864)'File out' a ToggleMenuItem...etc...
		fullBounds: 	(2066.0@191.0) corner: (2313.0@588.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894)
		extension: 	a MorphExtension (547094528) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674)
		defaultTarget: 	an OBColumn(testHd_allHierarchies)
		selectedItem: 	a ToggleMenuItemMorph(980156416)'Run Test'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(886308864)'File out' a To...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		focusHolder: 	a MenuMorph(543424512)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[(2151@439) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2508@1534)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) an OBSystemWindow(760741888) a Sy...etc...
		fullBounds: 	(0@0) corner: (2508@1534)
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		focusHolder: 	a MenuMorph(543424512)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		focusHolder: 	a MenuMorph(543424512)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[(2151@439) mouseUp 2537529 nil]
		evt: 	[(2151@439) mouseUp 2537529 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[(2151@439) mouseUp 2537529 nil]
		evtBuf: 	#(1 2537529 2151 439 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(2151@439) corner: (2167@455)
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	(2151@439) corner: (2167@455)
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(2151@439) mouseOver nil nil]
		targetOffset: 	(80.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2537529 2151 439 0 0 1 1)
		lastKeyScanCode: 	125
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2669012
		lastStepMessage: 	nil
		lastCycleTime: 	2669033
		alarms: 	a Heap()
		lastAlarmTime: 	2669033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	(0@0) corner: (2508@1534)
		canvas: 	a FormCanvas on: DisplayScreen(2508x1534x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(1004535808))(an OBSy...etc...
		lastStepTime: 	2669033
		lastStepMessage: 	nil
		lastCycleTime: 	2669033
		alarms: 	a Heap()
		lastAlarmTime: 	2669033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
PolymorphismAnalyzer class(Object)>>doesNotUnderstand: #allHierarchies
PolymorphismAnalyzerTest>>testHd_allHierarchies
PolymorphismAnalyzerTest(TestCase)>>performTest
[self setUp.
	self performTest] in PolymorphismAnalyzerTest(TestCase)>>runCase
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>runCase
[(self class selector: testSelector) runCase] in PolymorphismAnalyzerTest(TestCase)>>debug
BlockClosure>>ensure:
PolymorphismAnalyzerTest(TestCase)>>debug
OBCmdRunTests>>execute
OBCmdRunTests(OBCommand)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in MorphicUIManager>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

